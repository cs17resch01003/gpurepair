type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x: [bv32]bv32, y: bv32)
   returns (z$1: bv32, A$1: [bv32]bv32, z$2: bv32, A$2: [bv32]bv32);



var {:source_name "d_Histogram"} {:global} $$arg.: [bv32]bv32;

axiom {:array_info "$$arg."} {:global} {:elem_width 32} {:source_name "d_Histogram"} {:source_elem_width 32} {:source_dimensions "*"} true;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$arg.: bool;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$arg.: bool;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$arg.: bool;

axiom {:array_info "$$arg.1"} {:global} {:elem_width 32} {:source_name "d_PartialHistograms"} {:source_elem_width 32} {:source_dimensions "*"} true;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$arg.1: bool;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$arg.1: bool;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$arg.1: bool;

var {:source_name "data"} {:group_shared} $$_ZZ23mergeHistogram256KernelPjS_jE4data: [bv1][bv32]bv32;

axiom {:array_info "$$_ZZ23mergeHistogram256KernelPjS_jE4data"} {:group_shared} {:elem_width 32} {:source_name "data"} {:source_elem_width 32} {:source_dimensions "256"} true;

var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data: bool;

var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data: bool;

var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data: bool;

const _WATCHED_OFFSET: bv32;

const {:group_id_x} group_id_x$1: bv32;

const {:group_id_x} group_id_x$2: bv32;

const {:group_size_x} group_size_x: bv32;

const {:group_size_y} group_size_y: bv32;

const {:group_size_z} group_size_z: bv32;

const {:local_id_x} local_id_x$1: bv32;

const {:local_id_x} local_id_x$2: bv32;

const {:num_groups_x} num_groups_x: bv32;

const {:num_groups_y} num_groups_y: bv32;

const {:num_groups_z} num_groups_z: bv32;

const {:sub_group_size} sub_group_size: bv32;

function {:bvbuiltin "bvadd"} BV32_ADD(bv32, bv32) : bv32;

function {:bvbuiltin "bvlshr"} BV32_LSHR(bv32, bv32) : bv32;

function {:bvbuiltin "bvmul"} BV32_MUL(bv32, bv32) : bv32;

function {:bvbuiltin "bvugt"} BV32_UGT(bv32, bv32) : bool;

function {:bvbuiltin "bvult"} BV32_ULT(bv32, bv32) : bool;

procedure {:source_name "mergeHistogram256Kernel"} {:kernel} $_Z23mergeHistogram256KernelPjS_j($histogramCount: bv32);
  requires !_READ_HAS_OCCURRED_$$arg.
     && !_WRITE_HAS_OCCURRED_$$arg.
     && !_ATOMIC_HAS_OCCURRED_$$arg.;
  requires !_READ_HAS_OCCURRED_$$arg.1
     && !_WRITE_HAS_OCCURRED_$$arg.1
     && !_ATOMIC_HAS_OCCURRED_$$arg.1;
  requires !_READ_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data
     && !_WRITE_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data
     && !_ATOMIC_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data;
  requires BV32_SGT(group_size_x, 0bv32);
  requires BV32_SGT(num_groups_x, 0bv32);
  requires BV32_SGE(group_id_x$1, 0bv32);
  requires BV32_SGE(group_id_x$2, 0bv32);
  requires BV32_SLT(group_id_x$1, num_groups_x);
  requires BV32_SLT(group_id_x$2, num_groups_x);
  requires BV32_SGE(local_id_x$1, 0bv32);
  requires BV32_SGE(local_id_x$2, 0bv32);
  requires BV32_SLT(local_id_x$1, group_size_x);
  requires BV32_SLT(local_id_x$2, group_size_x);
  requires BV32_SGT(group_size_y, 0bv32);
  requires BV32_SGT(num_groups_y, 0bv32);
  requires BV32_SGE(group_id_y$1, 0bv32);
  requires BV32_SGE(group_id_y$2, 0bv32);
  requires BV32_SLT(group_id_y$1, num_groups_y);
  requires BV32_SLT(group_id_y$2, num_groups_y);
  requires BV32_SGE(local_id_y$1, 0bv32);
  requires BV32_SGE(local_id_y$2, 0bv32);
  requires BV32_SLT(local_id_y$1, group_size_y);
  requires BV32_SLT(local_id_y$2, group_size_y);
  requires BV32_SGT(group_size_z, 0bv32);
  requires BV32_SGT(num_groups_z, 0bv32);
  requires BV32_SGE(group_id_z$1, 0bv32);
  requires BV32_SGE(group_id_z$2, 0bv32);
  requires BV32_SLT(group_id_z$1, num_groups_z);
  requires BV32_SLT(group_id_z$2, num_groups_z);
  requires BV32_SGE(local_id_z$1, 0bv32);
  requires BV32_SGE(local_id_z$2, 0bv32);
  requires BV32_SLT(local_id_z$1, group_size_z);
  requires BV32_SLT(local_id_z$2, group_size_z);
  requires group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> local_id_x$1 != local_id_x$2
       || local_id_y$1 != local_id_y$2
       || local_id_z$1 != local_id_z$2;
  modifies b26, b25, b24, b23, b22, b21, b20, b19, b18, b17, b16, b15, b14, b13, b12, b11, b10, b9, b8, b7, b6, b5, b4, b3, b2, b1, $$_ZZ23mergeHistogram256KernelPjS_jE4data, $$arg., _TRACKING, _WRITE_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data, _WRITE_READ_BENIGN_FLAG_$$_ZZ23mergeHistogram256KernelPjS_jE4data, _READ_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data, _WRITE_HAS_OCCURRED_$$arg., _WRITE_READ_BENIGN_FLAG_$$arg.;



implementation {:source_name "mergeHistogram256Kernel"} {:kernel} $_Z23mergeHistogram256KernelPjS_j($histogramCount: bv32)
{
  var $.02$1: bv32;
  var $.02$2: bv32;
  var $.01$1: bv32;
  var $.01$2: bv32;
  var $.0: bv32;
  var v0$1: bool;
  var v0$2: bool;
  var v1$1: bv32;
  var v1$2: bv32;
  var v2: bool;
  var v3$1: bool;
  var v3$2: bool;
  var v4$1: bv32;
  var v4$2: bv32;
  var v5$1: bv32;
  var v5$2: bv32;
  var v6$1: bool;
  var v6$2: bool;
  var v7$1: bv32;
  var v7$2: bv32;
  var p0$1: bool;
  var p0$2: bool;
  var p1$1: bool;
  var p1$2: bool;
  var p2$1: bool;
  var p2$2: bool;
  var p3$1: bool;
  var p3$2: bool;
  var p4$1: bool;
  var p4$2: bool;
  var p5$1: bool;
  var p5$2: bool;
  var p6$1: bool;
  var p6$2: bool;
  var p7$1: bool;
  var p7$2: bool;
  var p8$1: bool;
  var p8$2: bool;
  var p9$1: bool;
  var p9$2: bool;
  var p10$1: bool;
  var p10$2: bool;
  var p11$1: bool;
  var p11$2: bool;
  var p12$1: bool;
  var p12$2: bool;
  var p13$1: bool;
  var p13$2: bool;
  var p14$1: bool;
  var p14$2: bool;
  var p15$1: bool;
  var p15$2: bool;
  var p16$1: bool;
  var p16$2: bool;
  var p17$1: bool;
  var p17$2: bool;
  var p18$1: bool;
  var p18$2: bool;
  var p19$1: bool;
  var p19$2: bool;
  var p20$1: bool;
  var p20$2: bool;
  var p21$1: bool;
  var p21$2: bool;
  var p22$1: bool;
  var p22$2: bool;
  var p23$1: bool;
  var p23$2: bool;
  var p24$1: bool;
  var p24$2: bool;
  var p25$1: bool;
  var p25$2: bool;
  var p26$1: bool;
  var p26$2: bool;
  var p27$1: bool;
  var p27$2: bool;
  var p28$1: bool;
  var p28$2: bool;
  var p29$1: bool;
  var p29$2: bool;
  var p30$1: bool;
  var p30$2: bool;
  var p31$1: bool;
  var p31$2: bool;
  var p32$1: bool;
  var p32$2: bool;
  var p33$1: bool;
  var p33$2: bool;
  var p34$1: bool;
  var p34$2: bool;
  var p35$1: bool;
  var p35$2: bool;
  var p36$1: bool;
  var p36$2: bool;
  var p37$1: bool;
  var p37$2: bool;
  var p38$1: bool;
  var p38$2: bool;
  var p39$1: bool;
  var p39$2: bool;
  var p40$1: bool;
  var p40$2: bool;
  var p41$1: bool;
  var p41$2: bool;
  var p42$1: bool;
  var p42$2: bool;
  var p43$1: bool;
  var p43$2: bool;
  var p44$1: bool;
  var p44$2: bool;
  var p45$1: bool;
  var p45$2: bool;
  var p46$1: bool;
  var p46$2: bool;
  var p47$1: bool;
  var p47$2: bool;
  var p48$1: bool;
  var p48$2: bool;
  var p49$1: bool;
  var p49$2: bool;
  var p50$1: bool;
  var p50$2: bool;
  var p51$1: bool;
  var p51$2: bool;
  var p52$1: bool;
  var p52$2: bool;
  var p53$1: bool;
  var p53$2: bool;
  var p54$1: bool;
  var p54$2: bool;
  var p55$1: bool;
  var p55$2: bool;
  var p56$1: bool;
  var p56$2: bool;
  var p57$1: bool;
  var p57$2: bool;
  var p58$1: bool;
  var p58$2: bool;
  var _HAVOC_bv32$1: bv32;
  var _HAVOC_bv32$2: bv32;


  __partitioned_block_$0_0:
    b26 := false;
    b25 := false;
    b24 := false;
    b23 := false;
    b22 := false;
    b21 := false;
    b20 := false;
    b19 := true;
    b18 := false;
    b17 := false;
    b16 := false;
    b15 := false;
    b14 := false;
    b13 := false;
    b12 := false;
    b11 := false;
    b10 := false;
    b9 := false;
    b8 := false;
    b7 := false;
    b6 := false;
    b5 := false;
    b4 := false;
    b3 := false;
    b2 := false;
    b1 := false;
    p0$1 := false;
    p0$2 := false;
    p1$1 := false;
    p1$2 := false;
    p2$1 := false;
    p2$2 := false;
    p3$1 := false;
    p3$2 := false;
    p4$1 := false;
    p4$2 := false;
    p0$1 := (if b17 then b17 else p0$1);
    p0$2 := (if b17 then b17 else p0$2);
    call {:repair_barrier "b17"} {:repair_instrumented} {:sourceloc_num 0} $bugle_barrier_duplicated_25(1bv1, 1bv1, p0$1, p0$2);
    p2$1 := (if b18 then b18 else p2$1);
    p2$2 := (if b18 then b18 else p2$2);
    call {:repair_barrier "b18"} {:repair_instrumented} {:sourceloc_num 0} $bugle_grid_barrier_duplicated_24(p2$1, p2$2);
    $.02$1, $.01$1 := 0bv32, local_id_x$1;
    $.02$2, $.01$2 := 0bv32, local_id_x$2;
    p4$1 := true;
    p4$2 := true;
    assume {:captureState "loop_entry_state_1_0"} true;
    goto __partitioned_block_$1_0;

  __partitioned_block_$1_0:
    assume {:captureState "loop_head_state_1"} true;
    assert {:tag "groupSharedArraysDisjointAcrossGroups"} _ATOMIC_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data
       ==> group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2;
    assert {:tag "groupSharedArraysDisjointAcrossGroups"} _WRITE_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data
       ==> group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2;
    assert {:tag "groupSharedArraysDisjointAcrossGroups"} _READ_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data
       ==> group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2;
    assume {:do_not_predicate} {:tag "conditionsImplyingEnabledness"} {:thread 1} true ==> BV32_ULT($.01$1, $histogramCount) ==> p4$1;
    assume {:do_not_predicate} {:tag "conditionsImplyingEnabledness"} {:thread 2} true ==> BV32_ULT($.01$2, $histogramCount) ==> p4$2;
    assume {:tag "loopBound"} {:thread 1} p4$1 ==> true ==> BV32_UGE($.01$1, local_id_x$1);
    assume {:tag "loopBound"} {:thread 2} p4$2 ==> true ==> BV32_UGE($.01$2, local_id_x$2);
    assume {:tag "loopCounterIsStrided"} {:thread 1} p4$1
       ==> 
      true
       ==> BV32_AND(BV32_SUB(256bv32, 1bv32), $.01$1)
         == BV32_AND(BV32_SUB(256bv32, 1bv32), local_id_x$1);
    assume {:tag "loopCounterIsStrided"} {:thread 2} p4$2
       ==> 
      true
       ==> BV32_AND(BV32_SUB(256bv32, 1bv32), $.01$2)
         == BV32_AND(BV32_SUB(256bv32, 1bv32), local_id_x$2);
    p5$1 := false;
    p5$2 := false;
    p6$1 := false;
    p6$2 := false;
    p7$1 := false;
    p7$2 := false;
    p8$1 := false;
    p8$2 := false;
    p9$1 := false;
    p9$2 := false;
    p10$1 := false;
    p10$2 := false;
    p11$1 := false;
    p11$2 := false;
    p12$1 := false;
    p12$2 := false;
    p13$1 := false;
    p13$2 := false;
    p14$1 := false;
    p14$2 := false;
    p15$1 := false;
    p15$2 := false;
    p16$1 := false;
    p16$2 := false;
    p17$1 := false;
    p17$2 := false;
    p18$1 := false;
    p18$2 := false;
    p19$1 := false;
    p19$2 := false;
    p20$1 := false;
    p20$2 := false;
    p21$1 := false;
    p21$2 := false;
    p22$1 := false;
    p22$2 := false;
    p6$1 := (if p4$1 && b15 then b15 else p6$1);
    p6$2 := (if p4$2 && b15 then b15 else p6$2);
    call {:repair_barrier "b15"} {:repair_instrumented} {:sourceloc_num 1} $bugle_barrier_duplicated_23(1bv1, 1bv1, p6$1, p6$2);
    p8$1 := (if p4$1 && b16 then b16 else p8$1);
    p8$2 := (if p4$2 && b16 then b16 else p8$2);
    call {:repair_barrier "b16"} {:repair_instrumented} {:sourceloc_num 1} $bugle_grid_barrier_duplicated_22(p8$1, p8$2);
    v0$1 := (if p4$1 then BV32_ULT($.01$1, $histogramCount) else v0$1);
    v0$2 := (if p4$2 then BV32_ULT($.01$2, $histogramCount) else v0$2);
    p9$1 := (if p4$1 && v0$1 then v0$1 else p9$1);
    p9$2 := (if p4$2 && v0$2 then v0$2 else p9$2);
    p4$1 := (if p4$1 && !v0$1 then v0$1 else p4$1);
    p4$2 := (if p4$2 && !v0$2 then v0$2 else p4$2);
    p11$1 := (if p9$1 && b1 then b1 else p11$1);
    p11$2 := (if p9$2 && b1 then b1 else p11$2);
    call {:repair_barrier "b1"} {:repair_instrumented} {:sourceloc_num 3} $bugle_barrier_duplicated_21(1bv1, 1bv1, p11$1, p11$2);
    p13$1 := (if p9$1 && b2 then b2 else p13$1);
    p13$2 := (if p9$2 && b2 then b2 else p13$2);
    call {:repair_barrier "b2"} {:repair_instrumented} {:sourceloc_num 3} $bugle_grid_barrier_duplicated_20(p13$1, p13$2);
    havoc _HAVOC_bv32$1, _HAVOC_bv32$2;
    v1$1 := (if p9$1 then _HAVOC_bv32$1 else v1$1);
    v1$2 := (if p9$2 then _HAVOC_bv32$2 else v1$2);
    $.02$1, $.01$1 := (if p9$1 then BV32_ADD($.02$1, v1$1) else $.02$1), (if p9$1 then BV32_ADD($.01$1, 256bv32) else $.01$1);
    $.02$2, $.01$2 := (if p9$2 then BV32_ADD($.02$2, v1$2) else $.02$2), (if p9$2 then BV32_ADD($.01$2, 256bv32) else $.01$2);
    p4$1 := (if p9$1 then true else p4$1);
    p4$2 := (if p9$2 then true else p4$2);
    goto $1.backedge, __partitioned_block_$1.tail_0;

  __partitioned_block_$1.tail_0:
    assume !p4$1 && !p4$2;
    p15$1 := (if b3 then b3 else p15$1);
    p15$2 := (if b3 then b3 else p15$2);
    call {:repair_barrier "b3"} {:repair_instrumented} {:sourceloc_num 6} $bugle_barrier_duplicated_19(1bv1, 1bv1, p15$1, p15$2);
    p17$1 := (if b4 then b4 else p17$1);
    p17$2 := (if b4 then b4 else p17$2);
    call {:repair_barrier "b4"} {:repair_instrumented} {:sourceloc_num 6} $bugle_grid_barrier_duplicated_18(p17$1, p17$2);
    call {:sourceloc} {:sourceloc_num 6} {:repair_instrumented} _LOG_WRITE_$$_ZZ23mergeHistogram256KernelPjS_jE4data(true, local_id_x$1, $.02$1, $$_ZZ23mergeHistogram256KernelPjS_jE4data[1bv1][local_id_x$1]);
    call _UPDATE_WRITE_READ_BENIGN_FLAG_$$_ZZ23mergeHistogram256KernelPjS_jE4data(true, local_id_x$2);
    assume {:do_not_predicate} {:check_id "check_state_0"} {:captureState "check_state_0"} {:sourceloc} {:sourceloc_num 6} {:repair_instrumented} true;
    call {:check_id "check_state_0"} {:sourceloc} {:sourceloc_num 6} {:repair_instrumented} _CHECK_WRITE_$$_ZZ23mergeHistogram256KernelPjS_jE4data(true, local_id_x$2, $.02$2);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_WRITE_$$_ZZ23mergeHistogram256KernelPjS_jE4data"} true;
    $$_ZZ23mergeHistogram256KernelPjS_jE4data[1bv1][local_id_x$1] := $.02$1;
    $$_ZZ23mergeHistogram256KernelPjS_jE4data[(if group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       then 1bv1
       else 0bv1)][local_id_x$2] := $.02$2;
    p19$1 := (if b21 then b21 else p19$1);
    p19$2 := (if b21 then b21 else p19$2);
    call {:repair_barrier "b21"} {:repair_instrumented} {:sourceloc_num 7} $bugle_barrier_duplicated_17(1bv1, 1bv1, p19$1, p19$2);
    p21$1 := (if b22 then b22 else p21$1);
    p21$2 := (if b22 then b22 else p21$2);
    call {:repair_barrier "b22"} {:repair_instrumented} {:sourceloc_num 7} $bugle_grid_barrier_duplicated_16(p21$1, p21$2);
    assert {:sourceloc_num 7} {:repair_instrumented} {:thread 1} true;
    $.0 := 128bv32;
    assume {:captureState "loop_entry_state_0_0"} true;
    goto __partitioned_block_$5_0;

  __partitioned_block_$5_0:
    assume {:captureState "loop_head_state_0"} true;
    assume {:tag "accessedOffsetsSatisfyPredicates"} true
       ==> 
      _WRITE_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data
       ==> _WATCHED_OFFSET == local_id_x$1;
    assume {:tag "pow2"} true ==> $.0 == 0bv32 || BV32_AND($.0, BV32_SUB($.0, 1bv32)) == 0bv32;
    assert {:tag "groupSharedArraysDisjointAcrossGroups"} _ATOMIC_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data
       ==> group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2;
    assert {:tag "groupSharedArraysDisjointAcrossGroups"} _WRITE_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data
       ==> group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2;
    assert {:tag "groupSharedArraysDisjointAcrossGroups"} _READ_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data
       ==> group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2;
    assume {:tag "loopBound"} {:thread 1} true ==> BV32_ULE($.0, 128bv32);
    assume {:tag "loopBound"} {:thread 1} true ==> BV32_SLE($.0, 128bv32);
    p23$1 := false;
    p23$2 := false;
    p24$1 := false;
    p24$2 := false;
    p25$1 := false;
    p25$2 := false;
    p26$1 := false;
    p26$2 := false;
    p27$1 := false;
    p27$2 := false;
    p28$1 := false;
    p28$2 := false;
    p29$1 := false;
    p29$2 := false;
    p30$1 := false;
    p30$2 := false;
    p31$1 := false;
    p31$2 := false;
    p32$1 := false;
    p32$2 := false;
    p33$1 := false;
    p33$2 := false;
    p34$1 := false;
    p34$2 := false;
    p35$1 := false;
    p35$2 := false;
    p36$1 := false;
    p36$2 := false;
    p37$1 := false;
    p37$2 := false;
    p38$1 := false;
    p38$2 := false;
    p39$1 := false;
    p39$2 := false;
    p40$1 := false;
    p40$2 := false;
    p41$1 := false;
    p41$2 := false;
    p42$1 := false;
    p42$2 := false;
    p43$1 := false;
    p43$2 := false;
    p44$1 := false;
    p44$2 := false;
    p45$1 := false;
    p45$2 := false;
    p46$1 := false;
    p46$2 := false;
    p47$1 := false;
    p47$2 := false;
    p48$1 := false;
    p48$2 := false;
    p49$1 := false;
    p49$2 := false;
    p50$1 := false;
    p50$2 := false;
    p51$1 := false;
    p51$2 := false;
    p52$1 := false;
    p52$2 := false;
    p53$1 := false;
    p53$2 := false;
    p54$1 := false;
    p54$2 := false;
    p55$1 := false;
    p55$2 := false;
    p56$1 := false;
    p56$2 := false;
    p57$1 := false;
    p57$2 := false;
    p58$1 := false;
    p58$2 := false;
    p24$1 := (if b19 then b19 else p24$1);
    p24$2 := (if b19 then b19 else p24$2);
    call {:repair_barrier "b19"} {:repair_instrumented} {:sourceloc_num 7} $bugle_barrier_duplicated_15(1bv1, 1bv1, p24$1, p24$2);
    p26$1 := (if b20 then b20 else p26$1);
    p26$2 := (if b20 then b20 else p26$2);
    call {:repair_barrier "b20"} {:repair_instrumented} {:sourceloc_num 7} $bugle_grid_barrier_duplicated_14(p26$1, p26$2);
    v2 := BV32_UGT($.0, 0bv32);
    goto __partitioned_block_$truebb0_0, __partitioned_block_$falsebb0_0;

  __partitioned_block_$falsebb0_0:
    assume {:partition} !v2;
    v6$1 := local_id_x$1 == 0bv32;
    v6$2 := local_id_x$2 == 0bv32;
    p45$1 := (if v6$1 then v6$1 else p45$1);
    p45$2 := (if v6$2 then v6$2 else p45$2);
    p46$1 := (if p45$1 && b7 then b7 else p46$1);
    p46$2 := (if p45$2 && b7 then b7 else p46$2);
    call {:repair_barrier "b7"} {:repair_instrumented} {:sourceloc_num 17} $bugle_barrier_duplicated_5(1bv1, 1bv1, p46$1, p46$2);
    p48$1 := (if p45$1 && b8 then b8 else p48$1);
    p48$2 := (if p45$2 && b8 then b8 else p48$2);
    call {:repair_barrier "b8"} {:repair_instrumented} {:sourceloc_num 17} $bugle_grid_barrier_duplicated_4(p48$1, p48$2);
    call {:sourceloc} {:sourceloc_num 17} {:repair_instrumented} _LOG_READ_$$_ZZ23mergeHistogram256KernelPjS_jE4data(p45$1, 0bv32, $$_ZZ23mergeHistogram256KernelPjS_jE4data[1bv1][0bv32]);
    assume {:do_not_predicate} {:check_id "check_state_1"} {:captureState "check_state_1"} {:sourceloc} {:sourceloc_num 17} {:repair_instrumented} true;
    call {:check_id "check_state_1"} {:sourceloc} {:sourceloc_num 17} {:repair_instrumented} _CHECK_READ_$$_ZZ23mergeHistogram256KernelPjS_jE4data(p45$2, 0bv32, $$_ZZ23mergeHistogram256KernelPjS_jE4data[(if group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       then 1bv1
       else 0bv1)][0bv32]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$_ZZ23mergeHistogram256KernelPjS_jE4data"} true;
    v7$1 := (if p45$1 then $$_ZZ23mergeHistogram256KernelPjS_jE4data[1bv1][0bv32] else v7$1);
    v7$2 := (if p45$2
       then $$_ZZ23mergeHistogram256KernelPjS_jE4data[(if group_id_x$1 == group_id_x$2
           && group_id_y$1 == group_id_y$2
           && group_id_z$1 == group_id_z$2
         then 1bv1
         else 0bv1)][0bv32]
       else v7$2);
    p50$1 := (if p45$1 && b11 then b11 else p50$1);
    p50$2 := (if p45$2 && b11 then b11 else p50$2);
    call {:repair_barrier "b11"} {:repair_instrumented} {:sourceloc_num 18} $bugle_barrier_duplicated_3(1bv1, 1bv1, p50$1, p50$2);
    p52$1 := (if p45$1 && b12 then b12 else p52$1);
    p52$2 := (if p45$2 && b12 then b12 else p52$2);
    call {:repair_barrier "b12"} {:repair_instrumented} {:sourceloc_num 18} $bugle_grid_barrier_duplicated_2(p52$1, p52$2);
    call {:sourceloc} {:sourceloc_num 18} {:repair_instrumented} _LOG_WRITE_$$arg.(p45$1, group_id_x$1, v7$1, $$arg.[group_id_x$1]);
    call _UPDATE_WRITE_READ_BENIGN_FLAG_$$arg.(p45$2, group_id_x$2);
    assume {:do_not_predicate} {:check_id "check_state_2"} {:captureState "check_state_2"} {:sourceloc} {:sourceloc_num 18} {:repair_instrumented} true;
    call {:check_id "check_state_2"} {:sourceloc} {:sourceloc_num 18} {:repair_instrumented} _CHECK_WRITE_$$arg.(p45$2, group_id_x$2, v7$2);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_WRITE_$$arg."} true;
    $$arg.[group_id_x$1] := (if p45$1 then v7$1 else $$arg.[group_id_x$1]);
    $$arg.[group_id_x$2] := (if p45$2 then v7$2 else $$arg.[group_id_x$2]);
    p55$1 := (if b25 then b25 else p55$1);
    p55$2 := (if b25 then b25 else p55$2);
    call {:repair_barrier "b25"} {:repair_instrumented} {:sourceloc_num 19} $bugle_barrier_duplicated_1(1bv1, 1bv1, p55$1, p55$2);
    p57$1 := (if b26 then b26 else p57$1);
    p57$2 := (if b26 then b26 else p57$2);
    call {:repair_barrier "b26"} {:repair_instrumented} {:sourceloc_num 19} $bugle_grid_barrier_duplicated_0(p57$1, p57$2);
    return;

  __partitioned_block_$truebb0_0:
    assume {:partition} v2;
    v3$1 := BV32_ULT(local_id_x$1, $.0);
    v3$2 := BV32_ULT(local_id_x$2, $.0);
    p28$1 := (if v3$1 then v3$1 else p28$1);
    p28$2 := (if v3$2 then v3$2 else p28$2);
    p30$1 := (if p28$1 && b5 then b5 else p30$1);
    p30$2 := (if p28$2 && b5 then b5 else p30$2);
    call {:repair_barrier "b5"} {:repair_instrumented} {:sourceloc_num 10} $bugle_barrier_duplicated_13(1bv1, 1bv1, p30$1, p30$2);
    p32$1 := (if p28$1 && b6 then b6 else p32$1);
    p32$2 := (if p28$2 && b6 then b6 else p32$2);
    call {:repair_barrier "b6"} {:repair_instrumented} {:sourceloc_num 10} $bugle_grid_barrier_duplicated_12(p32$1, p32$2);
    call {:sourceloc} {:sourceloc_num 10} {:repair_instrumented} _LOG_READ_$$_ZZ23mergeHistogram256KernelPjS_jE4data(p28$1, BV32_ADD(local_id_x$1, $.0), $$_ZZ23mergeHistogram256KernelPjS_jE4data[1bv1][BV32_ADD(local_id_x$1, $.0)]);
    assume {:do_not_predicate} {:check_id "check_state_3"} {:captureState "check_state_3"} {:sourceloc} {:sourceloc_num 10} {:repair_instrumented} true;
    call {:check_id "check_state_3"} {:sourceloc} {:sourceloc_num 10} {:repair_instrumented} _CHECK_READ_$$_ZZ23mergeHistogram256KernelPjS_jE4data(p28$2, BV32_ADD(local_id_x$2, $.0), $$_ZZ23mergeHistogram256KernelPjS_jE4data[(if group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       then 1bv1
       else 0bv1)][BV32_ADD(local_id_x$2, $.0)]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$_ZZ23mergeHistogram256KernelPjS_jE4data"} true;
    v4$1 := (if p28$1
       then $$_ZZ23mergeHistogram256KernelPjS_jE4data[1bv1][BV32_ADD(local_id_x$1, $.0)]
       else v4$1);
    v4$2 := (if p28$2
       then $$_ZZ23mergeHistogram256KernelPjS_jE4data[(if group_id_x$1 == group_id_x$2
           && group_id_y$1 == group_id_y$2
           && group_id_z$1 == group_id_z$2
         then 1bv1
         else 0bv1)][BV32_ADD(local_id_x$2, $.0)]
       else v4$2);
    p34$1 := (if p28$1 && b9 then b9 else p34$1);
    p34$2 := (if p28$2 && b9 then b9 else p34$2);
    call {:repair_barrier "b9"} {:repair_instrumented} {:sourceloc_num 11} $bugle_barrier_duplicated_11(1bv1, 1bv1, p34$1, p34$2);
    p36$1 := (if p28$1 && b10 then b10 else p36$1);
    p36$2 := (if p28$2 && b10 then b10 else p36$2);
    call {:repair_barrier "b10"} {:repair_instrumented} {:sourceloc_num 11} $bugle_grid_barrier_duplicated_10(p36$1, p36$2);
    call {:sourceloc} {:sourceloc_num 11} {:repair_instrumented} _LOG_READ_$$_ZZ23mergeHistogram256KernelPjS_jE4data(p28$1, local_id_x$1, $$_ZZ23mergeHistogram256KernelPjS_jE4data[1bv1][local_id_x$1]);
    assume {:do_not_predicate} {:check_id "check_state_4"} {:captureState "check_state_4"} {:sourceloc} {:sourceloc_num 11} {:repair_instrumented} true;
    call {:check_id "check_state_4"} {:sourceloc} {:sourceloc_num 11} {:repair_instrumented} _CHECK_READ_$$_ZZ23mergeHistogram256KernelPjS_jE4data(p28$2, local_id_x$2, $$_ZZ23mergeHistogram256KernelPjS_jE4data[(if group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       then 1bv1
       else 0bv1)][local_id_x$2]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$_ZZ23mergeHistogram256KernelPjS_jE4data"} true;
    v5$1 := (if p28$1
       then $$_ZZ23mergeHistogram256KernelPjS_jE4data[1bv1][local_id_x$1]
       else v5$1);
    v5$2 := (if p28$2
       then $$_ZZ23mergeHistogram256KernelPjS_jE4data[(if group_id_x$1 == group_id_x$2
           && group_id_y$1 == group_id_y$2
           && group_id_z$1 == group_id_z$2
         then 1bv1
         else 0bv1)][local_id_x$2]
       else v5$2);
    p38$1 := (if p28$1 && b13 then b13 else p38$1);
    p38$2 := (if p28$2 && b13 then b13 else p38$2);
    call {:repair_barrier "b13"} {:repair_instrumented} {:sourceloc_num 12} $bugle_barrier_duplicated_9(1bv1, 1bv1, p38$1, p38$2);
    p40$1 := (if p28$1 && b14 then b14 else p40$1);
    p40$2 := (if p28$2 && b14 then b14 else p40$2);
    call {:repair_barrier "b14"} {:repair_instrumented} {:sourceloc_num 12} $bugle_grid_barrier_duplicated_8(p40$1, p40$2);
    call {:sourceloc} {:sourceloc_num 12} {:repair_instrumented} _LOG_WRITE_$$_ZZ23mergeHistogram256KernelPjS_jE4data(p28$1, local_id_x$1, BV32_ADD(v5$1, v4$1), $$_ZZ23mergeHistogram256KernelPjS_jE4data[1bv1][local_id_x$1]);
    call _UPDATE_WRITE_READ_BENIGN_FLAG_$$_ZZ23mergeHistogram256KernelPjS_jE4data(p28$2, local_id_x$2);
    assume {:do_not_predicate} {:check_id "check_state_5"} {:captureState "check_state_5"} {:sourceloc} {:sourceloc_num 12} {:repair_instrumented} true;
    call {:check_id "check_state_5"} {:sourceloc} {:sourceloc_num 12} {:repair_instrumented} _CHECK_WRITE_$$_ZZ23mergeHistogram256KernelPjS_jE4data(p28$2, local_id_x$2, BV32_ADD(v5$2, v4$2));
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_WRITE_$$_ZZ23mergeHistogram256KernelPjS_jE4data"} true;
    $$_ZZ23mergeHistogram256KernelPjS_jE4data[1bv1][local_id_x$1] := (if p28$1
       then BV32_ADD(v5$1, v4$1)
       else $$_ZZ23mergeHistogram256KernelPjS_jE4data[1bv1][local_id_x$1]);
    $$_ZZ23mergeHistogram256KernelPjS_jE4data[(if group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       then 1bv1
       else 0bv1)][local_id_x$2] := (if p28$2
       then BV32_ADD(v5$2, v4$2)
       else $$_ZZ23mergeHistogram256KernelPjS_jE4data[(if group_id_x$1 == group_id_x$2
           && group_id_y$1 == group_id_y$2
           && group_id_z$1 == group_id_z$2
         then 1bv1
         else 0bv1)][local_id_x$2]);
    p42$1 := (if b23 then b23 else p42$1);
    p42$2 := (if b23 then b23 else p42$2);
    call {:repair_barrier "b23"} {:repair_instrumented} {:sourceloc_num 13} $bugle_barrier_duplicated_7(1bv1, 1bv1, p42$1, p42$2);
    p44$1 := (if b24 then b24 else p44$1);
    p44$2 := (if b24 then b24 else p44$2);
    call {:repair_barrier "b24"} {:repair_instrumented} {:sourceloc_num 13} $bugle_grid_barrier_duplicated_6(p44$1, p44$2);
    $.0 := BV32_LSHR($.0, 1bv32);
    assume {:captureState "loop_back_edge_state_0_0"} true;
    goto __partitioned_block_$5_0;

  $1.backedge:
    assume {:backedge} p4$1 || p4$2;
    assume {:captureState "loop_back_edge_state_1_0"} true;
    goto __partitioned_block_$1_0;
}



axiom (if group_size_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;

axiom (if group_size_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;

axiom (if num_groups_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;

axiom (if num_groups_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;

axiom (if group_size_x == 256bv32 then 1bv1 else 0bv1) != 0bv1;

axiom (if num_groups_x == 256bv32 then 1bv1 else 0bv1) != 0bv1;

axiom (if sub_group_size == 32bv32 then 1bv1 else 0bv1) != 0bv1;

procedure {:grid_barrier} $bugle_grid_barrier();



var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b1: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b2: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b3: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b4: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b5: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b6: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b7: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b8: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b9: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b10: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b11: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b12: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b13: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b14: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b15: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b16: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b17: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b18: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b19: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b20: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b21: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b22: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b23: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b24: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b25: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b26: bool;

const {:local_id_y} local_id_y$1: bv32;

const {:local_id_y} local_id_y$2: bv32;

const {:local_id_z} local_id_z$1: bv32;

const {:local_id_z} local_id_z$2: bv32;

const {:group_id_y} group_id_y$1: bv32;

const {:group_id_y} group_id_y$2: bv32;

const {:group_id_z} group_id_z$1: bv32;

const {:group_id_z} group_id_z$2: bv32;

procedure {:inline 1} {:grid_barrier} $bugle_grid_barrier_duplicated_0(_P$1: bool, _P$2: bool);
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ23mergeHistogram256KernelPjS_jE4data;



procedure {:inline 1} {:barrier} $bugle_barrier_duplicated_1($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ23mergeHistogram256KernelPjS_jE4data;



procedure {:inline 1} {:grid_barrier} $bugle_grid_barrier_duplicated_2(_P$1: bool, _P$2: bool);
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ23mergeHistogram256KernelPjS_jE4data;



procedure {:inline 1} {:barrier} $bugle_barrier_duplicated_3($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ23mergeHistogram256KernelPjS_jE4data;



procedure {:inline 1} {:grid_barrier} $bugle_grid_barrier_duplicated_4(_P$1: bool, _P$2: bool);
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ23mergeHistogram256KernelPjS_jE4data;



procedure {:inline 1} {:barrier} $bugle_barrier_duplicated_5($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ23mergeHistogram256KernelPjS_jE4data;



procedure {:inline 1} {:grid_barrier} $bugle_grid_barrier_duplicated_6(_P$1: bool, _P$2: bool);
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ23mergeHistogram256KernelPjS_jE4data;



procedure {:inline 1} {:barrier} $bugle_barrier_duplicated_7($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ23mergeHistogram256KernelPjS_jE4data;



procedure {:inline 1} {:grid_barrier} $bugle_grid_barrier_duplicated_8(_P$1: bool, _P$2: bool);
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ23mergeHistogram256KernelPjS_jE4data;



procedure {:inline 1} {:barrier} $bugle_barrier_duplicated_9($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ23mergeHistogram256KernelPjS_jE4data;



procedure {:inline 1} {:grid_barrier} $bugle_grid_barrier_duplicated_10(_P$1: bool, _P$2: bool);
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ23mergeHistogram256KernelPjS_jE4data;



procedure {:inline 1} {:barrier} $bugle_barrier_duplicated_11($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ23mergeHistogram256KernelPjS_jE4data;



procedure {:inline 1} {:grid_barrier} $bugle_grid_barrier_duplicated_12(_P$1: bool, _P$2: bool);
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ23mergeHistogram256KernelPjS_jE4data;



procedure {:inline 1} {:barrier} $bugle_barrier_duplicated_13($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ23mergeHistogram256KernelPjS_jE4data;



procedure {:inline 1} {:grid_barrier} $bugle_grid_barrier_duplicated_14(_P$1: bool, _P$2: bool);
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ23mergeHistogram256KernelPjS_jE4data;



procedure {:inline 1} {:barrier} $bugle_barrier_duplicated_15($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ23mergeHistogram256KernelPjS_jE4data;



procedure {:inline 1} {:grid_barrier} $bugle_grid_barrier_duplicated_16(_P$1: bool, _P$2: bool);
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ23mergeHistogram256KernelPjS_jE4data;



procedure {:inline 1} {:barrier} $bugle_barrier_duplicated_17($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ23mergeHistogram256KernelPjS_jE4data;



procedure {:inline 1} {:grid_barrier} $bugle_grid_barrier_duplicated_18(_P$1: bool, _P$2: bool);
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ23mergeHistogram256KernelPjS_jE4data;



procedure {:inline 1} {:barrier} $bugle_barrier_duplicated_19($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ23mergeHistogram256KernelPjS_jE4data;



procedure {:inline 1} {:grid_barrier} $bugle_grid_barrier_duplicated_20(_P$1: bool, _P$2: bool);
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ23mergeHistogram256KernelPjS_jE4data;



procedure {:inline 1} {:barrier} $bugle_barrier_duplicated_21($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ23mergeHistogram256KernelPjS_jE4data;



procedure {:inline 1} {:grid_barrier} $bugle_grid_barrier_duplicated_22(_P$1: bool, _P$2: bool);
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ23mergeHistogram256KernelPjS_jE4data;



procedure {:inline 1} {:barrier} $bugle_barrier_duplicated_23($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ23mergeHistogram256KernelPjS_jE4data;



procedure {:inline 1} {:grid_barrier} $bugle_grid_barrier_duplicated_24(_P$1: bool, _P$2: bool);
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ23mergeHistogram256KernelPjS_jE4data;



procedure {:inline 1} {:barrier} $bugle_barrier_duplicated_25($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ23mergeHistogram256KernelPjS_jE4data;



function {:bvbuiltin "bvsub"} BV32_SUB(bv32, bv32) : bv32;

function {:bvbuiltin "bvand"} BV32_AND(bv32, bv32) : bv32;

function {:bvbuiltin "bvsle"} BV32_SLE(bv32, bv32) : bool;

function {:bvbuiltin "bvsge"} BV32_SGE(bv32, bv32) : bool;

function {:bvbuiltin "bvule"} BV32_ULE(bv32, bv32) : bool;

function {:bvbuiltin "bvuge"} BV32_UGE(bv32, bv32) : bool;

const _WATCHED_VALUE_$$arg.: bv32;

procedure {:inline 1} _LOG_READ_$$arg.(_P: bool, _offset: bv32, _value: bv32);
  modifies _READ_HAS_OCCURRED_$$arg.;



implementation {:inline 1} _LOG_READ_$$arg.(_P: bool, _offset: bv32, _value: bv32)
{

  log_access_entry:
    _READ_HAS_OCCURRED_$$arg. := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$arg. == _value
       then true
       else _READ_HAS_OCCURRED_$$arg.);
    return;
}



procedure _CHECK_READ_$$arg.(_P: bool, _offset: bv32, _value: bv32);
  requires {:source_name "d_Histogram"} {:array "$$arg."} {:race} {:write_read} !(
    _P
     && _WRITE_HAS_OCCURRED_$$arg.
     && _WATCHED_OFFSET == _offset
     && _WRITE_READ_BENIGN_FLAG_$$arg.);
  requires {:source_name "d_Histogram"} {:array "$$arg."} {:race} {:atomic_read} !(_P && _ATOMIC_HAS_OCCURRED_$$arg. && _WATCHED_OFFSET == _offset);



var _WRITE_READ_BENIGN_FLAG_$$arg.: bool;

procedure {:inline 1} _LOG_WRITE_$$arg.(_P: bool, _offset: bv32, _value: bv32, _value_old: bv32);
  modifies _WRITE_HAS_OCCURRED_$$arg., _WRITE_READ_BENIGN_FLAG_$$arg.;



implementation {:inline 1} _LOG_WRITE_$$arg.(_P: bool, _offset: bv32, _value: bv32, _value_old: bv32)
{

  log_access_entry:
    _WRITE_HAS_OCCURRED_$$arg. := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$arg. == _value
       then true
       else _WRITE_HAS_OCCURRED_$$arg.);
    _WRITE_READ_BENIGN_FLAG_$$arg. := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$arg. == _value
       then _value != _value_old
       else _WRITE_READ_BENIGN_FLAG_$$arg.);
    return;
}



procedure _CHECK_WRITE_$$arg.(_P: bool, _offset: bv32, _value: bv32);
  requires {:source_name "d_Histogram"} {:array "$$arg."} {:race} {:write_write} !(
    _P
     && _WRITE_HAS_OCCURRED_$$arg.
     && _WATCHED_OFFSET == _offset
     && _WATCHED_VALUE_$$arg. != _value);
  requires {:source_name "d_Histogram"} {:array "$$arg."} {:race} {:read_write} !(
    _P
     && _READ_HAS_OCCURRED_$$arg.
     && _WATCHED_OFFSET == _offset
     && _WATCHED_VALUE_$$arg. != _value);
  requires {:source_name "d_Histogram"} {:array "$$arg."} {:race} {:atomic_write} !(_P && _ATOMIC_HAS_OCCURRED_$$arg. && _WATCHED_OFFSET == _offset);



procedure {:inline 1} _LOG_ATOMIC_$$arg.(_P: bool, _offset: bv32);
  modifies _ATOMIC_HAS_OCCURRED_$$arg.;



implementation {:inline 1} _LOG_ATOMIC_$$arg.(_P: bool, _offset: bv32)
{

  log_access_entry:
    _ATOMIC_HAS_OCCURRED_$$arg. := (if _P && _TRACKING && _WATCHED_OFFSET == _offset
       then true
       else _ATOMIC_HAS_OCCURRED_$$arg.);
    return;
}



procedure _CHECK_ATOMIC_$$arg.(_P: bool, _offset: bv32);
  requires {:source_name "d_Histogram"} {:array "$$arg."} {:race} {:write_atomic} !(_P && _WRITE_HAS_OCCURRED_$$arg. && _WATCHED_OFFSET == _offset);
  requires {:source_name "d_Histogram"} {:array "$$arg."} {:race} {:read_atomic} !(_P && _READ_HAS_OCCURRED_$$arg. && _WATCHED_OFFSET == _offset);



procedure {:inline 1} _UPDATE_WRITE_READ_BENIGN_FLAG_$$arg.(_P: bool, _offset: bv32);
  modifies _WRITE_READ_BENIGN_FLAG_$$arg.;



implementation {:inline 1} _UPDATE_WRITE_READ_BENIGN_FLAG_$$arg.(_P: bool, _offset: bv32)
{

  _UPDATE_BENIGN_FLAG:
    _WRITE_READ_BENIGN_FLAG_$$arg. := (if _P && _WRITE_HAS_OCCURRED_$$arg. && _WATCHED_OFFSET == _offset
       then false
       else _WRITE_READ_BENIGN_FLAG_$$arg.);
    return;
}



const _WATCHED_VALUE_$$arg.1: bv32;

procedure {:inline 1} _LOG_READ_$$arg.1(_P: bool, _offset: bv32, _value: bv32);
  modifies _READ_HAS_OCCURRED_$$arg.1;



implementation {:inline 1} _LOG_READ_$$arg.1(_P: bool, _offset: bv32, _value: bv32)
{

  log_access_entry:
    _READ_HAS_OCCURRED_$$arg.1 := (if _P
         && _TRACKING
         && _WATCHED_OFFSET == _offset
         && _WATCHED_VALUE_$$arg.1 == _value
       then true
       else _READ_HAS_OCCURRED_$$arg.1);
    return;
}



procedure _CHECK_READ_$$arg.1(_P: bool, _offset: bv32, _value: bv32);
  requires {:source_name "d_PartialHistograms"} {:array "$$arg.1"} {:race} {:write_read} !(
    _P
     && _WRITE_HAS_OCCURRED_$$arg.1
     && _WATCHED_OFFSET == _offset
     && _WRITE_READ_BENIGN_FLAG_$$arg.1);
  requires {:source_name "d_PartialHistograms"} {:array "$$arg.1"} {:race} {:atomic_read} !(_P && _ATOMIC_HAS_OCCURRED_$$arg.1 && _WATCHED_OFFSET == _offset);



var _WRITE_READ_BENIGN_FLAG_$$arg.1: bool;

procedure {:inline 1} _LOG_WRITE_$$arg.1(_P: bool, _offset: bv32, _value: bv32, _value_old: bv32);
  modifies _WRITE_HAS_OCCURRED_$$arg.1, _WRITE_READ_BENIGN_FLAG_$$arg.1;



implementation {:inline 1} _LOG_WRITE_$$arg.1(_P: bool, _offset: bv32, _value: bv32, _value_old: bv32)
{

  log_access_entry:
    _WRITE_HAS_OCCURRED_$$arg.1 := (if _P
         && _TRACKING
         && _WATCHED_OFFSET == _offset
         && _WATCHED_VALUE_$$arg.1 == _value
       then true
       else _WRITE_HAS_OCCURRED_$$arg.1);
    _WRITE_READ_BENIGN_FLAG_$$arg.1 := (if _P
         && _TRACKING
         && _WATCHED_OFFSET == _offset
         && _WATCHED_VALUE_$$arg.1 == _value
       then _value != _value_old
       else _WRITE_READ_BENIGN_FLAG_$$arg.1);
    return;
}



procedure _CHECK_WRITE_$$arg.1(_P: bool, _offset: bv32, _value: bv32);
  requires {:source_name "d_PartialHistograms"} {:array "$$arg.1"} {:race} {:write_write} !(
    _P
     && _WRITE_HAS_OCCURRED_$$arg.1
     && _WATCHED_OFFSET == _offset
     && _WATCHED_VALUE_$$arg.1 != _value);
  requires {:source_name "d_PartialHistograms"} {:array "$$arg.1"} {:race} {:read_write} !(
    _P
     && _READ_HAS_OCCURRED_$$arg.1
     && _WATCHED_OFFSET == _offset
     && _WATCHED_VALUE_$$arg.1 != _value);
  requires {:source_name "d_PartialHistograms"} {:array "$$arg.1"} {:race} {:atomic_write} !(_P && _ATOMIC_HAS_OCCURRED_$$arg.1 && _WATCHED_OFFSET == _offset);



procedure {:inline 1} _LOG_ATOMIC_$$arg.1(_P: bool, _offset: bv32);
  modifies _ATOMIC_HAS_OCCURRED_$$arg.1;



implementation {:inline 1} _LOG_ATOMIC_$$arg.1(_P: bool, _offset: bv32)
{

  log_access_entry:
    _ATOMIC_HAS_OCCURRED_$$arg.1 := (if _P && _TRACKING && _WATCHED_OFFSET == _offset
       then true
       else _ATOMIC_HAS_OCCURRED_$$arg.1);
    return;
}



procedure _CHECK_ATOMIC_$$arg.1(_P: bool, _offset: bv32);
  requires {:source_name "d_PartialHistograms"} {:array "$$arg.1"} {:race} {:write_atomic} !(_P && _WRITE_HAS_OCCURRED_$$arg.1 && _WATCHED_OFFSET == _offset);
  requires {:source_name "d_PartialHistograms"} {:array "$$arg.1"} {:race} {:read_atomic} !(_P && _READ_HAS_OCCURRED_$$arg.1 && _WATCHED_OFFSET == _offset);



procedure {:inline 1} _UPDATE_WRITE_READ_BENIGN_FLAG_$$arg.1(_P: bool, _offset: bv32);
  modifies _WRITE_READ_BENIGN_FLAG_$$arg.1;



implementation {:inline 1} _UPDATE_WRITE_READ_BENIGN_FLAG_$$arg.1(_P: bool, _offset: bv32)
{

  _UPDATE_BENIGN_FLAG:
    _WRITE_READ_BENIGN_FLAG_$$arg.1 := (if _P && _WRITE_HAS_OCCURRED_$$arg.1 && _WATCHED_OFFSET == _offset
       then false
       else _WRITE_READ_BENIGN_FLAG_$$arg.1);
    return;
}



const _WATCHED_VALUE_$$_ZZ23mergeHistogram256KernelPjS_jE4data: bv32;

procedure {:inline 1} _LOG_READ_$$_ZZ23mergeHistogram256KernelPjS_jE4data(_P: bool, _offset: bv32, _value: bv32);
  modifies _READ_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data;



implementation {:inline 1} _LOG_READ_$$_ZZ23mergeHistogram256KernelPjS_jE4data(_P: bool, _offset: bv32, _value: bv32)
{

  log_access_entry:
    _READ_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data := (if _P
         && group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && _TRACKING
         && _WATCHED_OFFSET == _offset
         && _WATCHED_VALUE_$$_ZZ23mergeHistogram256KernelPjS_jE4data == _value
       then true
       else _READ_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data);
    return;
}



procedure _CHECK_READ_$$_ZZ23mergeHistogram256KernelPjS_jE4data(_P: bool, _offset: bv32, _value: bv32);
  requires {:source_name "data"} {:array "$$_ZZ23mergeHistogram256KernelPjS_jE4data"} {:race} {:write_read} !(
    _P
     && _WRITE_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data
     && _WATCHED_OFFSET == _offset
     && _WRITE_READ_BENIGN_FLAG_$$_ZZ23mergeHistogram256KernelPjS_jE4data
     && group_id_x$1 == group_id_x$2
     && group_id_y$1 == group_id_y$2
     && group_id_z$1 == group_id_z$2);
  requires {:source_name "data"} {:array "$$_ZZ23mergeHistogram256KernelPjS_jE4data"} {:race} {:atomic_read} !(
    _P
     && _ATOMIC_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data
     && _WATCHED_OFFSET == _offset
     && group_id_x$1 == group_id_x$2
     && group_id_y$1 == group_id_y$2
     && group_id_z$1 == group_id_z$2);



var _WRITE_READ_BENIGN_FLAG_$$_ZZ23mergeHistogram256KernelPjS_jE4data: bool;

procedure {:inline 1} _LOG_WRITE_$$_ZZ23mergeHistogram256KernelPjS_jE4data(_P: bool, _offset: bv32, _value: bv32, _value_old: bv32);
  modifies _WRITE_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data, _WRITE_READ_BENIGN_FLAG_$$_ZZ23mergeHistogram256KernelPjS_jE4data;



implementation {:inline 1} _LOG_WRITE_$$_ZZ23mergeHistogram256KernelPjS_jE4data(_P: bool, _offset: bv32, _value: bv32, _value_old: bv32)
{

  log_access_entry:
    _WRITE_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data := (if _P
         && group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && _TRACKING
         && _WATCHED_OFFSET == _offset
         && _WATCHED_VALUE_$$_ZZ23mergeHistogram256KernelPjS_jE4data == _value
       then true
       else _WRITE_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data);
    _WRITE_READ_BENIGN_FLAG_$$_ZZ23mergeHistogram256KernelPjS_jE4data := (if _P
         && group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && _TRACKING
         && _WATCHED_OFFSET == _offset
         && _WATCHED_VALUE_$$_ZZ23mergeHistogram256KernelPjS_jE4data == _value
       then _value != _value_old
       else _WRITE_READ_BENIGN_FLAG_$$_ZZ23mergeHistogram256KernelPjS_jE4data);
    return;
}



procedure _CHECK_WRITE_$$_ZZ23mergeHistogram256KernelPjS_jE4data(_P: bool, _offset: bv32, _value: bv32);
  requires {:source_name "data"} {:array "$$_ZZ23mergeHistogram256KernelPjS_jE4data"} {:race} {:write_write} !(
    _P
     && _WRITE_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data
     && _WATCHED_OFFSET == _offset
     && _WATCHED_VALUE_$$_ZZ23mergeHistogram256KernelPjS_jE4data != _value
     && group_id_x$1 == group_id_x$2
     && group_id_y$1 == group_id_y$2
     && group_id_z$1 == group_id_z$2);
  requires {:source_name "data"} {:array "$$_ZZ23mergeHistogram256KernelPjS_jE4data"} {:race} {:read_write} !(
    _P
     && _READ_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data
     && _WATCHED_OFFSET == _offset
     && _WATCHED_VALUE_$$_ZZ23mergeHistogram256KernelPjS_jE4data != _value
     && group_id_x$1 == group_id_x$2
     && group_id_y$1 == group_id_y$2
     && group_id_z$1 == group_id_z$2);
  requires {:source_name "data"} {:array "$$_ZZ23mergeHistogram256KernelPjS_jE4data"} {:race} {:atomic_write} !(
    _P
     && _ATOMIC_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data
     && _WATCHED_OFFSET == _offset
     && group_id_x$1 == group_id_x$2
     && group_id_y$1 == group_id_y$2
     && group_id_z$1 == group_id_z$2);



procedure {:inline 1} _LOG_ATOMIC_$$_ZZ23mergeHistogram256KernelPjS_jE4data(_P: bool, _offset: bv32);
  modifies _ATOMIC_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data;



implementation {:inline 1} _LOG_ATOMIC_$$_ZZ23mergeHistogram256KernelPjS_jE4data(_P: bool, _offset: bv32)
{

  log_access_entry:
    _ATOMIC_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data := (if _P
         && group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && _TRACKING
         && _WATCHED_OFFSET == _offset
       then true
       else _ATOMIC_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data);
    return;
}



procedure _CHECK_ATOMIC_$$_ZZ23mergeHistogram256KernelPjS_jE4data(_P: bool, _offset: bv32);
  requires {:source_name "data"} {:array "$$_ZZ23mergeHistogram256KernelPjS_jE4data"} {:race} {:write_atomic} !(
    _P
     && _WRITE_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data
     && _WATCHED_OFFSET == _offset
     && group_id_x$1 == group_id_x$2
     && group_id_y$1 == group_id_y$2
     && group_id_z$1 == group_id_z$2);
  requires {:source_name "data"} {:array "$$_ZZ23mergeHistogram256KernelPjS_jE4data"} {:race} {:read_atomic} !(
    _P
     && _READ_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data
     && _WATCHED_OFFSET == _offset
     && group_id_x$1 == group_id_x$2
     && group_id_y$1 == group_id_y$2
     && group_id_z$1 == group_id_z$2);



procedure {:inline 1} _UPDATE_WRITE_READ_BENIGN_FLAG_$$_ZZ23mergeHistogram256KernelPjS_jE4data(_P: bool, _offset: bv32);
  modifies _WRITE_READ_BENIGN_FLAG_$$_ZZ23mergeHistogram256KernelPjS_jE4data;



implementation {:inline 1} _UPDATE_WRITE_READ_BENIGN_FLAG_$$_ZZ23mergeHistogram256KernelPjS_jE4data(_P: bool, _offset: bv32)
{

  _UPDATE_BENIGN_FLAG:
    _WRITE_READ_BENIGN_FLAG_$$_ZZ23mergeHistogram256KernelPjS_jE4data := (if _P
         && _WRITE_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data
         && _WATCHED_OFFSET == _offset
       then false
       else _WRITE_READ_BENIGN_FLAG_$$_ZZ23mergeHistogram256KernelPjS_jE4data);
    return;
}



var _TRACKING: bool;

implementation {:inline 1} $bugle_grid_barrier_duplicated_0(_P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume true ==> !_READ_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data;
    assume true ==> !_WRITE_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data;
    assume true ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} false;
    goto anon3;

  anon3:
    assume true ==> true ==> !_READ_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} false;
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} true;
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} true;
    havoc $$_ZZ23mergeHistogram256KernelPjS_jE4data;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_1($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data;
    assume _P$1 && $0 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data;
    assume _P$1 && $0 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(
      group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$_ZZ23mergeHistogram256KernelPjS_jE4data;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_grid_barrier_duplicated_2(_P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume true ==> !_READ_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data;
    assume true ==> !_WRITE_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data;
    assume true ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} false;
    goto anon3;

  anon3:
    assume true ==> true ==> !_READ_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} false;
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} true;
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} true;
    havoc $$_ZZ23mergeHistogram256KernelPjS_jE4data;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_3($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data;
    assume _P$1 && $0 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data;
    assume _P$1 && $0 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(
      group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$_ZZ23mergeHistogram256KernelPjS_jE4data;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_grid_barrier_duplicated_4(_P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume true ==> !_READ_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data;
    assume true ==> !_WRITE_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data;
    assume true ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} false;
    goto anon3;

  anon3:
    assume true ==> true ==> !_READ_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} false;
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} true;
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} true;
    havoc $$_ZZ23mergeHistogram256KernelPjS_jE4data;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_5($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data;
    assume _P$1 && $0 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data;
    assume _P$1 && $0 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(
      group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$_ZZ23mergeHistogram256KernelPjS_jE4data;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_grid_barrier_duplicated_6(_P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume true ==> !_READ_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data;
    assume true ==> !_WRITE_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data;
    assume true ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} false;
    goto anon3;

  anon3:
    assume true ==> true ==> !_READ_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} false;
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} true;
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} true;
    havoc $$_ZZ23mergeHistogram256KernelPjS_jE4data;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_7($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data;
    assume _P$1 && $0 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data;
    assume _P$1 && $0 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(
      group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$_ZZ23mergeHistogram256KernelPjS_jE4data;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_grid_barrier_duplicated_8(_P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume true ==> !_READ_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data;
    assume true ==> !_WRITE_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data;
    assume true ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} false;
    goto anon3;

  anon3:
    assume true ==> true ==> !_READ_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} false;
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} true;
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} true;
    havoc $$_ZZ23mergeHistogram256KernelPjS_jE4data;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_9($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data;
    assume _P$1 && $0 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data;
    assume _P$1 && $0 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(
      group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$_ZZ23mergeHistogram256KernelPjS_jE4data;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_grid_barrier_duplicated_10(_P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume true ==> !_READ_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data;
    assume true ==> !_WRITE_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data;
    assume true ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} false;
    goto anon3;

  anon3:
    assume true ==> true ==> !_READ_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} false;
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} true;
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} true;
    havoc $$_ZZ23mergeHistogram256KernelPjS_jE4data;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_11($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data;
    assume _P$1 && $0 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data;
    assume _P$1 && $0 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(
      group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$_ZZ23mergeHistogram256KernelPjS_jE4data;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_grid_barrier_duplicated_12(_P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume true ==> !_READ_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data;
    assume true ==> !_WRITE_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data;
    assume true ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} false;
    goto anon3;

  anon3:
    assume true ==> true ==> !_READ_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} false;
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} true;
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} true;
    havoc $$_ZZ23mergeHistogram256KernelPjS_jE4data;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_13($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data;
    assume _P$1 && $0 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data;
    assume _P$1 && $0 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(
      group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$_ZZ23mergeHistogram256KernelPjS_jE4data;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_grid_barrier_duplicated_14(_P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume true ==> !_READ_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data;
    assume true ==> !_WRITE_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data;
    assume true ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} false;
    goto anon3;

  anon3:
    assume true ==> true ==> !_READ_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} false;
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} true;
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} true;
    havoc $$_ZZ23mergeHistogram256KernelPjS_jE4data;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_15($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data;
    assume _P$1 && $0 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data;
    assume _P$1 && $0 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(
      group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$_ZZ23mergeHistogram256KernelPjS_jE4data;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_grid_barrier_duplicated_16(_P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume true ==> !_READ_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data;
    assume true ==> !_WRITE_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data;
    assume true ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} false;
    goto anon3;

  anon3:
    assume true ==> true ==> !_READ_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} false;
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} true;
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} true;
    havoc $$_ZZ23mergeHistogram256KernelPjS_jE4data;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_17($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data;
    assume _P$1 && $0 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data;
    assume _P$1 && $0 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(
      group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$_ZZ23mergeHistogram256KernelPjS_jE4data;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_grid_barrier_duplicated_18(_P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume true ==> !_READ_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data;
    assume true ==> !_WRITE_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data;
    assume true ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} false;
    goto anon3;

  anon3:
    assume true ==> true ==> !_READ_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} false;
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} true;
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} true;
    havoc $$_ZZ23mergeHistogram256KernelPjS_jE4data;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_19($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data;
    assume _P$1 && $0 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data;
    assume _P$1 && $0 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(
      group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$_ZZ23mergeHistogram256KernelPjS_jE4data;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_grid_barrier_duplicated_20(_P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume true ==> !_READ_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data;
    assume true ==> !_WRITE_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data;
    assume true ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} false;
    goto anon3;

  anon3:
    assume true ==> true ==> !_READ_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} false;
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} true;
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} true;
    havoc $$_ZZ23mergeHistogram256KernelPjS_jE4data;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_21($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data;
    assume _P$1 && $0 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data;
    assume _P$1 && $0 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(
      group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$_ZZ23mergeHistogram256KernelPjS_jE4data;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_grid_barrier_duplicated_22(_P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume true ==> !_READ_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data;
    assume true ==> !_WRITE_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data;
    assume true ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} false;
    goto anon3;

  anon3:
    assume true ==> true ==> !_READ_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} false;
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} true;
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} true;
    havoc $$_ZZ23mergeHistogram256KernelPjS_jE4data;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_23($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data;
    assume _P$1 && $0 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data;
    assume _P$1 && $0 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(
      group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$_ZZ23mergeHistogram256KernelPjS_jE4data;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_grid_barrier_duplicated_24(_P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume true ==> !_READ_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data;
    assume true ==> !_WRITE_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data;
    assume true ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} false;
    goto anon3;

  anon3:
    assume true ==> true ==> !_READ_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} false;
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} true;
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} true;
    havoc $$_ZZ23mergeHistogram256KernelPjS_jE4data;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_25($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data;
    assume _P$1 && $0 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data;
    assume _P$1 && $0 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ23mergeHistogram256KernelPjS_jE4data;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(
      group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$_ZZ23mergeHistogram256KernelPjS_jE4data;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



function {:bvbuiltin "bvsgt"} BV32_SGT(bv32, bv32) : bool;

function {:bvbuiltin "bvslt"} BV32_SLT(bv32, bv32) : bool;
