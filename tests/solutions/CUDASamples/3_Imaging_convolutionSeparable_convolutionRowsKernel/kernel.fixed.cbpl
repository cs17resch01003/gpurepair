type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x: [bv32]bv32, y: bv32)
   returns (z$1: bv32, A$1: [bv32]bv32, z$2: bv32, A$2: [bv32]bv32);



var {:source_name "d_Dst"} {:global} $$arg.: [bv32]bv32;

axiom {:array_info "$$arg."} {:global} {:elem_width 32} {:source_name "d_Dst"} {:source_elem_width 32} {:source_dimensions "*"} true;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$arg.: bool;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$arg.: bool;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$arg.: bool;

axiom {:array_info "$$arg.1"} {:global} {:elem_width 32} {:source_name "d_Src"} {:source_elem_width 32} {:source_dimensions "*"} true;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$arg.1: bool;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$arg.1: bool;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$arg.1: bool;

var {:source_name "s_Data"} {:group_shared} $$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data: [bv1][bv32]bv32;

axiom {:array_info "$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data"} {:group_shared} {:elem_width 32} {:source_name "s_Data"} {:source_elem_width 32} {:source_dimensions "4,160"} true;

var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*,160"} _READ_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data: bool;

var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*,160"} _WRITE_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data: bool;

var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*,160"} _ATOMIC_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data: bool;

var {:source_name "c_Kernel"} {:constant} $$c_Kernel$1: [bv32]bv32;

var {:source_name "c_Kernel"} {:constant} $$c_Kernel$2: [bv32]bv32;

axiom {:array_info "$$c_Kernel"} {:constant} {:elem_width 32} {:source_name "c_Kernel"} {:source_elem_width 32} {:source_dimensions "17"} true;

const _WATCHED_OFFSET: bv32;

const {:group_id_x} group_id_x$1: bv32;

const {:group_id_x} group_id_x$2: bv32;

const {:group_id_y} group_id_y$1: bv32;

const {:group_id_y} group_id_y$2: bv32;

const {:group_size_x} group_size_x: bv32;

const {:group_size_y} group_size_y: bv32;

const {:group_size_z} group_size_z: bv32;

const {:local_id_x} local_id_x$1: bv32;

const {:local_id_x} local_id_x$2: bv32;

const {:local_id_y} local_id_y$1: bv32;

const {:local_id_y} local_id_y$2: bv32;

const {:num_groups_x} num_groups_x: bv32;

const {:num_groups_y} num_groups_y: bv32;

const {:num_groups_z} num_groups_z: bv32;

const {:sub_group_size} sub_group_size: bv32;

function FADD32(bv32, bv32) : bv32;

function FMUL32(bv32, bv32) : bv32;

function {:bvbuiltin "bvadd"} BV32_ADD(bv32, bv32) : bv32;

function {:bvbuiltin "bvmul"} BV32_MUL(bv32, bv32) : bv32;

function {:bvbuiltin "bvsge"} BV32_SGE(bv32, bv32) : bool;

function {:bvbuiltin "bvsgt"} BV32_SGT(bv32, bv32) : bool;

function {:bvbuiltin "bvsle"} BV32_SLE(bv32, bv32) : bool;

function {:bvbuiltin "bvslt"} BV32_SLT(bv32, bv32) : bool;

function {:bvbuiltin "bvsub"} BV32_SUB(bv32, bv32) : bv32;

function {:bvbuiltin "bvudiv"} BV32_UDIV(bv32, bv32) : bv32;

function {:bvbuiltin "bvuge"} BV32_UGE(bv32, bv32) : bool;

function {:bvbuiltin "bvult"} BV32_ULT(bv32, bv32) : bool;

function {:bvbuiltin "bvurem"} BV32_UREM(bv32, bv32) : bv32;

procedure {:source_name "convolutionRowsKernel"} {:kernel} $_Z21convolutionRowsKernelPfS_iii($imageW: bv32, $imageH: bv32, $pitch: bv32);
  requires {:sourceloc_num 0} {:thread 1} (if $pitch == 3072bv32 then 1bv1 else 0bv1) != 0bv1;
  requires !_READ_HAS_OCCURRED_$$arg.
     && !_WRITE_HAS_OCCURRED_$$arg.
     && !_ATOMIC_HAS_OCCURRED_$$arg.;
  requires !_READ_HAS_OCCURRED_$$arg.1
     && !_WRITE_HAS_OCCURRED_$$arg.1
     && !_ATOMIC_HAS_OCCURRED_$$arg.1;
  requires !_READ_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data
     && !_WRITE_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data
     && !_ATOMIC_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
  requires BV32_SGT(group_size_x, 0bv32);
  requires BV32_SGT(num_groups_x, 0bv32);
  requires BV32_SGE(group_id_x$1, 0bv32);
  requires BV32_SGE(group_id_x$2, 0bv32);
  requires BV32_SLT(group_id_x$1, num_groups_x);
  requires BV32_SLT(group_id_x$2, num_groups_x);
  requires BV32_SGE(local_id_x$1, 0bv32);
  requires BV32_SGE(local_id_x$2, 0bv32);
  requires BV32_SLT(local_id_x$1, group_size_x);
  requires BV32_SLT(local_id_x$2, group_size_x);
  requires BV32_SGT(group_size_y, 0bv32);
  requires BV32_SGT(num_groups_y, 0bv32);
  requires BV32_SGE(group_id_y$1, 0bv32);
  requires BV32_SGE(group_id_y$2, 0bv32);
  requires BV32_SLT(group_id_y$1, num_groups_y);
  requires BV32_SLT(group_id_y$2, num_groups_y);
  requires BV32_SGE(local_id_y$1, 0bv32);
  requires BV32_SGE(local_id_y$2, 0bv32);
  requires BV32_SLT(local_id_y$1, group_size_y);
  requires BV32_SLT(local_id_y$2, group_size_y);
  requires BV32_SGT(group_size_z, 0bv32);
  requires BV32_SGT(num_groups_z, 0bv32);
  requires BV32_SGE(group_id_z$1, 0bv32);
  requires BV32_SGE(group_id_z$2, 0bv32);
  requires BV32_SLT(group_id_z$1, num_groups_z);
  requires BV32_SLT(group_id_z$2, num_groups_z);
  requires BV32_SGE(local_id_z$1, 0bv32);
  requires BV32_SGE(local_id_z$2, 0bv32);
  requires BV32_SLT(local_id_z$1, group_size_z);
  requires BV32_SLT(local_id_z$2, group_size_z);
  requires group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> local_id_x$1 != local_id_x$2
       || local_id_y$1 != local_id_y$2
       || local_id_z$1 != local_id_z$2;
  modifies b42, b41, b40, b39, b38, b37, b36, b35, b34, b33, b32, b31, b30, b29, b28, b27, b26, b25, b24, b23, b22, b21, b20, b19, b18, b17, b16, b15, b14, b13, b12, b11, b10, b9, b8, b7, b6, b5, b4, b3, b2, b1, $$arg., $$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data, _TRACKING, _WRITE_HAS_OCCURRED_$$arg., _WRITE_READ_BENIGN_FLAG_$$arg., _READ_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data, _WRITE_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data, _WRITE_READ_BENIGN_FLAG_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;



implementation {:source_name "convolutionRowsKernel"} {:kernel} $_Z21convolutionRowsKernelPfS_iii($imageW: bv32, $imageH: bv32, $pitch: bv32)
{
  var $.05: bv32;
  var $.04: bv32;
  var $0$1: bv32;
  var $0$2: bv32;
  var $.03: bv32;
  var $1$1: bv32;
  var $1$2: bv32;
  var $.02: bv32;
  var $.01$1: bv32;
  var $.01$2: bv32;
  var $.0: bv32;
  var v0$1: bv32;
  var v0$2: bv32;
  var v1$1: bv32;
  var v1$2: bv32;
  var v2$1: bv32;
  var v2$2: bv32;
  var v3$1: bv32;
  var v3$2: bv32;
  var v4: bool;
  var v5$1: bv32;
  var v5$2: bv32;
  var v6: bool;
  var v7$1: bool;
  var v7$2: bool;
  var v8$1: bv32;
  var v8$2: bv32;
  var v9: bool;
  var v10$1: bool;
  var v10$2: bool;
  var v11$1: bv32;
  var v11$2: bv32;
  var v12: bool;
  var v13: bool;
  var v14$1: bv32;
  var v14$2: bv32;
  var v15$1: bv32;
  var v15$2: bv32;
  var p0$1: bool;
  var p0$2: bool;
  var p1$1: bool;
  var p1$2: bool;
  var p2$1: bool;
  var p2$2: bool;
  var p3$1: bool;
  var p3$2: bool;
  var p4$1: bool;
  var p4$2: bool;
  var p5$1: bool;
  var p5$2: bool;
  var p6$1: bool;
  var p6$2: bool;
  var p7$1: bool;
  var p7$2: bool;
  var p8$1: bool;
  var p8$2: bool;
  var p9$1: bool;
  var p9$2: bool;
  var p10$1: bool;
  var p10$2: bool;
  var p11$1: bool;
  var p11$2: bool;
  var p12$1: bool;
  var p12$2: bool;
  var p13$1: bool;
  var p13$2: bool;
  var p14$1: bool;
  var p14$2: bool;
  var p15$1: bool;
  var p15$2: bool;
  var p16$1: bool;
  var p16$2: bool;
  var p17$1: bool;
  var p17$2: bool;
  var p18$1: bool;
  var p18$2: bool;
  var p19$1: bool;
  var p19$2: bool;
  var p20$1: bool;
  var p20$2: bool;
  var p21$1: bool;
  var p21$2: bool;
  var p22$1: bool;
  var p22$2: bool;
  var p23$1: bool;
  var p23$2: bool;
  var p24$1: bool;
  var p24$2: bool;
  var p25$1: bool;
  var p25$2: bool;
  var p26$1: bool;
  var p26$2: bool;
  var p27$1: bool;
  var p27$2: bool;
  var p28$1: bool;
  var p28$2: bool;
  var p29$1: bool;
  var p29$2: bool;
  var p30$1: bool;
  var p30$2: bool;
  var p31$1: bool;
  var p31$2: bool;
  var p32$1: bool;
  var p32$2: bool;
  var p33$1: bool;
  var p33$2: bool;
  var p34$1: bool;
  var p34$2: bool;
  var p35$1: bool;
  var p35$2: bool;
  var p36$1: bool;
  var p36$2: bool;
  var p37$1: bool;
  var p37$2: bool;
  var p38$1: bool;
  var p38$2: bool;
  var p39$1: bool;
  var p39$2: bool;
  var p40$1: bool;
  var p40$2: bool;
  var p41$1: bool;
  var p41$2: bool;
  var p42$1: bool;
  var p42$2: bool;
  var p43$1: bool;
  var p43$2: bool;
  var p44$1: bool;
  var p44$2: bool;
  var p45$1: bool;
  var p45$2: bool;
  var p46$1: bool;
  var p46$2: bool;
  var p47$1: bool;
  var p47$2: bool;
  var p48$1: bool;
  var p48$2: bool;
  var p49$1: bool;
  var p49$2: bool;
  var p50$1: bool;
  var p50$2: bool;
  var p51$1: bool;
  var p51$2: bool;
  var p52$1: bool;
  var p52$2: bool;
  var p53$1: bool;
  var p53$2: bool;
  var p54$1: bool;
  var p54$2: bool;
  var p55$1: bool;
  var p55$2: bool;
  var p56$1: bool;
  var p56$2: bool;
  var p57$1: bool;
  var p57$2: bool;
  var p58$1: bool;
  var p58$2: bool;
  var p59$1: bool;
  var p59$2: bool;
  var p60$1: bool;
  var p60$2: bool;
  var p61$1: bool;
  var p61$2: bool;
  var p62$1: bool;
  var p62$2: bool;
  var p63$1: bool;
  var p63$2: bool;
  var p64$1: bool;
  var p64$2: bool;
  var p65$1: bool;
  var p65$2: bool;
  var p66$1: bool;
  var p66$2: bool;
  var p67$1: bool;
  var p67$2: bool;
  var p68$1: bool;
  var p68$2: bool;
  var p69$1: bool;
  var p69$2: bool;
  var p70$1: bool;
  var p70$2: bool;
  var p71$1: bool;
  var p71$2: bool;
  var p72$1: bool;
  var p72$2: bool;
  var p73$1: bool;
  var p73$2: bool;
  var p74$1: bool;
  var p74$2: bool;
  var p75$1: bool;
  var p75$2: bool;
  var p76$1: bool;
  var p76$2: bool;
  var p77$1: bool;
  var p77$2: bool;
  var p78$1: bool;
  var p78$2: bool;
  var p79$1: bool;
  var p79$2: bool;
  var p80$1: bool;
  var p80$2: bool;
  var p81$1: bool;
  var p81$2: bool;
  var p82$1: bool;
  var p82$2: bool;
  var p83$1: bool;
  var p83$2: bool;
  var p84$1: bool;
  var p84$2: bool;
  var p85$1: bool;
  var p85$2: bool;
  var p86$1: bool;
  var p86$2: bool;
  var p87$1: bool;
  var p87$2: bool;
  var _HAVOC_bv32$1: bv32;
  var _HAVOC_bv32$2: bv32;


  __partitioned_block_$0_0:
    b42 := false;
    b41 := false;
    b40 := false;
    b39 := false;
    b38 := false;
    b37 := true;
    b36 := false;
    b35 := false;
    b34 := false;
    b33 := false;
    b32 := false;
    b31 := false;
    b30 := false;
    b29 := false;
    b28 := false;
    b27 := false;
    b26 := false;
    b25 := false;
    b24 := false;
    b23 := false;
    b22 := false;
    b21 := false;
    b20 := false;
    b19 := false;
    b18 := false;
    b17 := false;
    b16 := false;
    b15 := false;
    b14 := false;
    b13 := false;
    b12 := false;
    b11 := false;
    b10 := false;
    b9 := false;
    b8 := false;
    b7 := false;
    b6 := false;
    b5 := false;
    b4 := false;
    b3 := false;
    b2 := false;
    b1 := false;
    p0$1 := false;
    p0$2 := false;
    p1$1 := false;
    p1$2 := false;
    p2$1 := false;
    p2$2 := false;
    p3$1 := false;
    p3$2 := false;
    p0$1 := (if b21 then b21 else p0$1);
    p0$2 := (if b21 then b21 else p0$2);
    call {:repair_barrier "b21"} {:repair_instrumented} {:sourceloc_num 1} $bugle_barrier_duplicated_41(1bv1, 1bv1, p0$1, p0$2);
    p2$1 := (if b22 then b22 else p2$1);
    p2$2 := (if b22 then b22 else p2$2);
    call {:repair_barrier "b22"} {:repair_instrumented} {:sourceloc_num 1} $bugle_grid_barrier_duplicated_40(p2$1, p2$2);
    v0$1 := BV32_ADD(BV32_MUL(BV32_SUB(BV32_MUL(group_id_x$1, 8bv32), 1bv32), 16bv32), local_id_x$1);
    v0$2 := BV32_ADD(BV32_MUL(BV32_SUB(BV32_MUL(group_id_x$2, 8bv32), 1bv32), 16bv32), local_id_x$2);
    v1$1 := BV32_ADD(BV32_MUL(group_id_y$1, 4bv32), local_id_y$1);
    v1$2 := BV32_ADD(BV32_MUL(group_id_y$2, 4bv32), local_id_y$2);
    v2$1 := BV32_ADD(BV32_MUL(v1$1, $pitch), v0$1);
    v2$2 := BV32_ADD(BV32_MUL(v1$2, $pitch), v0$2);
    v3$1 := BV32_ADD(BV32_MUL(v1$1, $pitch), v0$1);
    v3$2 := BV32_ADD(BV32_MUL(v1$2, $pitch), v0$2);
    $.05 := 1bv32;
    assume {:captureState "loop_entry_state_4_0"} true;
    goto __partitioned_block_$1_0;

  __partitioned_block_$1_0:
    assume {:captureState "loop_head_state_4"} true;
    assume {:tag "accessBreak"} true
       ==> 
      _WRITE_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data
       ==> local_id_y$1 == BV32_DIV(_WATCHED_OFFSET, 160bv32);
    assume {:tag "accessedOffsetsSatisfyPredicates"} true
       ==> 
      _WRITE_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data
       ==> BV32_AND(BV32_SUB(BV32_MUL(1bv32, 16bv32), 1bv32), _WATCHED_OFFSET)
         == BV32_AND(BV32_SUB(BV32_MUL(1bv32, 16bv32), 1bv32), 
          BV32_ADD(BV32_ADD(BV32_MUL(0bv32, 16bv32), local_id_x$1), BV32_MUL(local_id_y$1, 160bv32)));
    assert {:tag "groupSharedArraysDisjointAcrossGroups"} _ATOMIC_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data
       ==> group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2;
    assert {:tag "groupSharedArraysDisjointAcrossGroups"} _WRITE_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data
       ==> group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2;
    assert {:tag "groupSharedArraysDisjointAcrossGroups"} _READ_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data
       ==> group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2;
    assume {:tag "loopBound"} {:thread 1} true ==> BV32_UGE($.05, 1bv32);
    assume {:tag "loopBound"} {:thread 1} true ==> BV32_SGE($.05, 1bv32);
    assume {:tag "guardNonNeg"} {:thread 1} true ==> BV32_SLE(0bv32, $.05);
    p4$1 := false;
    p4$2 := false;
    p5$1 := false;
    p5$2 := false;
    p6$1 := false;
    p6$2 := false;
    p7$1 := false;
    p7$2 := false;
    p8$1 := false;
    p8$2 := false;
    p9$1 := false;
    p9$2 := false;
    p10$1 := false;
    p10$2 := false;
    p11$1 := false;
    p11$2 := false;
    p12$1 := false;
    p12$2 := false;
    p13$1 := false;
    p13$2 := false;
    p14$1 := false;
    p14$2 := false;
    p15$1 := false;
    p15$2 := false;
    p16$1 := false;
    p16$2 := false;
    p17$1 := false;
    p17$2 := false;
    p18$1 := false;
    p18$2 := false;
    p19$1 := false;
    p19$2 := false;
    p5$1 := (if b19 then b19 else p5$1);
    p5$2 := (if b19 then b19 else p5$2);
    call {:repair_barrier "b19"} {:repair_instrumented} {:sourceloc_num 2} $bugle_barrier_duplicated_39(1bv1, 1bv1, p5$1, p5$2);
    p7$1 := (if b20 then b20 else p7$1);
    p7$2 := (if b20 then b20 else p7$2);
    call {:repair_barrier "b20"} {:repair_instrumented} {:sourceloc_num 2} $bugle_grid_barrier_duplicated_38(p7$1, p7$2);
    v4 := BV32_SLT($.05, 9bv32);
    goto __partitioned_block_$truebb_0, __partitioned_block_$falsebb_0;

  __partitioned_block_$falsebb_0:
    assume {:partition} !v4;
    p16$1 := (if b25 then b25 else p16$1);
    p16$2 := (if b25 then b25 else p16$2);
    call {:repair_barrier "b25"} {:repair_instrumented} {:sourceloc_num 7} $bugle_barrier_duplicated_33(1bv1, 1bv1, p16$1, p16$2);
    p18$1 := (if b26 then b26 else p18$1);
    p18$2 := (if b26 then b26 else p18$2);
    call {:repair_barrier "b26"} {:repair_instrumented} {:sourceloc_num 7} $bugle_grid_barrier_duplicated_32(p18$1, p18$2);
    $.04 := 0bv32;
    assume {:captureState "loop_entry_state_3_0"} true;
    goto __partitioned_block_$5_0;

  __partitioned_block_$5_0:
    assume {:captureState "loop_head_state_3"} true;
    assume {:tag "accessBreak"} true
       ==> 
      _WRITE_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data
       ==> local_id_y$1 == BV32_DIV(_WATCHED_OFFSET, 160bv32);
    assume {:tag "accessedOffsetsSatisfyPredicates"} true
       ==> 
      _WRITE_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data
       ==> BV32_AND(BV32_SUB(BV32_MUL(1bv32, 16bv32), 1bv32), _WATCHED_OFFSET)
         == BV32_AND(BV32_SUB(BV32_MUL(1bv32, 16bv32), 1bv32), 
          BV32_ADD(BV32_ADD(BV32_MUL(0bv32, 16bv32), local_id_x$1), BV32_MUL(local_id_y$1, 160bv32)));
    assert {:tag "groupSharedArraysDisjointAcrossGroups"} _ATOMIC_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data
       ==> group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2;
    assert {:tag "groupSharedArraysDisjointAcrossGroups"} _WRITE_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data
       ==> group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2;
    assert {:tag "groupSharedArraysDisjointAcrossGroups"} _READ_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data
       ==> group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2;
    assume {:tag "loopBound"} {:thread 1} true ==> BV32_UGE($.04, 0bv32);
    assume {:tag "loopBound"} {:thread 1} true ==> BV32_SGE($.04, 0bv32);
    assume {:tag "guardNonNeg"} {:thread 1} true ==> BV32_SLE(0bv32, $.04);
    p20$1 := false;
    p20$2 := false;
    p21$1 := false;
    p21$2 := false;
    p22$1 := false;
    p22$2 := false;
    p23$1 := false;
    p23$2 := false;
    p24$1 := false;
    p24$2 := false;
    p25$1 := false;
    p25$2 := false;
    p26$1 := false;
    p26$2 := false;
    p27$1 := false;
    p27$2 := false;
    p28$1 := false;
    p28$2 := false;
    p29$1 := false;
    p29$2 := false;
    p30$1 := false;
    p30$2 := false;
    p31$1 := false;
    p31$2 := false;
    p32$1 := false;
    p32$2 := false;
    p33$1 := false;
    p33$2 := false;
    p34$1 := false;
    p34$2 := false;
    p35$1 := false;
    p35$2 := false;
    p36$1 := false;
    p36$2 := false;
    p37$1 := false;
    p37$2 := false;
    p38$1 := false;
    p38$2 := false;
    p39$1 := false;
    p39$2 := false;
    p40$1 := false;
    p40$2 := false;
    p41$1 := false;
    p41$2 := false;
    p21$1 := (if b23 then b23 else p21$1);
    p21$2 := (if b23 then b23 else p21$2);
    call {:repair_barrier "b23"} {:repair_instrumented} {:sourceloc_num 8} $bugle_barrier_duplicated_31(1bv1, 1bv1, p21$1, p21$2);
    p23$1 := (if b24 then b24 else p23$1);
    p23$2 := (if b24 then b24 else p23$2);
    call {:repair_barrier "b24"} {:repair_instrumented} {:sourceloc_num 8} $bugle_grid_barrier_duplicated_30(p23$1, p23$2);
    v6 := BV32_SLT($.04, 1bv32);
    goto __partitioned_block_$truebb0_0, __partitioned_block_$falsebb0_0;

  __partitioned_block_$falsebb0_0:
    assume {:partition} !v6;
    p38$1 := (if b31 then b31 else p38$1);
    p38$2 := (if b31 then b31 else p38$2);
    call {:repair_barrier "b31"} {:repair_instrumented} {:sourceloc_num 16} $bugle_barrier_duplicated_23(1bv1, 1bv1, p38$1, p38$2);
    p40$1 := (if b32 then b32 else p40$1);
    p40$2 := (if b32 then b32 else p40$2);
    call {:repair_barrier "b32"} {:repair_instrumented} {:sourceloc_num 16} $bugle_grid_barrier_duplicated_22(p40$1, p40$2);
    $.03 := 9bv32;
    assume {:captureState "loop_entry_state_2_0"} true;
    goto __partitioned_block_$12_0;

  __partitioned_block_$12_0:
    assume {:captureState "loop_head_state_2"} true;
    assume {:tag "accessBreak"} true
       ==> 
      _WRITE_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data
       ==> local_id_y$1 == BV32_DIV(_WATCHED_OFFSET, 160bv32);
    assume {:tag "accessedOffsetsSatisfyPredicates"} true
       ==> 
      _WRITE_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data
       ==> BV32_AND(BV32_SUB(BV32_MUL(1bv32, 16bv32), 1bv32), _WATCHED_OFFSET)
         == BV32_AND(BV32_SUB(BV32_MUL(1bv32, 16bv32), 1bv32), 
          BV32_ADD(BV32_ADD(BV32_MUL(0bv32, 16bv32), local_id_x$1), BV32_MUL(local_id_y$1, 160bv32)));
    assert {:tag "groupSharedArraysDisjointAcrossGroups"} _ATOMIC_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data
       ==> group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2;
    assert {:tag "groupSharedArraysDisjointAcrossGroups"} _WRITE_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data
       ==> group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2;
    assert {:tag "groupSharedArraysDisjointAcrossGroups"} _READ_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data
       ==> group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2;
    assume {:tag "loopBound"} {:thread 1} true ==> BV32_UGE($.03, 9bv32);
    assume {:tag "loopBound"} {:thread 1} true ==> BV32_SGE($.03, 9bv32);
    assume {:tag "guardNonNeg"} {:thread 1} true ==> BV32_SLE(0bv32, $.03);
    p42$1 := false;
    p42$2 := false;
    p43$1 := false;
    p43$2 := false;
    p44$1 := false;
    p44$2 := false;
    p45$1 := false;
    p45$2 := false;
    p46$1 := false;
    p46$2 := false;
    p47$1 := false;
    p47$2 := false;
    p48$1 := false;
    p48$2 := false;
    p49$1 := false;
    p49$2 := false;
    p50$1 := false;
    p50$2 := false;
    p51$1 := false;
    p51$2 := false;
    p52$1 := false;
    p52$2 := false;
    p53$1 := false;
    p53$2 := false;
    p54$1 := false;
    p54$2 := false;
    p55$1 := false;
    p55$2 := false;
    p56$1 := false;
    p56$2 := false;
    p57$1 := false;
    p57$2 := false;
    p58$1 := false;
    p58$2 := false;
    p59$1 := false;
    p59$2 := false;
    p60$1 := false;
    p60$2 := false;
    p61$1 := false;
    p61$2 := false;
    p62$1 := false;
    p62$2 := false;
    p63$1 := false;
    p63$2 := false;
    p43$1 := (if b29 then b29 else p43$1);
    p43$2 := (if b29 then b29 else p43$2);
    call {:repair_barrier "b29"} {:repair_instrumented} {:sourceloc_num 17} $bugle_barrier_duplicated_21(1bv1, 1bv1, p43$1, p43$2);
    p45$1 := (if b30 then b30 else p45$1);
    p45$2 := (if b30 then b30 else p45$2);
    call {:repair_barrier "b30"} {:repair_instrumented} {:sourceloc_num 17} $bugle_grid_barrier_duplicated_20(p45$1, p45$2);
    v9 := BV32_SLT($.03, 10bv32);
    goto __partitioned_block_$truebb2_0, __partitioned_block_$falsebb2_0;

  __partitioned_block_$falsebb2_0:
    assume {:partition} !v9;
    p60$1 := (if b37 then b37 else p60$1);
    p60$2 := (if b37 then b37 else p60$2);
    call {:repair_barrier "b37"} {:repair_instrumented} {:sourceloc_num 25} $bugle_barrier_duplicated_13(1bv1, 1bv1, p60$1, p60$2);
    p62$1 := (if b38 then b38 else p62$1);
    p62$2 := (if b38 then b38 else p62$2);
    call {:repair_barrier "b38"} {:repair_instrumented} {:sourceloc_num 25} $bugle_grid_barrier_duplicated_12(p62$1, p62$2);
    $.02 := 1bv32;
    assume {:captureState "loop_entry_state_0_0"} true;
    goto __partitioned_block_$19_0;

  __partitioned_block_$19_0:
    assume {:captureState "loop_head_state_0"} true;
    assume {:tag "accessBreak"} true
       ==> 
      _READ_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data
       ==> local_id_y$1 == BV32_DIV(_WATCHED_OFFSET, 160bv32);
    assert {:tag "groupSharedArraysDisjointAcrossGroups"} _ATOMIC_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data
       ==> group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2;
    assert {:tag "groupSharedArraysDisjointAcrossGroups"} _WRITE_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data
       ==> group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2;
    assert {:tag "groupSharedArraysDisjointAcrossGroups"} _READ_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data
       ==> group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2;
    assume {:tag "loopBound"} {:thread 1} true ==> BV32_UGE($.02, 1bv32);
    assume {:tag "loopBound"} {:thread 1} true ==> BV32_SGE($.02, 1bv32);
    assume {:tag "guardNonNeg"} {:thread 1} true ==> BV32_SLE(0bv32, $.02);
    assert {:originated_from_invariant} {:sourceloc_num 27} {:thread 1} (if _WRITE_HAS_OCCURRED_$$arg.
           ==> BV32_UREM(BV32_SUB(BV32_UDIV(BV32_MUL(4bv32, _WATCHED_OFFSET), 4bv32), 
                BV32_ADD(BV32_MUL(v1$1, $pitch), v0$1)), 
              16bv32)
             == 0bv32
         then 1bv1
         else 0bv1)
       != 0bv1;
    assert {:originated_from_invariant} {:sourceloc_num 28} {:thread 1} (if _WRITE_HAS_OCCURRED_$$arg.
           ==> BV32_UGE(BV32_UDIV(BV32_SUB(BV32_UDIV(BV32_MUL(4bv32, _WATCHED_OFFSET), 4bv32), 
                BV32_ADD(BV32_MUL(v1$1, $pitch), v0$1)), 
              16bv32), 
            1bv32)
         then 1bv1
         else 0bv1)
       != 0bv1;
    assert {:originated_from_invariant} {:sourceloc_num 29} {:thread 1} (if _WRITE_HAS_OCCURRED_$$arg.
           ==> BV32_ULT(BV32_UDIV(BV32_SUB(BV32_UDIV(BV32_MUL(4bv32, _WATCHED_OFFSET), 4bv32), 
                BV32_ADD(BV32_MUL(v1$1, $pitch), v0$1)), 
              16bv32), 
            9bv32)
         then 1bv1
         else 0bv1)
       != 0bv1;
    p64$1 := false;
    p64$2 := false;
    p65$1 := false;
    p65$2 := false;
    p66$1 := false;
    p66$2 := false;
    p67$1 := false;
    p67$2 := false;
    p68$1 := false;
    p68$2 := false;
    p69$1 := false;
    p69$2 := false;
    p70$1 := false;
    p70$2 := false;
    p71$1 := false;
    p71$2 := false;
    p65$1 := (if b35 then b35 else p65$1);
    p65$2 := (if b35 then b35 else p65$2);
    call {:repair_barrier "b35"} {:repair_instrumented} {:sourceloc_num 26} $bugle_barrier_duplicated_11(1bv1, 1bv1, p65$1, p65$2);
    p67$1 := (if b36 then b36 else p67$1);
    p67$2 := (if b36 then b36 else p67$2);
    call {:repair_barrier "b36"} {:repair_instrumented} {:sourceloc_num 26} $bugle_grid_barrier_duplicated_10(p67$1, p67$2);
    v12 := BV32_SLT($.02, 9bv32);
    goto __partitioned_block_$truebb4_0, $falsebb4;

  $falsebb4:
    assume {:partition} !v12;
    return;

  __partitioned_block_$truebb4_0:
    assume {:partition} v12;
    p69$1 := (if b41 then b41 else p69$1);
    p69$2 := (if b41 then b41 else p69$2);
    call {:repair_barrier "b41"} {:repair_instrumented} {:sourceloc_num 30} $bugle_barrier_duplicated_9(1bv1, 1bv1, p69$1, p69$2);
    p71$1 := (if b42 then b42 else p71$1);
    p71$2 := (if b42 then b42 else p71$2);
    call {:repair_barrier "b42"} {:repair_instrumented} {:sourceloc_num 30} $bugle_grid_barrier_duplicated_8(p71$1, p71$2);
    $.01$1, $.0 := 0bv32, 4294967288bv32;
    $.01$2 := 0bv32;
    assume {:captureState "loop_entry_state_1_0"} true;
    goto __partitioned_block_$21_0;

  __partitioned_block_$21_0:
    assume {:captureState "loop_head_state_1"} true;
    assume {:tag "accessBreak"} true
       ==> 
      _READ_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data
       ==> local_id_y$1 == BV32_DIV(_WATCHED_OFFSET, 160bv32);
    assert {:tag "groupSharedArraysDisjointAcrossGroups"} _ATOMIC_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data
       ==> group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2;
    assert {:tag "groupSharedArraysDisjointAcrossGroups"} _WRITE_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data
       ==> group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2;
    assert {:tag "groupSharedArraysDisjointAcrossGroups"} _READ_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data
       ==> group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2;
    assume {:tag "loopBound"} {:thread 1} true ==> BV32_SGE($.0, 4294967288bv32);
    p72$1 := false;
    p72$2 := false;
    p73$1 := false;
    p73$2 := false;
    p74$1 := false;
    p74$2 := false;
    p75$1 := false;
    p75$2 := false;
    p76$1 := false;
    p76$2 := false;
    p77$1 := false;
    p77$2 := false;
    p78$1 := false;
    p78$2 := false;
    p79$1 := false;
    p79$2 := false;
    p80$1 := false;
    p80$2 := false;
    p81$1 := false;
    p81$2 := false;
    p82$1 := false;
    p82$2 := false;
    p83$1 := false;
    p83$2 := false;
    p84$1 := false;
    p84$2 := false;
    p85$1 := false;
    p85$2 := false;
    p86$1 := false;
    p86$2 := false;
    p87$1 := false;
    p87$2 := false;
    p73$1 := (if b39 then b39 else p73$1);
    p73$2 := (if b39 then b39 else p73$2);
    call {:repair_barrier "b39"} {:repair_instrumented} {:sourceloc_num 31} $bugle_barrier_duplicated_7(1bv1, 1bv1, p73$1, p73$2);
    p75$1 := (if b40 then b40 else p75$1);
    p75$2 := (if b40 then b40 else p75$2);
    call {:repair_barrier "b40"} {:repair_instrumented} {:sourceloc_num 31} $bugle_grid_barrier_duplicated_6(p75$1, p75$2);
    v13 := BV32_SLE($.0, 8bv32);
    goto __partitioned_block_$truebb5_0, __partitioned_block_$falsebb5_0;

  __partitioned_block_$falsebb5_0:
    assume {:partition} !v13;
    p85$1 := (if b13 then b13 else p85$1);
    p85$2 := (if b13 then b13 else p85$2);
    call {:repair_barrier "b13"} {:repair_instrumented} {:sourceloc_num 37} $bugle_barrier_duplicated_1(1bv1, 1bv1, p85$1, p85$2);
    p87$1 := (if b14 then b14 else p87$1);
    p87$2 := (if b14 then b14 else p87$2);
    call {:repair_barrier "b14"} {:repair_instrumented} {:sourceloc_num 37} $bugle_grid_barrier_duplicated_0(p87$1, p87$2);
    call {:sourceloc} {:sourceloc_num 37} {:repair_instrumented} _LOG_WRITE_$$arg.(true, BV32_ADD(v3$1, BV32_MUL($.02, 16bv32)), $.01$1, $$arg.[BV32_ADD(v3$1, BV32_MUL($.02, 16bv32))]);
    call _UPDATE_WRITE_READ_BENIGN_FLAG_$$arg.(true, BV32_ADD(v3$2, BV32_MUL($.02, 16bv32)));
    assume {:do_not_predicate} {:check_id "check_state_0"} {:captureState "check_state_0"} {:sourceloc} {:sourceloc_num 37} {:repair_instrumented} true;
    call {:check_id "check_state_0"} {:sourceloc} {:sourceloc_num 37} {:repair_instrumented} _CHECK_WRITE_$$arg.(true, BV32_ADD(v3$2, BV32_MUL($.02, 16bv32)), $.01$2);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_WRITE_$$arg."} true;
    $$arg.[BV32_ADD(v3$1, BV32_MUL($.02, 16bv32))] := $.01$1;
    $$arg.[BV32_ADD(v3$2, BV32_MUL($.02, 16bv32))] := $.01$2;
    $.02 := BV32_ADD($.02, 1bv32);
    assume {:captureState "loop_back_edge_state_0_0"} true;
    goto __partitioned_block_$19_0;

  __partitioned_block_$truebb5_0:
    assume {:partition} v13;
    p77$1 := (if b11 then b11 else p77$1);
    p77$2 := (if b11 then b11 else p77$2);
    call {:repair_barrier "b11"} {:repair_instrumented} {:sourceloc_num 33} $bugle_barrier_duplicated_5(1bv1, 1bv1, p77$1, p77$2);
    p79$1 := (if b12 then b12 else p79$1);
    p79$2 := (if b12 then b12 else p79$2);
    call {:repair_barrier "b12"} {:repair_instrumented} {:sourceloc_num 33} $bugle_grid_barrier_duplicated_4(p79$1, p79$2);
    v14$1 := $$c_Kernel$1[BV32_SUB(8bv32, $.0)];
    v14$2 := $$c_Kernel$2[BV32_SUB(8bv32, $.0)];
    p81$1 := (if b17 then b17 else p81$1);
    p81$2 := (if b17 then b17 else p81$2);
    call {:repair_barrier "b17"} {:repair_instrumented} {:sourceloc_num 34} $bugle_barrier_duplicated_3(1bv1, 1bv1, p81$1, p81$2);
    p83$1 := (if b18 then b18 else p83$1);
    p83$2 := (if b18 then b18 else p83$2);
    call {:repair_barrier "b18"} {:repair_instrumented} {:sourceloc_num 34} $bugle_grid_barrier_duplicated_2(p83$1, p83$2);
    call {:sourceloc} {:sourceloc_num 34} {:repair_instrumented} _LOG_READ_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data(true, BV32_ADD(BV32_MUL(local_id_y$1, 160bv32), 
      BV32_ADD(BV32_ADD(local_id_x$1, BV32_MUL($.02, 16bv32)), $.0)), $$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data[1bv1][BV32_ADD(BV32_MUL(local_id_y$1, 160bv32), 
      BV32_ADD(BV32_ADD(local_id_x$1, BV32_MUL($.02, 16bv32)), $.0))]);
    assume {:do_not_predicate} {:check_id "check_state_1"} {:captureState "check_state_1"} {:sourceloc} {:sourceloc_num 34} {:repair_instrumented} true;
    call {:check_id "check_state_1"} {:sourceloc} {:sourceloc_num 34} {:repair_instrumented} _CHECK_READ_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data(true, BV32_ADD(BV32_MUL(local_id_y$2, 160bv32), 
      BV32_ADD(BV32_ADD(local_id_x$2, BV32_MUL($.02, 16bv32)), $.0)), $$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data[(if group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       then 1bv1
       else 0bv1)][BV32_ADD(BV32_MUL(local_id_y$2, 160bv32), 
      BV32_ADD(BV32_ADD(local_id_x$2, BV32_MUL($.02, 16bv32)), $.0))]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data"} true;
    v15$1 := $$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data[1bv1][BV32_ADD(BV32_MUL(local_id_y$1, 160bv32), 
      BV32_ADD(BV32_ADD(local_id_x$1, BV32_MUL($.02, 16bv32)), $.0))];
    v15$2 := $$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data[(if group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       then 1bv1
       else 0bv1)][BV32_ADD(BV32_MUL(local_id_y$2, 160bv32), 
      BV32_ADD(BV32_ADD(local_id_x$2, BV32_MUL($.02, 16bv32)), $.0))];
    $.01$1, $.0 := FADD32($.01$1, FMUL32(v14$1, v15$1)), BV32_ADD($.0, 1bv32);
    $.01$2 := FADD32($.01$2, FMUL32(v14$2, v15$2));
    assume {:captureState "loop_back_edge_state_1_0"} true;
    goto __partitioned_block_$21_0;

  __partitioned_block_$truebb2_0:
    assume {:partition} v9;
    v10$1 := BV32_SGT(BV32_SUB($imageW, v0$1), BV32_MUL($.03, 16bv32));
    v10$2 := BV32_SGT(BV32_SUB($imageW, v0$2), BV32_MUL($.03, 16bv32));
    p47$1 := (if v10$1 then v10$1 else p47$1);
    p47$2 := (if v10$2 then v10$2 else p47$2);
    p46$1 := (if !v10$1 then !v10$1 else p46$1);
    p46$2 := (if !v10$2 then !v10$2 else p46$2);
    $1$1 := (if p46$1 then 0bv32 else $1$1);
    $1$2 := (if p46$2 then 0bv32 else $1$2);
    p49$1 := (if p47$1 && b7 then b7 else p49$1);
    p49$2 := (if p47$2 && b7 then b7 else p49$2);
    call {:repair_barrier "b7"} {:repair_instrumented} {:sourceloc_num 20} $bugle_barrier_duplicated_19(1bv1, 1bv1, p49$1, p49$2);
    p51$1 := (if p47$1 && b8 then b8 else p51$1);
    p51$2 := (if p47$2 && b8 then b8 else p51$2);
    call {:repair_barrier "b8"} {:repair_instrumented} {:sourceloc_num 20} $bugle_grid_barrier_duplicated_18(p51$1, p51$2);
    havoc _HAVOC_bv32$1, _HAVOC_bv32$2;
    v11$1 := (if p47$1 then _HAVOC_bv32$1 else v11$1);
    v11$2 := (if p47$2 then _HAVOC_bv32$2 else v11$2);
    $1$1 := (if p47$1 then v11$1 else $1$1);
    $1$2 := (if p47$2 then v11$2 else $1$2);
    p53$1 := (if b33 then b33 else p53$1);
    p53$2 := (if b33 then b33 else p53$2);
    call {:repair_barrier "b33"} {:repair_instrumented} {:sourceloc_num 22} $bugle_barrier_duplicated_17(1bv1, 1bv1, p53$1, p53$2);
    p55$1 := (if b34 then b34 else p55$1);
    p55$2 := (if b34 then b34 else p55$2);
    call {:repair_barrier "b34"} {:repair_instrumented} {:sourceloc_num 22} $bugle_grid_barrier_duplicated_16(p55$1, p55$2);
    p57$1 := (if b9 then b9 else p57$1);
    p57$2 := (if b9 then b9 else p57$2);
    call {:repair_barrier "b9"} {:repair_instrumented} {:sourceloc_num 23} $bugle_barrier_duplicated_15(1bv1, 1bv1, p57$1, p57$2);
    p59$1 := (if b10 then b10 else p59$1);
    p59$2 := (if b10 then b10 else p59$2);
    call {:repair_barrier "b10"} {:repair_instrumented} {:sourceloc_num 23} $bugle_grid_barrier_duplicated_14(p59$1, p59$2);
    call {:sourceloc} {:sourceloc_num 23} {:repair_instrumented} _LOG_WRITE_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data(true, BV32_ADD(BV32_MUL(local_id_y$1, 160bv32), BV32_ADD(local_id_x$1, BV32_MUL($.03, 16bv32))), $1$1, $$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data[1bv1][BV32_ADD(BV32_MUL(local_id_y$1, 160bv32), BV32_ADD(local_id_x$1, BV32_MUL($.03, 16bv32)))]);
    call _UPDATE_WRITE_READ_BENIGN_FLAG_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data(true, BV32_ADD(BV32_MUL(local_id_y$2, 160bv32), BV32_ADD(local_id_x$2, BV32_MUL($.03, 16bv32))));
    assume {:do_not_predicate} {:check_id "check_state_2"} {:captureState "check_state_2"} {:sourceloc} {:sourceloc_num 23} {:repair_instrumented} true;
    call {:check_id "check_state_2"} {:sourceloc} {:sourceloc_num 23} {:repair_instrumented} _CHECK_WRITE_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data(true, BV32_ADD(BV32_MUL(local_id_y$2, 160bv32), BV32_ADD(local_id_x$2, BV32_MUL($.03, 16bv32))), $1$2);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_WRITE_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data"} true;
    $$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data[1bv1][BV32_ADD(BV32_MUL(local_id_y$1, 160bv32), BV32_ADD(local_id_x$1, BV32_MUL($.03, 16bv32)))] := $1$1;
    $$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data[(if group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       then 1bv1
       else 0bv1)][BV32_ADD(BV32_MUL(local_id_y$2, 160bv32), BV32_ADD(local_id_x$2, BV32_MUL($.03, 16bv32)))] := $1$2;
    $.03 := BV32_ADD($.03, 1bv32);
    assume {:captureState "loop_back_edge_state_2_0"} true;
    goto __partitioned_block_$12_0;

  __partitioned_block_$truebb0_0:
    assume {:partition} v6;
    v7$1 := BV32_SGE(v0$1, BV32_MUL(BV32_SUB(0bv32, $.04), 16bv32));
    v7$2 := BV32_SGE(v0$2, BV32_MUL(BV32_SUB(0bv32, $.04), 16bv32));
    p25$1 := (if v7$1 then v7$1 else p25$1);
    p25$2 := (if v7$2 then v7$2 else p25$2);
    p24$1 := (if !v7$1 then !v7$1 else p24$1);
    p24$2 := (if !v7$2 then !v7$2 else p24$2);
    $0$1 := (if p24$1 then 0bv32 else $0$1);
    $0$2 := (if p24$2 then 0bv32 else $0$2);
    p27$1 := (if p25$1 && b3 then b3 else p27$1);
    p27$2 := (if p25$2 && b3 then b3 else p27$2);
    call {:repair_barrier "b3"} {:repair_instrumented} {:sourceloc_num 11} $bugle_barrier_duplicated_29(1bv1, 1bv1, p27$1, p27$2);
    p29$1 := (if p25$1 && b4 then b4 else p29$1);
    p29$2 := (if p25$2 && b4 then b4 else p29$2);
    call {:repair_barrier "b4"} {:repair_instrumented} {:sourceloc_num 11} $bugle_grid_barrier_duplicated_28(p29$1, p29$2);
    havoc _HAVOC_bv32$1, _HAVOC_bv32$2;
    v8$1 := (if p25$1 then _HAVOC_bv32$1 else v8$1);
    v8$2 := (if p25$2 then _HAVOC_bv32$2 else v8$2);
    $0$1 := (if p25$1 then v8$1 else $0$1);
    $0$2 := (if p25$2 then v8$2 else $0$2);
    p31$1 := (if b27 then b27 else p31$1);
    p31$2 := (if b27 then b27 else p31$2);
    call {:repair_barrier "b27"} {:repair_instrumented} {:sourceloc_num 13} $bugle_barrier_duplicated_27(1bv1, 1bv1, p31$1, p31$2);
    p33$1 := (if b28 then b28 else p33$1);
    p33$2 := (if b28 then b28 else p33$2);
    call {:repair_barrier "b28"} {:repair_instrumented} {:sourceloc_num 13} $bugle_grid_barrier_duplicated_26(p33$1, p33$2);
    p35$1 := (if b5 then b5 else p35$1);
    p35$2 := (if b5 then b5 else p35$2);
    call {:repair_barrier "b5"} {:repair_instrumented} {:sourceloc_num 14} $bugle_barrier_duplicated_25(1bv1, 1bv1, p35$1, p35$2);
    p37$1 := (if b6 then b6 else p37$1);
    p37$2 := (if b6 then b6 else p37$2);
    call {:repair_barrier "b6"} {:repair_instrumented} {:sourceloc_num 14} $bugle_grid_barrier_duplicated_24(p37$1, p37$2);
    call {:sourceloc} {:sourceloc_num 14} {:repair_instrumented} _LOG_WRITE_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data(true, BV32_ADD(BV32_MUL(local_id_y$1, 160bv32), BV32_ADD(local_id_x$1, BV32_MUL($.04, 16bv32))), $0$1, $$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data[1bv1][BV32_ADD(BV32_MUL(local_id_y$1, 160bv32), BV32_ADD(local_id_x$1, BV32_MUL($.04, 16bv32)))]);
    call _UPDATE_WRITE_READ_BENIGN_FLAG_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data(true, BV32_ADD(BV32_MUL(local_id_y$2, 160bv32), BV32_ADD(local_id_x$2, BV32_MUL($.04, 16bv32))));
    assume {:do_not_predicate} {:check_id "check_state_3"} {:captureState "check_state_3"} {:sourceloc} {:sourceloc_num 14} {:repair_instrumented} true;
    call {:check_id "check_state_3"} {:sourceloc} {:sourceloc_num 14} {:repair_instrumented} _CHECK_WRITE_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data(true, BV32_ADD(BV32_MUL(local_id_y$2, 160bv32), BV32_ADD(local_id_x$2, BV32_MUL($.04, 16bv32))), $0$2);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_WRITE_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data"} true;
    $$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data[1bv1][BV32_ADD(BV32_MUL(local_id_y$1, 160bv32), BV32_ADD(local_id_x$1, BV32_MUL($.04, 16bv32)))] := $0$1;
    $$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data[(if group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       then 1bv1
       else 0bv1)][BV32_ADD(BV32_MUL(local_id_y$2, 160bv32), BV32_ADD(local_id_x$2, BV32_MUL($.04, 16bv32)))] := $0$2;
    $.04 := BV32_ADD($.04, 1bv32);
    assume {:captureState "loop_back_edge_state_3_0"} true;
    goto __partitioned_block_$5_0;

  __partitioned_block_$truebb_0:
    assume {:partition} v4;
    p9$1 := (if b1 then b1 else p9$1);
    p9$2 := (if b1 then b1 else p9$2);
    call {:repair_barrier "b1"} {:repair_instrumented} {:sourceloc_num 4} $bugle_barrier_duplicated_37(1bv1, 1bv1, p9$1, p9$2);
    p11$1 := (if b2 then b2 else p11$1);
    p11$2 := (if b2 then b2 else p11$2);
    call {:repair_barrier "b2"} {:repair_instrumented} {:sourceloc_num 4} $bugle_grid_barrier_duplicated_36(p11$1, p11$2);
    havoc v5$1, v5$2;
    p13$1 := (if b15 then b15 else p13$1);
    p13$2 := (if b15 then b15 else p13$2);
    call {:repair_barrier "b15"} {:repair_instrumented} {:sourceloc_num 5} $bugle_barrier_duplicated_35(1bv1, 1bv1, p13$1, p13$2);
    p15$1 := (if b16 then b16 else p15$1);
    p15$2 := (if b16 then b16 else p15$2);
    call {:repair_barrier "b16"} {:repair_instrumented} {:sourceloc_num 5} $bugle_grid_barrier_duplicated_34(p15$1, p15$2);
    call {:sourceloc} {:sourceloc_num 5} {:repair_instrumented} _LOG_WRITE_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data(true, BV32_ADD(BV32_MUL(local_id_y$1, 160bv32), BV32_ADD(local_id_x$1, BV32_MUL($.05, 16bv32))), v5$1, $$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data[1bv1][BV32_ADD(BV32_MUL(local_id_y$1, 160bv32), BV32_ADD(local_id_x$1, BV32_MUL($.05, 16bv32)))]);
    call _UPDATE_WRITE_READ_BENIGN_FLAG_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data(true, BV32_ADD(BV32_MUL(local_id_y$2, 160bv32), BV32_ADD(local_id_x$2, BV32_MUL($.05, 16bv32))));
    assume {:do_not_predicate} {:check_id "check_state_4"} {:captureState "check_state_4"} {:sourceloc} {:sourceloc_num 5} {:repair_instrumented} true;
    call {:check_id "check_state_4"} {:sourceloc} {:sourceloc_num 5} {:repair_instrumented} _CHECK_WRITE_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data(true, BV32_ADD(BV32_MUL(local_id_y$2, 160bv32), BV32_ADD(local_id_x$2, BV32_MUL($.05, 16bv32))), v5$2);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_WRITE_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data"} true;
    $$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data[1bv1][BV32_ADD(BV32_MUL(local_id_y$1, 160bv32), BV32_ADD(local_id_x$1, BV32_MUL($.05, 16bv32)))] := v5$1;
    $$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data[(if group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       then 1bv1
       else 0bv1)][BV32_ADD(BV32_MUL(local_id_y$2, 160bv32), BV32_ADD(local_id_x$2, BV32_MUL($.05, 16bv32)))] := v5$2;
    $.05 := BV32_ADD($.05, 1bv32);
    assume {:captureState "loop_back_edge_state_4_0"} true;
    goto __partitioned_block_$1_0;
}



axiom (if group_size_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;

axiom (if num_groups_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;

axiom (if group_size_x == 16bv32 then 1bv1 else 0bv1) != 0bv1;

axiom (if group_size_y == 4bv32 then 1bv1 else 0bv1) != 0bv1;

axiom (if num_groups_x == 24bv32 then 1bv1 else 0bv1) != 0bv1;

axiom (if num_groups_y == 768bv32 then 1bv1 else 0bv1) != 0bv1;

axiom (if sub_group_size == 32bv32 then 1bv1 else 0bv1) != 0bv1;

procedure {:grid_barrier} $bugle_grid_barrier();



var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b1: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b2: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b3: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b4: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b5: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b6: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b7: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b8: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b9: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b10: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b11: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b12: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b13: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b14: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b15: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b16: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b17: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b18: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b19: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b20: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b21: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b22: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b23: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b24: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b25: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b26: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b27: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b28: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b29: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b30: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b31: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b32: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b33: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b34: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b35: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b36: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b37: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b38: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b39: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b40: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b41: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b42: bool;

const {:local_id_z} local_id_z$1: bv32;

const {:local_id_z} local_id_z$2: bv32;

const {:group_id_z} group_id_z$1: bv32;

const {:group_id_z} group_id_z$2: bv32;

procedure {:inline 1} {:grid_barrier} $bugle_grid_barrier_duplicated_0(_P$1: bool, _P$2: bool);
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;



procedure {:inline 1} {:barrier} $bugle_barrier_duplicated_1($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;



procedure {:inline 1} {:grid_barrier} $bugle_grid_barrier_duplicated_2(_P$1: bool, _P$2: bool);
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;



procedure {:inline 1} {:barrier} $bugle_barrier_duplicated_3($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;



procedure {:inline 1} {:grid_barrier} $bugle_grid_barrier_duplicated_4(_P$1: bool, _P$2: bool);
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;



procedure {:inline 1} {:barrier} $bugle_barrier_duplicated_5($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;



procedure {:inline 1} {:grid_barrier} $bugle_grid_barrier_duplicated_6(_P$1: bool, _P$2: bool);
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;



procedure {:inline 1} {:barrier} $bugle_barrier_duplicated_7($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;



procedure {:inline 1} {:grid_barrier} $bugle_grid_barrier_duplicated_8(_P$1: bool, _P$2: bool);
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;



procedure {:inline 1} {:barrier} $bugle_barrier_duplicated_9($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;



procedure {:inline 1} {:grid_barrier} $bugle_grid_barrier_duplicated_10(_P$1: bool, _P$2: bool);
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;



procedure {:inline 1} {:barrier} $bugle_barrier_duplicated_11($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;



procedure {:inline 1} {:grid_barrier} $bugle_grid_barrier_duplicated_12(_P$1: bool, _P$2: bool);
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;



procedure {:inline 1} {:barrier} $bugle_barrier_duplicated_13($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;



procedure {:inline 1} {:grid_barrier} $bugle_grid_barrier_duplicated_14(_P$1: bool, _P$2: bool);
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;



procedure {:inline 1} {:barrier} $bugle_barrier_duplicated_15($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;



procedure {:inline 1} {:grid_barrier} $bugle_grid_barrier_duplicated_16(_P$1: bool, _P$2: bool);
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;



procedure {:inline 1} {:barrier} $bugle_barrier_duplicated_17($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;



procedure {:inline 1} {:grid_barrier} $bugle_grid_barrier_duplicated_18(_P$1: bool, _P$2: bool);
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;



procedure {:inline 1} {:barrier} $bugle_barrier_duplicated_19($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;



procedure {:inline 1} {:grid_barrier} $bugle_grid_barrier_duplicated_20(_P$1: bool, _P$2: bool);
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;



procedure {:inline 1} {:barrier} $bugle_barrier_duplicated_21($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;



procedure {:inline 1} {:grid_barrier} $bugle_grid_barrier_duplicated_22(_P$1: bool, _P$2: bool);
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;



procedure {:inline 1} {:barrier} $bugle_barrier_duplicated_23($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;



procedure {:inline 1} {:grid_barrier} $bugle_grid_barrier_duplicated_24(_P$1: bool, _P$2: bool);
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;



procedure {:inline 1} {:barrier} $bugle_barrier_duplicated_25($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;



procedure {:inline 1} {:grid_barrier} $bugle_grid_barrier_duplicated_26(_P$1: bool, _P$2: bool);
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;



procedure {:inline 1} {:barrier} $bugle_barrier_duplicated_27($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;



procedure {:inline 1} {:grid_barrier} $bugle_grid_barrier_duplicated_28(_P$1: bool, _P$2: bool);
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;



procedure {:inline 1} {:barrier} $bugle_barrier_duplicated_29($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;



procedure {:inline 1} {:grid_barrier} $bugle_grid_barrier_duplicated_30(_P$1: bool, _P$2: bool);
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;



procedure {:inline 1} {:barrier} $bugle_barrier_duplicated_31($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;



procedure {:inline 1} {:grid_barrier} $bugle_grid_barrier_duplicated_32(_P$1: bool, _P$2: bool);
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;



procedure {:inline 1} {:barrier} $bugle_barrier_duplicated_33($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;



procedure {:inline 1} {:grid_barrier} $bugle_grid_barrier_duplicated_34(_P$1: bool, _P$2: bool);
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;



procedure {:inline 1} {:barrier} $bugle_barrier_duplicated_35($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;



procedure {:inline 1} {:grid_barrier} $bugle_grid_barrier_duplicated_36(_P$1: bool, _P$2: bool);
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;



procedure {:inline 1} {:barrier} $bugle_barrier_duplicated_37($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;



procedure {:inline 1} {:grid_barrier} $bugle_grid_barrier_duplicated_38(_P$1: bool, _P$2: bool);
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;



procedure {:inline 1} {:barrier} $bugle_barrier_duplicated_39($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;



procedure {:inline 1} {:grid_barrier} $bugle_grid_barrier_duplicated_40(_P$1: bool, _P$2: bool);
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;



procedure {:inline 1} {:barrier} $bugle_barrier_duplicated_41($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;



function {:bvbuiltin "bvule"} BV32_ULE(bv32, bv32) : bool;

const _WATCHED_VALUE_$$arg.: bv32;

procedure {:inline 1} _LOG_READ_$$arg.(_P: bool, _offset: bv32, _value: bv32);
  modifies _READ_HAS_OCCURRED_$$arg.;



implementation {:inline 1} _LOG_READ_$$arg.(_P: bool, _offset: bv32, _value: bv32)
{

  log_access_entry:
    _READ_HAS_OCCURRED_$$arg. := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$arg. == _value
       then true
       else _READ_HAS_OCCURRED_$$arg.);
    return;
}



procedure _CHECK_READ_$$arg.(_P: bool, _offset: bv32, _value: bv32);
  requires {:source_name "d_Dst"} {:array "$$arg."} {:race} {:write_read} !(
    _P
     && _WRITE_HAS_OCCURRED_$$arg.
     && _WATCHED_OFFSET == _offset
     && _WRITE_READ_BENIGN_FLAG_$$arg.);
  requires {:source_name "d_Dst"} {:array "$$arg."} {:race} {:atomic_read} !(_P && _ATOMIC_HAS_OCCURRED_$$arg. && _WATCHED_OFFSET == _offset);



var _WRITE_READ_BENIGN_FLAG_$$arg.: bool;

procedure {:inline 1} _LOG_WRITE_$$arg.(_P: bool, _offset: bv32, _value: bv32, _value_old: bv32);
  modifies _WRITE_HAS_OCCURRED_$$arg., _WRITE_READ_BENIGN_FLAG_$$arg.;



implementation {:inline 1} _LOG_WRITE_$$arg.(_P: bool, _offset: bv32, _value: bv32, _value_old: bv32)
{

  log_access_entry:
    _WRITE_HAS_OCCURRED_$$arg. := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$arg. == _value
       then true
       else _WRITE_HAS_OCCURRED_$$arg.);
    _WRITE_READ_BENIGN_FLAG_$$arg. := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$arg. == _value
       then _value != _value_old
       else _WRITE_READ_BENIGN_FLAG_$$arg.);
    return;
}



procedure _CHECK_WRITE_$$arg.(_P: bool, _offset: bv32, _value: bv32);
  requires {:source_name "d_Dst"} {:array "$$arg."} {:race} {:write_write} !(
    _P
     && _WRITE_HAS_OCCURRED_$$arg.
     && _WATCHED_OFFSET == _offset
     && _WATCHED_VALUE_$$arg. != _value);
  requires {:source_name "d_Dst"} {:array "$$arg."} {:race} {:read_write} !(
    _P
     && _READ_HAS_OCCURRED_$$arg.
     && _WATCHED_OFFSET == _offset
     && _WATCHED_VALUE_$$arg. != _value);
  requires {:source_name "d_Dst"} {:array "$$arg."} {:race} {:atomic_write} !(_P && _ATOMIC_HAS_OCCURRED_$$arg. && _WATCHED_OFFSET == _offset);



procedure {:inline 1} _LOG_ATOMIC_$$arg.(_P: bool, _offset: bv32);
  modifies _ATOMIC_HAS_OCCURRED_$$arg.;



implementation {:inline 1} _LOG_ATOMIC_$$arg.(_P: bool, _offset: bv32)
{

  log_access_entry:
    _ATOMIC_HAS_OCCURRED_$$arg. := (if _P && _TRACKING && _WATCHED_OFFSET == _offset
       then true
       else _ATOMIC_HAS_OCCURRED_$$arg.);
    return;
}



procedure _CHECK_ATOMIC_$$arg.(_P: bool, _offset: bv32);
  requires {:source_name "d_Dst"} {:array "$$arg."} {:race} {:write_atomic} !(_P && _WRITE_HAS_OCCURRED_$$arg. && _WATCHED_OFFSET == _offset);
  requires {:source_name "d_Dst"} {:array "$$arg."} {:race} {:read_atomic} !(_P && _READ_HAS_OCCURRED_$$arg. && _WATCHED_OFFSET == _offset);



procedure {:inline 1} _UPDATE_WRITE_READ_BENIGN_FLAG_$$arg.(_P: bool, _offset: bv32);
  modifies _WRITE_READ_BENIGN_FLAG_$$arg.;



implementation {:inline 1} _UPDATE_WRITE_READ_BENIGN_FLAG_$$arg.(_P: bool, _offset: bv32)
{

  _UPDATE_BENIGN_FLAG:
    _WRITE_READ_BENIGN_FLAG_$$arg. := (if _P && _WRITE_HAS_OCCURRED_$$arg. && _WATCHED_OFFSET == _offset
       then false
       else _WRITE_READ_BENIGN_FLAG_$$arg.);
    return;
}



const _WATCHED_VALUE_$$arg.1: bv32;

procedure {:inline 1} _LOG_READ_$$arg.1(_P: bool, _offset: bv32, _value: bv32);
  modifies _READ_HAS_OCCURRED_$$arg.1;



implementation {:inline 1} _LOG_READ_$$arg.1(_P: bool, _offset: bv32, _value: bv32)
{

  log_access_entry:
    _READ_HAS_OCCURRED_$$arg.1 := (if _P
         && _TRACKING
         && _WATCHED_OFFSET == _offset
         && _WATCHED_VALUE_$$arg.1 == _value
       then true
       else _READ_HAS_OCCURRED_$$arg.1);
    return;
}



procedure _CHECK_READ_$$arg.1(_P: bool, _offset: bv32, _value: bv32);
  requires {:source_name "d_Src"} {:array "$$arg.1"} {:race} {:write_read} !(
    _P
     && _WRITE_HAS_OCCURRED_$$arg.1
     && _WATCHED_OFFSET == _offset
     && _WRITE_READ_BENIGN_FLAG_$$arg.1);
  requires {:source_name "d_Src"} {:array "$$arg.1"} {:race} {:atomic_read} !(_P && _ATOMIC_HAS_OCCURRED_$$arg.1 && _WATCHED_OFFSET == _offset);



var _WRITE_READ_BENIGN_FLAG_$$arg.1: bool;

procedure {:inline 1} _LOG_WRITE_$$arg.1(_P: bool, _offset: bv32, _value: bv32, _value_old: bv32);
  modifies _WRITE_HAS_OCCURRED_$$arg.1, _WRITE_READ_BENIGN_FLAG_$$arg.1;



implementation {:inline 1} _LOG_WRITE_$$arg.1(_P: bool, _offset: bv32, _value: bv32, _value_old: bv32)
{

  log_access_entry:
    _WRITE_HAS_OCCURRED_$$arg.1 := (if _P
         && _TRACKING
         && _WATCHED_OFFSET == _offset
         && _WATCHED_VALUE_$$arg.1 == _value
       then true
       else _WRITE_HAS_OCCURRED_$$arg.1);
    _WRITE_READ_BENIGN_FLAG_$$arg.1 := (if _P
         && _TRACKING
         && _WATCHED_OFFSET == _offset
         && _WATCHED_VALUE_$$arg.1 == _value
       then _value != _value_old
       else _WRITE_READ_BENIGN_FLAG_$$arg.1);
    return;
}



procedure _CHECK_WRITE_$$arg.1(_P: bool, _offset: bv32, _value: bv32);
  requires {:source_name "d_Src"} {:array "$$arg.1"} {:race} {:write_write} !(
    _P
     && _WRITE_HAS_OCCURRED_$$arg.1
     && _WATCHED_OFFSET == _offset
     && _WATCHED_VALUE_$$arg.1 != _value);
  requires {:source_name "d_Src"} {:array "$$arg.1"} {:race} {:read_write} !(
    _P
     && _READ_HAS_OCCURRED_$$arg.1
     && _WATCHED_OFFSET == _offset
     && _WATCHED_VALUE_$$arg.1 != _value);
  requires {:source_name "d_Src"} {:array "$$arg.1"} {:race} {:atomic_write} !(_P && _ATOMIC_HAS_OCCURRED_$$arg.1 && _WATCHED_OFFSET == _offset);



procedure {:inline 1} _LOG_ATOMIC_$$arg.1(_P: bool, _offset: bv32);
  modifies _ATOMIC_HAS_OCCURRED_$$arg.1;



implementation {:inline 1} _LOG_ATOMIC_$$arg.1(_P: bool, _offset: bv32)
{

  log_access_entry:
    _ATOMIC_HAS_OCCURRED_$$arg.1 := (if _P && _TRACKING && _WATCHED_OFFSET == _offset
       then true
       else _ATOMIC_HAS_OCCURRED_$$arg.1);
    return;
}



procedure _CHECK_ATOMIC_$$arg.1(_P: bool, _offset: bv32);
  requires {:source_name "d_Src"} {:array "$$arg.1"} {:race} {:write_atomic} !(_P && _WRITE_HAS_OCCURRED_$$arg.1 && _WATCHED_OFFSET == _offset);
  requires {:source_name "d_Src"} {:array "$$arg.1"} {:race} {:read_atomic} !(_P && _READ_HAS_OCCURRED_$$arg.1 && _WATCHED_OFFSET == _offset);



procedure {:inline 1} _UPDATE_WRITE_READ_BENIGN_FLAG_$$arg.1(_P: bool, _offset: bv32);
  modifies _WRITE_READ_BENIGN_FLAG_$$arg.1;



implementation {:inline 1} _UPDATE_WRITE_READ_BENIGN_FLAG_$$arg.1(_P: bool, _offset: bv32)
{

  _UPDATE_BENIGN_FLAG:
    _WRITE_READ_BENIGN_FLAG_$$arg.1 := (if _P && _WRITE_HAS_OCCURRED_$$arg.1 && _WATCHED_OFFSET == _offset
       then false
       else _WRITE_READ_BENIGN_FLAG_$$arg.1);
    return;
}



const _WATCHED_VALUE_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data: bv32;

procedure {:inline 1} _LOG_READ_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data(_P: bool, _offset: bv32, _value: bv32);
  modifies _READ_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;



implementation {:inline 1} _LOG_READ_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data(_P: bool, _offset: bv32, _value: bv32)
{

  log_access_entry:
    _READ_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data := (if _P
         && group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && _TRACKING
         && _WATCHED_OFFSET == _offset
         && _WATCHED_VALUE_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data == _value
       then true
       else _READ_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data);
    return;
}



procedure _CHECK_READ_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data(_P: bool, _offset: bv32, _value: bv32);
  requires {:source_name "s_Data"} {:array "$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data"} {:race} {:write_read} !(
    _P
     && _WRITE_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data
     && _WATCHED_OFFSET == _offset
     && _WRITE_READ_BENIGN_FLAG_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data
     && group_id_x$1 == group_id_x$2
     && group_id_y$1 == group_id_y$2
     && group_id_z$1 == group_id_z$2);
  requires {:source_name "s_Data"} {:array "$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data"} {:race} {:atomic_read} !(
    _P
     && _ATOMIC_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data
     && _WATCHED_OFFSET == _offset
     && group_id_x$1 == group_id_x$2
     && group_id_y$1 == group_id_y$2
     && group_id_z$1 == group_id_z$2);



var _WRITE_READ_BENIGN_FLAG_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data: bool;

procedure {:inline 1} _LOG_WRITE_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data(_P: bool, _offset: bv32, _value: bv32, _value_old: bv32);
  modifies _WRITE_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data, _WRITE_READ_BENIGN_FLAG_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;



implementation {:inline 1} _LOG_WRITE_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data(_P: bool, _offset: bv32, _value: bv32, _value_old: bv32)
{

  log_access_entry:
    _WRITE_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data := (if _P
         && group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && _TRACKING
         && _WATCHED_OFFSET == _offset
         && _WATCHED_VALUE_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data == _value
       then true
       else _WRITE_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data);
    _WRITE_READ_BENIGN_FLAG_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data := (if _P
         && group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && _TRACKING
         && _WATCHED_OFFSET == _offset
         && _WATCHED_VALUE_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data == _value
       then _value != _value_old
       else _WRITE_READ_BENIGN_FLAG_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data);
    return;
}



procedure _CHECK_WRITE_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data(_P: bool, _offset: bv32, _value: bv32);
  requires {:source_name "s_Data"} {:array "$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data"} {:race} {:write_write} !(
    _P
     && _WRITE_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data
     && _WATCHED_OFFSET == _offset
     && _WATCHED_VALUE_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data != _value
     && group_id_x$1 == group_id_x$2
     && group_id_y$1 == group_id_y$2
     && group_id_z$1 == group_id_z$2);
  requires {:source_name "s_Data"} {:array "$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data"} {:race} {:read_write} !(
    _P
     && _READ_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data
     && _WATCHED_OFFSET == _offset
     && _WATCHED_VALUE_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data != _value
     && group_id_x$1 == group_id_x$2
     && group_id_y$1 == group_id_y$2
     && group_id_z$1 == group_id_z$2);
  requires {:source_name "s_Data"} {:array "$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data"} {:race} {:atomic_write} !(
    _P
     && _ATOMIC_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data
     && _WATCHED_OFFSET == _offset
     && group_id_x$1 == group_id_x$2
     && group_id_y$1 == group_id_y$2
     && group_id_z$1 == group_id_z$2);



procedure {:inline 1} _LOG_ATOMIC_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data(_P: bool, _offset: bv32);
  modifies _ATOMIC_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;



implementation {:inline 1} _LOG_ATOMIC_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data(_P: bool, _offset: bv32)
{

  log_access_entry:
    _ATOMIC_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data := (if _P
         && group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && _TRACKING
         && _WATCHED_OFFSET == _offset
       then true
       else _ATOMIC_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data);
    return;
}



procedure _CHECK_ATOMIC_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data(_P: bool, _offset: bv32);
  requires {:source_name "s_Data"} {:array "$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data"} {:race} {:write_atomic} !(
    _P
     && _WRITE_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data
     && _WATCHED_OFFSET == _offset
     && group_id_x$1 == group_id_x$2
     && group_id_y$1 == group_id_y$2
     && group_id_z$1 == group_id_z$2);
  requires {:source_name "s_Data"} {:array "$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data"} {:race} {:read_atomic} !(
    _P
     && _READ_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data
     && _WATCHED_OFFSET == _offset
     && group_id_x$1 == group_id_x$2
     && group_id_y$1 == group_id_y$2
     && group_id_z$1 == group_id_z$2);



procedure {:inline 1} _UPDATE_WRITE_READ_BENIGN_FLAG_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data(_P: bool, _offset: bv32);
  modifies _WRITE_READ_BENIGN_FLAG_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;



implementation {:inline 1} _UPDATE_WRITE_READ_BENIGN_FLAG_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data(_P: bool, _offset: bv32)
{

  _UPDATE_BENIGN_FLAG:
    _WRITE_READ_BENIGN_FLAG_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data := (if _P
         && _WRITE_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data
         && _WATCHED_OFFSET == _offset
       then false
       else _WRITE_READ_BENIGN_FLAG_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data);
    return;
}



var _TRACKING: bool;

implementation {:inline 1} $bugle_grid_barrier_duplicated_0(_P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume true ==> !_READ_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    assume true ==> !_WRITE_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    assume true ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} false;
    goto anon3;

  anon3:
    assume true ==> true ==> !_READ_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} false;
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} true;
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} true;
    havoc $$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_1($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    assume _P$1 && $0 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    assume _P$1 && $0 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(
      group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_grid_barrier_duplicated_2(_P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume true ==> !_READ_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    assume true ==> !_WRITE_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    assume true ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} false;
    goto anon3;

  anon3:
    assume true ==> true ==> !_READ_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} false;
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} true;
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} true;
    havoc $$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_3($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    assume _P$1 && $0 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    assume _P$1 && $0 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(
      group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_grid_barrier_duplicated_4(_P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume true ==> !_READ_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    assume true ==> !_WRITE_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    assume true ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} false;
    goto anon3;

  anon3:
    assume true ==> true ==> !_READ_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} false;
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} true;
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} true;
    havoc $$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_5($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    assume _P$1 && $0 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    assume _P$1 && $0 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(
      group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_grid_barrier_duplicated_6(_P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume true ==> !_READ_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    assume true ==> !_WRITE_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    assume true ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} false;
    goto anon3;

  anon3:
    assume true ==> true ==> !_READ_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} false;
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} true;
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} true;
    havoc $$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_7($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    assume _P$1 && $0 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    assume _P$1 && $0 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(
      group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_grid_barrier_duplicated_8(_P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume true ==> !_READ_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    assume true ==> !_WRITE_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    assume true ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} false;
    goto anon3;

  anon3:
    assume true ==> true ==> !_READ_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} false;
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} true;
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} true;
    havoc $$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_9($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    assume _P$1 && $0 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    assume _P$1 && $0 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(
      group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_grid_barrier_duplicated_10(_P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume true ==> !_READ_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    assume true ==> !_WRITE_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    assume true ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} false;
    goto anon3;

  anon3:
    assume true ==> true ==> !_READ_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} false;
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} true;
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} true;
    havoc $$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_11($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    assume _P$1 && $0 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    assume _P$1 && $0 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(
      group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_grid_barrier_duplicated_12(_P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume true ==> !_READ_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    assume true ==> !_WRITE_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    assume true ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} false;
    goto anon3;

  anon3:
    assume true ==> true ==> !_READ_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} false;
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} true;
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} true;
    havoc $$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_13($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    assume _P$1 && $0 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    assume _P$1 && $0 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(
      group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_grid_barrier_duplicated_14(_P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume true ==> !_READ_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    assume true ==> !_WRITE_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    assume true ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} false;
    goto anon3;

  anon3:
    assume true ==> true ==> !_READ_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} false;
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} true;
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} true;
    havoc $$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_15($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    assume _P$1 && $0 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    assume _P$1 && $0 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(
      group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_grid_barrier_duplicated_16(_P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume true ==> !_READ_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    assume true ==> !_WRITE_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    assume true ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} false;
    goto anon3;

  anon3:
    assume true ==> true ==> !_READ_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} false;
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} true;
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} true;
    havoc $$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_17($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    assume _P$1 && $0 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    assume _P$1 && $0 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(
      group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_grid_barrier_duplicated_18(_P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume true ==> !_READ_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    assume true ==> !_WRITE_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    assume true ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} false;
    goto anon3;

  anon3:
    assume true ==> true ==> !_READ_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} false;
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} true;
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} true;
    havoc $$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_19($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    assume _P$1 && $0 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    assume _P$1 && $0 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(
      group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_grid_barrier_duplicated_20(_P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume true ==> !_READ_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    assume true ==> !_WRITE_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    assume true ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} false;
    goto anon3;

  anon3:
    assume true ==> true ==> !_READ_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} false;
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} true;
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} true;
    havoc $$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_21($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    assume _P$1 && $0 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    assume _P$1 && $0 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(
      group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_grid_barrier_duplicated_22(_P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume true ==> !_READ_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    assume true ==> !_WRITE_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    assume true ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} false;
    goto anon3;

  anon3:
    assume true ==> true ==> !_READ_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} false;
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} true;
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} true;
    havoc $$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_23($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    assume _P$1 && $0 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    assume _P$1 && $0 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(
      group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_grid_barrier_duplicated_24(_P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume true ==> !_READ_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    assume true ==> !_WRITE_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    assume true ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} false;
    goto anon3;

  anon3:
    assume true ==> true ==> !_READ_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} false;
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} true;
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} true;
    havoc $$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_25($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    assume _P$1 && $0 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    assume _P$1 && $0 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(
      group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_grid_barrier_duplicated_26(_P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume true ==> !_READ_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    assume true ==> !_WRITE_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    assume true ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} false;
    goto anon3;

  anon3:
    assume true ==> true ==> !_READ_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} false;
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} true;
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} true;
    havoc $$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_27($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    assume _P$1 && $0 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    assume _P$1 && $0 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(
      group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_grid_barrier_duplicated_28(_P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume true ==> !_READ_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    assume true ==> !_WRITE_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    assume true ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} false;
    goto anon3;

  anon3:
    assume true ==> true ==> !_READ_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} false;
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} true;
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} true;
    havoc $$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_29($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    assume _P$1 && $0 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    assume _P$1 && $0 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(
      group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_grid_barrier_duplicated_30(_P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume true ==> !_READ_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    assume true ==> !_WRITE_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    assume true ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} false;
    goto anon3;

  anon3:
    assume true ==> true ==> !_READ_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} false;
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} true;
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} true;
    havoc $$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_31($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    assume _P$1 && $0 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    assume _P$1 && $0 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(
      group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_grid_barrier_duplicated_32(_P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume true ==> !_READ_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    assume true ==> !_WRITE_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    assume true ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} false;
    goto anon3;

  anon3:
    assume true ==> true ==> !_READ_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} false;
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} true;
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} true;
    havoc $$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_33($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    assume _P$1 && $0 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    assume _P$1 && $0 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(
      group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_grid_barrier_duplicated_34(_P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume true ==> !_READ_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    assume true ==> !_WRITE_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    assume true ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} false;
    goto anon3;

  anon3:
    assume true ==> true ==> !_READ_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} false;
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} true;
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} true;
    havoc $$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_35($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    assume _P$1 && $0 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    assume _P$1 && $0 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(
      group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_grid_barrier_duplicated_36(_P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume true ==> !_READ_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    assume true ==> !_WRITE_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    assume true ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} false;
    goto anon3;

  anon3:
    assume true ==> true ==> !_READ_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} false;
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} true;
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} true;
    havoc $$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_37($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    assume _P$1 && $0 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    assume _P$1 && $0 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(
      group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_grid_barrier_duplicated_38(_P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume true ==> !_READ_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    assume true ==> !_WRITE_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    assume true ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} false;
    goto anon3;

  anon3:
    assume true ==> true ==> !_READ_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} false;
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} true;
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} true;
    havoc $$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_39($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    assume _P$1 && $0 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    assume _P$1 && $0 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(
      group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_grid_barrier_duplicated_40(_P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume true ==> !_READ_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    assume true ==> !_WRITE_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    assume true ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} false;
    goto anon3;

  anon3:
    assume true ==> true ==> !_READ_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} false;
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} true;
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} true;
    havoc $$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_41($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    assume _P$1 && $0 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    assume _P$1 && $0 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(
      group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$_ZZ21convolutionRowsKernelPfS_iiiE6s_Data;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



function {:bvbuiltin "bvand"} BV32_AND(bv32, bv32) : bv32;

function {:bvbuiltin "bvsdiv"} BV32_DIV(bv32, bv32) : bv32;
