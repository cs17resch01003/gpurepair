type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x: [bv32]bv32, y: bv32)
   returns (z$1: bv32, A$1: [bv32]bv32, z$2: bv32, A$2: [bv32]bv32);



procedure _ATOMIC_OP8(x: [bv32]bv8, y: bv32)
   returns (z$1: bv8, A$1: [bv32]bv8, z$2: bv8, A$2: [bv32]bv8);



var {:source_name "dst"} {:global} $$arg.: [bv32]bv32;

axiom {:array_info "$$arg."} {:global} {:elem_width 32} {:source_name "dst"} {:source_elem_width 32} {:source_dimensions "*"} true;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$arg.: bool;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$arg.: bool;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$arg.: bool;

axiom {:array_info "$$texImage"} {:global} {:elem_width 8} {:source_name "texImage"} {:source_elem_width 96} {:source_dimensions "1"} true;

var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 96} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$texImage: bool;

var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 96} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$texImage: bool;

var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 96} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$texImage: bool;

var {:source_name "fWeights"} {:group_shared} $$_ZZ4NLM2PjiiffE8fWeights: [bv1][bv32]bv32;

axiom {:array_info "$$_ZZ4NLM2PjiiffE8fWeights"} {:group_shared} {:elem_width 32} {:source_name "fWeights"} {:source_elem_width 32} {:source_dimensions "64"} true;

var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights: bool;

var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights: bool;

var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights: bool;

const _WATCHED_OFFSET: bv32;

const {:group_id_x} group_id_x$1: bv32;

const {:group_id_x} group_id_x$2: bv32;

const {:group_id_y} group_id_y$1: bv32;

const {:group_id_y} group_id_y$2: bv32;

const {:group_size_x} group_size_x: bv32;

const {:group_size_y} group_size_y: bv32;

const {:group_size_z} group_size_z: bv32;

const {:local_id_x} local_id_x$1: bv32;

const {:local_id_x} local_id_x$2: bv32;

const {:local_id_y} local_id_y$1: bv32;

const {:local_id_y} local_id_y$2: bv32;

const {:num_groups_x} num_groups_x: bv32;

const {:num_groups_y} num_groups_y: bv32;

const {:num_groups_z} num_groups_z: bv32;

const {:sub_group_size} sub_group_size: bv32;

function FADD32(bv32, bv32) : bv32;

function FDIV32(bv32, bv32) : bv32;

function FEQ32(bv32, bv32) : bool;

function FLT32(bv32, bv32) : bool;

function FMUL32(bv32, bv32) : bv32;

function FP32_TO_SI32(bv32) : bv32;

function FSUB32(bv32, bv32) : bv32;

function SI32_TO_FP32(bv32) : bv32;

function UI32_TO_FP32(bv32) : bv32;

function {:bvbuiltin "bvadd"} BV32_ADD(bv32, bv32) : bv32;

function {:bvbuiltin "bvmul"} BV32_MUL(bv32, bv32) : bv32;

function {:bvbuiltin "bvor"} BV32_OR(bv32, bv32) : bv32;

function {:bvbuiltin "bvshl"} BV32_SHL(bv32, bv32) : bv32;

function {:bvbuiltin "bvslt"} BV32_SLT(bv32, bv32) : bool;

function {:bvbuiltin "bvsub"} BV32_SUB(bv32, bv32) : bv32;

procedure {:source_name "NLM2"} {:kernel} $_Z4NLM2Pjiiff($imageW: bv32, $imageH: bv32, $Noise: bv32, $lerpC: bv32);
  requires {:sourceloc_num 0} {:thread 1} (if $imageW == 320bv32 then 1bv1 else 0bv1) != 0bv1;
  requires {:sourceloc_num 1} {:thread 1} (if $imageH == 408bv32 then 1bv1 else 0bv1) != 0bv1;
  requires !_READ_HAS_OCCURRED_$$arg.
     && !_WRITE_HAS_OCCURRED_$$arg.
     && !_ATOMIC_HAS_OCCURRED_$$arg.;
  requires !_READ_HAS_OCCURRED_$$texImage
     && !_WRITE_HAS_OCCURRED_$$texImage
     && !_ATOMIC_HAS_OCCURRED_$$texImage;
  requires !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights
     && !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights
     && !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
  requires BV32_SGT(group_size_x, 0bv32);
  requires BV32_SGT(num_groups_x, 0bv32);
  requires BV32_SGE(group_id_x$1, 0bv32);
  requires BV32_SGE(group_id_x$2, 0bv32);
  requires BV32_SLT(group_id_x$1, num_groups_x);
  requires BV32_SLT(group_id_x$2, num_groups_x);
  requires BV32_SGE(local_id_x$1, 0bv32);
  requires BV32_SGE(local_id_x$2, 0bv32);
  requires BV32_SLT(local_id_x$1, group_size_x);
  requires BV32_SLT(local_id_x$2, group_size_x);
  requires BV32_SGT(group_size_y, 0bv32);
  requires BV32_SGT(num_groups_y, 0bv32);
  requires BV32_SGE(group_id_y$1, 0bv32);
  requires BV32_SGE(group_id_y$2, 0bv32);
  requires BV32_SLT(group_id_y$1, num_groups_y);
  requires BV32_SLT(group_id_y$2, num_groups_y);
  requires BV32_SGE(local_id_y$1, 0bv32);
  requires BV32_SGE(local_id_y$2, 0bv32);
  requires BV32_SLT(local_id_y$1, group_size_y);
  requires BV32_SLT(local_id_y$2, group_size_y);
  requires BV32_SGT(group_size_z, 0bv32);
  requires BV32_SGT(num_groups_z, 0bv32);
  requires BV32_SGE(group_id_z$1, 0bv32);
  requires BV32_SGE(group_id_z$2, 0bv32);
  requires BV32_SLT(group_id_z$1, num_groups_z);
  requires BV32_SLT(group_id_z$2, num_groups_z);
  requires BV32_SGE(local_id_z$1, 0bv32);
  requires BV32_SGE(local_id_z$2, 0bv32);
  requires BV32_SLT(local_id_z$1, group_size_z);
  requires BV32_SLT(local_id_z$2, group_size_z);
  requires group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> local_id_x$1 != local_id_x$2
       || local_id_y$1 != local_id_y$2
       || local_id_z$1 != local_id_z$2;
  modifies b120, b119, b118, b117, b116, b115, b114, b113, b112, b111, b110, b109, b108, b107, b106, b105, b104, b103, b102, b101, b100, b99, b98, b97, b96, b95, b94, b93, b92, b91, b90, b89, b88, b87, b86, b85, b84, b83, b82, b81, b80, b79, b78, b77, b76, b75, b74, b73, b72, b71, b70, b69, b68, b67, b66, b65, b64, b63, b62, b61, b60, b59, b58, b57, b56, b55, b54, b53, b52, b51, b50, b49, b48, b47, b46, b45, b44, b43, b42, b41, b40, b39, b38, b37, b36, b35, b34, b33, b32, b31, b30, b29, b28, b27, b26, b25, b24, b23, b22, b21, b20, b19, b18, b17, b16, b15, b14, b13, b12, b11, b10, b9, b8, b7, b6, b5, b4, b3, b2, b1, $$_ZZ4NLM2PjiiffE8fWeights, $$arg., _TRACKING, _WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights, _WRITE_READ_BENIGN_FLAG_$$_ZZ4NLM2PjiiffE8fWeights, _READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights, _WRITE_HAS_OCCURRED_$$arg., _WRITE_READ_BENIGN_FLAG_$$arg.;



implementation {:source_name "NLM2"} {:kernel} $_Z4NLM2Pjiiff($imageW: bv32, $imageH: bv32, $Noise: bv32, $lerpC: bv32)
{
  var $.012$1: bv128;
  var $.012$2: bv128;
  var $.06$1: bv128;
  var $.06$2: bv128;
  var $.09$1: bv32;
  var $.09$2: bv32;
  var $.08$1: bv32;
  var $.08$2: bv32;
  var $.113$1: bv128;
  var $.113$2: bv128;
  var $.17$1: bv128;
  var $.17$2: bv128;
  var $.110$1: bv32;
  var $.110$2: bv32;
  var $.07$1: bv32;
  var $.07$2: bv32;
  var $.010$1: bv96;
  var $.010$2: bv96;
  var $.04$1: bv128;
  var $.04$2: bv128;
  var $.05$1: bv32;
  var $.05$2: bv32;
  var $.03$1: bv32;
  var $.03$2: bv32;
  var $.02$1: bv32;
  var $.02$2: bv32;
  var $.01$1: bv32;
  var $.01$2: bv32;
  var $.111$1: bv96;
  var $.111$2: bv96;
  var $.15$1: bv128;
  var $.15$2: bv128;
  var $.16$1: bv32;
  var $.16$2: bv32;
  var $.14$1: bv32;
  var $.14$2: bv32;
  var $.1$1: bv32;
  var $.1$2: bv32;
  var $.0$1: bv32;
  var $.0$2: bv32;
  var $0$1: bv32;
  var $0$2: bv32;
  var v0$1: bv32;
  var v0$2: bv32;
  var v1$1: bv32;
  var v1$2: bv32;
  var v2$1: bv32;
  var v2$2: bv32;
  var v3$1: bv32;
  var v3$2: bv32;
  var v4$1: bool;
  var v4$2: bool;
  var v5$1: bool;
  var v5$2: bool;
  var v7$1: bv128;
  var v7$2: bv128;
  var v6$1: bv128;
  var v6$2: bv128;
  var v8$1: bool;
  var v8$2: bool;
  var v9$1: bool;
  var v9$2: bool;
  var v10$1: bv8;
  var v10$2: bv8;
  var v11$1: bv8;
  var v11$2: bv8;
  var v12$1: bv8;
  var v12$2: bv8;
  var v13$1: bv8;
  var v13$2: bv8;
  var v14$1: bv8;
  var v14$2: bv8;
  var v15$1: bv8;
  var v15$2: bv8;
  var v16$1: bv8;
  var v16$2: bv8;
  var v17$1: bv8;
  var v17$2: bv8;
  var v18$1: bv8;
  var v18$2: bv8;
  var v19$1: bv8;
  var v19$2: bv8;
  var v20$1: bv8;
  var v20$2: bv8;
  var v21$1: bv8;
  var v21$2: bv8;
  var v23$1: bv32;
  var v23$2: bv32;
  var v22$1: bv128;
  var v22$2: bv128;
  var v24$1: bv32;
  var v24$2: bv32;
  var v25$1: bv32;
  var v25$2: bv32;
  var v26$1: bv8;
  var v26$2: bv8;
  var v27$1: bv8;
  var v27$2: bv8;
  var v28$1: bv8;
  var v28$2: bv8;
  var v29$1: bv8;
  var v29$2: bv8;
  var v30$1: bv8;
  var v30$2: bv8;
  var v31$1: bv8;
  var v31$2: bv8;
  var v32$1: bv8;
  var v32$2: bv8;
  var v33$1: bv8;
  var v33$2: bv8;
  var v34$1: bv8;
  var v34$2: bv8;
  var v35$1: bv8;
  var v35$2: bv8;
  var v36$1: bv8;
  var v36$2: bv8;
  var v37$1: bv8;
  var v37$2: bv8;
  var v39$1: bv32;
  var v39$2: bv32;
  var v38$1: bv128;
  var v38$2: bv128;
  var v40$1: bv32;
  var v40$2: bv32;
  var v41$1: bv32;
  var v41$2: bv32;
  var v42$1: bv32;
  var v42$2: bv32;
  var v43$1: bv128;
  var v43$2: bv128;
  var v44$1: bool;
  var v44$2: bool;
  var v45$1: bool;
  var v45$2: bool;
  var v46$1: bv32;
  var v46$2: bv32;
  var v47$1: bv8;
  var v47$2: bv8;
  var v48$1: bv8;
  var v48$2: bv8;
  var v49$1: bv8;
  var v49$2: bv8;
  var v50$1: bv8;
  var v50$2: bv8;
  var v51$1: bv8;
  var v51$2: bv8;
  var v52$1: bv8;
  var v52$2: bv8;
  var v53$1: bv8;
  var v53$2: bv8;
  var v54$1: bv8;
  var v54$2: bv8;
  var v55$1: bv8;
  var v55$2: bv8;
  var v56$1: bv8;
  var v56$2: bv8;
  var v57$1: bv8;
  var v57$2: bv8;
  var v58$1: bv8;
  var v58$2: bv8;
  var v60$1: bv32;
  var v60$2: bv32;
  var v59$1: bv128;
  var v59$2: bv128;
  var v61$1: bv32;
  var v61$2: bv32;
  var v62$1: bv32;
  var v62$2: bv32;
  var v63$1: bv32;
  var v63$2: bv32;
  var v64$1: bv32;
  var v64$2: bv32;
  var v65$1: bv32;
  var v65$2: bv32;
  var v66$1: bv32;
  var v66$2: bv32;
  var v67$1: bv32;
  var v67$2: bv32;
  var v68$1: bv32;
  var v68$2: bv32;
  var v69$1: bool;
  var v69$2: bool;
  var v70$1: bv8;
  var v70$2: bv8;
  var v71$1: bv8;
  var v71$2: bv8;
  var v72$1: bv8;
  var v72$2: bv8;
  var v73$1: bv8;
  var v73$2: bv8;
  var v74$1: bv8;
  var v74$2: bv8;
  var v75$1: bv8;
  var v75$2: bv8;
  var v76$1: bv8;
  var v76$2: bv8;
  var v77$1: bv8;
  var v77$2: bv8;
  var v78$1: bv8;
  var v78$2: bv8;
  var v79$1: bv8;
  var v79$2: bv8;
  var v80$1: bv8;
  var v80$2: bv8;
  var v81$1: bv8;
  var v81$2: bv8;
  var v82$1: bv128;
  var v82$2: bv128;
  var v83$1: bv32;
  var v83$2: bv32;
  var v84$1: bv32;
  var v84$2: bv32;
  var v85$1: bv32;
  var v85$2: bv32;
  var p0$1: bool;
  var p0$2: bool;
  var p1$1: bool;
  var p1$2: bool;
  var p2$1: bool;
  var p2$2: bool;
  var p3$1: bool;
  var p3$2: bool;
  var p4$1: bool;
  var p4$2: bool;
  var p5$1: bool;
  var p5$2: bool;
  var p6$1: bool;
  var p6$2: bool;
  var p7$1: bool;
  var p7$2: bool;
  var p8$1: bool;
  var p8$2: bool;
  var p9$1: bool;
  var p9$2: bool;
  var p10$1: bool;
  var p10$2: bool;
  var p11$1: bool;
  var p11$2: bool;
  var p12$1: bool;
  var p12$2: bool;
  var p13$1: bool;
  var p13$2: bool;
  var p14$1: bool;
  var p14$2: bool;
  var p15$1: bool;
  var p15$2: bool;
  var p16$1: bool;
  var p16$2: bool;
  var p17$1: bool;
  var p17$2: bool;
  var p18$1: bool;
  var p18$2: bool;
  var p19$1: bool;
  var p19$2: bool;
  var p20$1: bool;
  var p20$2: bool;
  var p21$1: bool;
  var p21$2: bool;
  var p22$1: bool;
  var p22$2: bool;
  var p23$1: bool;
  var p23$2: bool;
  var p24$1: bool;
  var p24$2: bool;
  var p25$1: bool;
  var p25$2: bool;
  var p26$1: bool;
  var p26$2: bool;
  var p27$1: bool;
  var p27$2: bool;
  var p28$1: bool;
  var p28$2: bool;
  var p29$1: bool;
  var p29$2: bool;
  var p30$1: bool;
  var p30$2: bool;
  var p31$1: bool;
  var p31$2: bool;
  var p32$1: bool;
  var p32$2: bool;
  var p33$1: bool;
  var p33$2: bool;
  var p34$1: bool;
  var p34$2: bool;
  var p35$1: bool;
  var p35$2: bool;
  var p36$1: bool;
  var p36$2: bool;
  var p37$1: bool;
  var p37$2: bool;
  var p38$1: bool;
  var p38$2: bool;
  var p39$1: bool;
  var p39$2: bool;
  var p40$1: bool;
  var p40$2: bool;
  var p41$1: bool;
  var p41$2: bool;
  var p42$1: bool;
  var p42$2: bool;
  var p43$1: bool;
  var p43$2: bool;
  var p44$1: bool;
  var p44$2: bool;
  var p45$1: bool;
  var p45$2: bool;
  var p46$1: bool;
  var p46$2: bool;
  var p47$1: bool;
  var p47$2: bool;
  var p48$1: bool;
  var p48$2: bool;
  var p49$1: bool;
  var p49$2: bool;
  var p50$1: bool;
  var p50$2: bool;
  var p51$1: bool;
  var p51$2: bool;
  var p52$1: bool;
  var p52$2: bool;
  var p53$1: bool;
  var p53$2: bool;
  var p54$1: bool;
  var p54$2: bool;
  var p55$1: bool;
  var p55$2: bool;
  var p56$1: bool;
  var p56$2: bool;
  var p57$1: bool;
  var p57$2: bool;
  var p58$1: bool;
  var p58$2: bool;
  var p59$1: bool;
  var p59$2: bool;
  var p60$1: bool;
  var p60$2: bool;
  var p61$1: bool;
  var p61$2: bool;
  var p62$1: bool;
  var p62$2: bool;
  var p63$1: bool;
  var p63$2: bool;
  var p64$1: bool;
  var p64$2: bool;
  var p65$1: bool;
  var p65$2: bool;
  var p66$1: bool;
  var p66$2: bool;
  var p67$1: bool;
  var p67$2: bool;
  var p68$1: bool;
  var p68$2: bool;
  var p69$1: bool;
  var p69$2: bool;
  var p70$1: bool;
  var p70$2: bool;
  var p71$1: bool;
  var p71$2: bool;
  var p72$1: bool;
  var p72$2: bool;
  var p73$1: bool;
  var p73$2: bool;
  var p74$1: bool;
  var p74$2: bool;
  var p75$1: bool;
  var p75$2: bool;
  var p76$1: bool;
  var p76$2: bool;
  var p77$1: bool;
  var p77$2: bool;
  var p78$1: bool;
  var p78$2: bool;
  var p79$1: bool;
  var p79$2: bool;
  var p80$1: bool;
  var p80$2: bool;
  var p81$1: bool;
  var p81$2: bool;
  var p82$1: bool;
  var p82$2: bool;
  var p83$1: bool;
  var p83$2: bool;
  var p84$1: bool;
  var p84$2: bool;
  var p85$1: bool;
  var p85$2: bool;
  var p86$1: bool;
  var p86$2: bool;
  var p87$1: bool;
  var p87$2: bool;
  var p88$1: bool;
  var p88$2: bool;
  var p89$1: bool;
  var p89$2: bool;
  var p90$1: bool;
  var p90$2: bool;
  var p91$1: bool;
  var p91$2: bool;
  var p92$1: bool;
  var p92$2: bool;
  var p93$1: bool;
  var p93$2: bool;
  var p94$1: bool;
  var p94$2: bool;
  var p95$1: bool;
  var p95$2: bool;
  var p96$1: bool;
  var p96$2: bool;
  var p97$1: bool;
  var p97$2: bool;
  var p98$1: bool;
  var p98$2: bool;
  var p99$1: bool;
  var p99$2: bool;
  var p100$1: bool;
  var p100$2: bool;
  var p101$1: bool;
  var p101$2: bool;
  var p102$1: bool;
  var p102$2: bool;
  var p103$1: bool;
  var p103$2: bool;
  var p104$1: bool;
  var p104$2: bool;
  var p105$1: bool;
  var p105$2: bool;
  var p106$1: bool;
  var p106$2: bool;
  var p107$1: bool;
  var p107$2: bool;
  var p108$1: bool;
  var p108$2: bool;
  var p109$1: bool;
  var p109$2: bool;
  var p110$1: bool;
  var p110$2: bool;
  var p111$1: bool;
  var p111$2: bool;
  var p112$1: bool;
  var p112$2: bool;
  var p113$1: bool;
  var p113$2: bool;
  var p114$1: bool;
  var p114$2: bool;
  var p115$1: bool;
  var p115$2: bool;
  var p116$1: bool;
  var p116$2: bool;
  var p117$1: bool;
  var p117$2: bool;
  var p118$1: bool;
  var p118$2: bool;
  var p119$1: bool;
  var p119$2: bool;
  var p120$1: bool;
  var p120$2: bool;
  var p121$1: bool;
  var p121$2: bool;
  var p122$1: bool;
  var p122$2: bool;
  var p123$1: bool;
  var p123$2: bool;
  var p124$1: bool;
  var p124$2: bool;
  var p125$1: bool;
  var p125$2: bool;
  var p126$1: bool;
  var p126$2: bool;
  var p127$1: bool;
  var p127$2: bool;
  var p128$1: bool;
  var p128$2: bool;
  var p129$1: bool;
  var p129$2: bool;
  var p130$1: bool;
  var p130$2: bool;
  var p131$1: bool;
  var p131$2: bool;
  var p132$1: bool;
  var p132$2: bool;
  var p133$1: bool;
  var p133$2: bool;
  var p134$1: bool;
  var p134$2: bool;
  var p135$1: bool;
  var p135$2: bool;
  var p136$1: bool;
  var p136$2: bool;
  var p137$1: bool;
  var p137$2: bool;
  var p138$1: bool;
  var p138$2: bool;
  var p139$1: bool;
  var p139$2: bool;
  var p140$1: bool;
  var p140$2: bool;
  var p141$1: bool;
  var p141$2: bool;
  var p142$1: bool;
  var p142$2: bool;
  var p143$1: bool;
  var p143$2: bool;
  var p144$1: bool;
  var p144$2: bool;
  var p145$1: bool;
  var p145$2: bool;
  var p146$1: bool;
  var p146$2: bool;
  var p147$1: bool;
  var p147$2: bool;
  var p148$1: bool;
  var p148$2: bool;
  var p149$1: bool;
  var p149$2: bool;
  var p150$1: bool;
  var p150$2: bool;
  var p151$1: bool;
  var p151$2: bool;
  var p152$1: bool;
  var p152$2: bool;
  var p153$1: bool;
  var p153$2: bool;
  var p154$1: bool;
  var p154$2: bool;
  var p155$1: bool;
  var p155$2: bool;
  var p156$1: bool;
  var p156$2: bool;
  var p157$1: bool;
  var p157$2: bool;
  var p158$1: bool;
  var p158$2: bool;
  var p159$1: bool;
  var p159$2: bool;
  var p160$1: bool;
  var p160$2: bool;
  var p161$1: bool;
  var p161$2: bool;
  var p162$1: bool;
  var p162$2: bool;
  var p163$1: bool;
  var p163$2: bool;
  var p164$1: bool;
  var p164$2: bool;
  var p165$1: bool;
  var p165$2: bool;
  var p166$1: bool;
  var p166$2: bool;
  var p167$1: bool;
  var p167$2: bool;
  var p168$1: bool;
  var p168$2: bool;
  var p169$1: bool;
  var p169$2: bool;
  var p170$1: bool;
  var p170$2: bool;
  var p171$1: bool;
  var p171$2: bool;
  var p172$1: bool;
  var p172$2: bool;
  var p173$1: bool;
  var p173$2: bool;
  var p174$1: bool;
  var p174$2: bool;
  var p175$1: bool;
  var p175$2: bool;
  var p176$1: bool;
  var p176$2: bool;
  var p177$1: bool;
  var p177$2: bool;
  var p178$1: bool;
  var p178$2: bool;
  var p179$1: bool;
  var p179$2: bool;
  var p180$1: bool;
  var p180$2: bool;
  var p181$1: bool;
  var p181$2: bool;
  var p182$1: bool;
  var p182$2: bool;
  var p183$1: bool;
  var p183$2: bool;
  var p184$1: bool;
  var p184$2: bool;
  var p185$1: bool;
  var p185$2: bool;
  var p186$1: bool;
  var p186$2: bool;
  var p187$1: bool;
  var p187$2: bool;
  var p188$1: bool;
  var p188$2: bool;
  var p189$1: bool;
  var p189$2: bool;
  var p190$1: bool;
  var p190$2: bool;
  var p191$1: bool;
  var p191$2: bool;
  var p192$1: bool;
  var p192$2: bool;
  var p193$1: bool;
  var p193$2: bool;
  var p194$1: bool;
  var p194$2: bool;
  var p195$1: bool;
  var p195$2: bool;
  var p196$1: bool;
  var p196$2: bool;
  var p197$1: bool;
  var p197$2: bool;
  var p198$1: bool;
  var p198$2: bool;
  var p199$1: bool;
  var p199$2: bool;
  var p200$1: bool;
  var p200$2: bool;
  var p201$1: bool;
  var p201$2: bool;
  var p202$1: bool;
  var p202$2: bool;
  var p203$1: bool;
  var p203$2: bool;
  var p204$1: bool;
  var p204$2: bool;
  var p205$1: bool;
  var p205$2: bool;
  var p206$1: bool;
  var p206$2: bool;
  var p207$1: bool;
  var p207$2: bool;
  var p208$1: bool;
  var p208$2: bool;
  var p209$1: bool;
  var p209$2: bool;
  var p210$1: bool;
  var p210$2: bool;
  var p211$1: bool;
  var p211$2: bool;
  var p212$1: bool;
  var p212$2: bool;
  var p213$1: bool;
  var p213$2: bool;
  var p214$1: bool;
  var p214$2: bool;
  var p215$1: bool;
  var p215$2: bool;
  var p216$1: bool;
  var p216$2: bool;
  var p217$1: bool;
  var p217$2: bool;
  var p218$1: bool;
  var p218$2: bool;
  var p219$1: bool;
  var p219$2: bool;
  var p220$1: bool;
  var p220$2: bool;
  var p221$1: bool;
  var p221$2: bool;
  var p222$1: bool;
  var p222$2: bool;
  var p223$1: bool;
  var p223$2: bool;
  var p224$1: bool;
  var p224$2: bool;
  var p225$1: bool;
  var p225$2: bool;
  var p226$1: bool;
  var p226$2: bool;
  var p227$1: bool;
  var p227$2: bool;
  var p228$1: bool;
  var p228$2: bool;
  var p229$1: bool;
  var p229$2: bool;
  var p230$1: bool;
  var p230$2: bool;
  var p231$1: bool;
  var p231$2: bool;
  var p232$1: bool;
  var p232$2: bool;
  var p233$1: bool;
  var p233$2: bool;
  var p234$1: bool;
  var p234$2: bool;
  var p235$1: bool;
  var p235$2: bool;
  var p236$1: bool;
  var p236$2: bool;
  var p237$1: bool;
  var p237$2: bool;
  var p238$1: bool;
  var p238$2: bool;
  var p239$1: bool;
  var p239$2: bool;
  var p240$1: bool;
  var p240$2: bool;
  var p241$1: bool;
  var p241$2: bool;
  var p242$1: bool;
  var p242$2: bool;
  var p243$1: bool;
  var p243$2: bool;
  var p244$1: bool;
  var p244$2: bool;
  var p245$1: bool;
  var p245$2: bool;
  var p246$1: bool;
  var p246$2: bool;
  var p247$1: bool;
  var p247$2: bool;
  var p248$1: bool;
  var p248$2: bool;
  var p249$1: bool;
  var p249$2: bool;
  var p250$1: bool;
  var p250$2: bool;
  var p251$1: bool;
  var p251$2: bool;
  var p252$1: bool;
  var p252$2: bool;
  var p253$1: bool;
  var p253$2: bool;
  var _HAVOC_bv128$1: bv128;
  var _HAVOC_bv128$2: bv128;
  var _HAVOC_bv8$1: bv8;
  var _HAVOC_bv8$2: bv8;
  var _READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights$ghost$__partitioned_block_$11_0: bool;
  var _READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights$ghost$__partitioned_block_$13_0: bool;


  __partitioned_block_$0_0:
    b120 := false;
    b119 := false;
    b118 := false;
    b117 := false;
    b116 := false;
    b115 := false;
    b114 := false;
    b113 := true;
    b112 := false;
    b111 := false;
    b110 := false;
    b109 := false;
    b108 := false;
    b107 := false;
    b106 := false;
    b105 := false;
    b104 := false;
    b103 := false;
    b102 := false;
    b101 := false;
    b100 := false;
    b99 := false;
    b98 := false;
    b97 := false;
    b96 := false;
    b95 := false;
    b94 := false;
    b93 := false;
    b92 := false;
    b91 := false;
    b90 := false;
    b89 := false;
    b88 := false;
    b87 := false;
    b86 := false;
    b85 := false;
    b84 := false;
    b83 := false;
    b82 := false;
    b81 := false;
    b80 := false;
    b79 := false;
    b78 := false;
    b77 := false;
    b76 := false;
    b75 := false;
    b74 := false;
    b73 := false;
    b72 := false;
    b71 := false;
    b70 := false;
    b69 := false;
    b68 := false;
    b67 := false;
    b66 := false;
    b65 := false;
    b64 := false;
    b63 := false;
    b62 := false;
    b61 := false;
    b60 := false;
    b59 := false;
    b58 := false;
    b57 := false;
    b56 := false;
    b55 := false;
    b54 := false;
    b53 := false;
    b52 := false;
    b51 := false;
    b50 := false;
    b49 := false;
    b48 := false;
    b47 := false;
    b46 := false;
    b45 := false;
    b44 := false;
    b43 := false;
    b42 := false;
    b41 := false;
    b40 := false;
    b39 := false;
    b38 := false;
    b37 := false;
    b36 := false;
    b35 := false;
    b34 := false;
    b33 := false;
    b32 := false;
    b31 := false;
    b30 := false;
    b29 := false;
    b28 := false;
    b27 := false;
    b26 := false;
    b25 := false;
    b24 := false;
    b23 := false;
    b22 := false;
    b21 := false;
    b20 := false;
    b19 := false;
    b18 := false;
    b17 := false;
    b16 := false;
    b15 := false;
    b14 := false;
    b13 := false;
    b12 := false;
    b11 := false;
    b10 := false;
    b9 := false;
    b8 := false;
    b7 := false;
    b6 := false;
    b5 := false;
    b4 := false;
    b3 := false;
    b2 := false;
    b1 := false;
    v0$1 := BV32_ADD(BV32_MUL(group_size_x, group_id_x$1), local_id_x$1);
    v0$2 := BV32_ADD(BV32_MUL(group_size_x, group_id_x$2), local_id_x$2);
    v1$1 := BV32_ADD(BV32_MUL(group_size_y, group_id_y$1), local_id_y$1);
    v1$2 := BV32_ADD(BV32_MUL(group_size_y, group_id_y$2), local_id_y$2);
    v2$1 := FADD32(SI32_TO_FP32(v0$1), 1056964608bv32);
    v2$2 := FADD32(SI32_TO_FP32(v0$2), 1056964608bv32);
    v3$1 := FADD32(SI32_TO_FP32(v1$1), 1056964608bv32);
    v3$2 := FADD32(SI32_TO_FP32(v1$2), 1056964608bv32);
    v4$1 := BV32_SLT(v0$1, $imageW);
    v4$2 := BV32_SLT(v0$2, $imageW);
    p0$1 := false;
    p0$2 := false;
    p1$1 := false;
    p1$2 := false;
    p2$1 := false;
    p2$2 := false;
    p3$1 := false;
    p3$2 := false;
    p4$1 := false;
    p4$2 := false;
    p5$1 := false;
    p5$2 := false;
    p6$1 := false;
    p6$2 := false;
    p126$1 := false;
    p126$2 := false;
    p248$1 := false;
    p248$2 := false;
    p249$1 := false;
    p249$2 := false;
    p250$1 := false;
    p250$2 := false;
    p251$1 := false;
    p251$2 := false;
    p252$1 := false;
    p252$2 := false;
    p253$1 := false;
    p253$2 := false;
    p0$1 := (if v4$1 then v4$1 else p0$1);
    p0$2 := (if v4$2 then v4$2 else p0$2);
    v5$1 := (if p0$1 then BV32_SLT(v1$1, $imageH) else v5$1);
    v5$2 := (if p0$2 then BV32_SLT(v1$2, $imageH) else v5$2);
    p1$1 := (if p0$1 && v5$1 then v5$1 else p1$1);
    p1$2 := (if p0$2 && v5$2 then v5$2 else p1$2);
    p2$1 := (if p1$1 && b105 then b105 else p2$1);
    p2$2 := (if p1$2 && b105 then b105 else p2$2);
    call {:repair_barrier "b105"} {:repair_instrumented} {:sourceloc_num 4} $bugle_barrier_duplicated_119(1bv1, 1bv1, p2$1, p2$2);
    p4$1 := (if p1$1 && b106 then b106 else p4$1);
    p4$2 := (if p1$2 && b106 then b106 else p4$2);
    call {:repair_barrier "b106"} {:repair_instrumented} {:sourceloc_num 4} $bugle_grid_barrier_duplicated_118(p4$1, p4$2);
    havoc _HAVOC_bv128$1, _HAVOC_bv128$2;
    v6$1 := (if p1$1 then _HAVOC_bv128$1 else v6$1);
    v6$2 := (if p1$2 then _HAVOC_bv128$2 else v6$2);
    havoc _HAVOC_bv128$1, _HAVOC_bv128$2;
    v7$1 := (if p1$1 then _HAVOC_bv128$1 else v7$1);
    v7$2 := (if p1$2 then _HAVOC_bv128$2 else v7$2);
    $.012$1, $.06$1, $.09$1, $.08$1 := (if p1$1 then v6$1 else $.012$1), (if p1$1 then v7$1 else $.06$1), (if p1$1 then 0bv32 else $.09$1), (if p1$1 then 3225419776bv32 else $.08$1);
    $.012$2, $.06$2, $.09$2, $.08$2 := (if p1$2 then v6$2 else $.012$2), (if p1$2 then v7$2 else $.06$2), (if p1$2 then 0bv32 else $.09$2), (if p1$2 then 3225419776bv32 else $.08$2);
    p6$1 := (if p1$1 then true else p6$1);
    p6$2 := (if p1$2 then true else p6$2);
    assume {:captureState "loop_entry_state_2_0"} true;
    goto __partitioned_block_$3_0;

  __partitioned_block_$3_0:
    assume {:captureState "loop_head_state_2"} true;
    assume {:tag "predicatedEquality"} true ==> p6$1 && p6$2 ==> $.08$1 == $.08$2;
    assume {:tag "loopPredicateEquality"} true
       ==> 
      group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> (p6$1 <==> p6$2);
    assume {:tag "loopPredicateEquality"} true ==> (p6$1 <==> p6$2);
    assert {:tag "groupSharedArraysDisjointAcrossGroups"} _ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights
       ==> group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2;
    assert {:tag "groupSharedArraysDisjointAcrossGroups"} _WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights
       ==> group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2;
    assert {:tag "groupSharedArraysDisjointAcrossGroups"} _READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights
       ==> group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2;
    assume {:predicate "p6"} {:dominator_predicate "p1"} true;
    assume {:tag "conditionsImpliedByEnabledness"} {:thread 1} p6$1
       ==> 
      true
       ==> 
      p6$1
       ==> BV32_SLT(BV32_ADD(BV32_MUL(group_size_x, group_id_x$1), local_id_x$1), $imageW)
         && BV32_SLT(BV32_ADD(BV32_MUL(group_size_y, group_id_y$1), local_id_y$1), $imageH);
    assume {:tag "conditionsImpliedByEnabledness"} {:thread 2} p6$2
       ==> 
      true
       ==> 
      p6$2
       ==> BV32_SLT(BV32_ADD(BV32_MUL(group_size_x, group_id_x$2), local_id_x$2), $imageW)
         && BV32_SLT(BV32_ADD(BV32_MUL(group_size_y, group_id_y$2), local_id_y$2), $imageH);
    p7$1 := false;
    p7$2 := false;
    p8$1 := false;
    p8$2 := false;
    p9$1 := false;
    p9$2 := false;
    p10$1 := false;
    p10$2 := false;
    p11$1 := false;
    p11$2 := false;
    p12$1 := false;
    p12$2 := false;
    p13$1 := false;
    p13$2 := false;
    p14$1 := false;
    p14$2 := false;
    p15$1 := false;
    p15$2 := false;
    p16$1 := false;
    p16$2 := false;
    p118$1 := false;
    p118$2 := false;
    p119$1 := false;
    p119$2 := false;
    p120$1 := false;
    p120$2 := false;
    p121$1 := false;
    p121$2 := false;
    p122$1 := false;
    p122$2 := false;
    p123$1 := false;
    p123$2 := false;
    p124$1 := false;
    p124$2 := false;
    p125$1 := false;
    p125$2 := false;
    p8$1 := (if p6$1 && b103 then b103 else p8$1);
    p8$2 := (if p6$2 && b103 then b103 else p8$2);
    call {:repair_barrier "b103"} {:repair_instrumented} {:sourceloc_num 5} $bugle_barrier_duplicated_117(1bv1, 1bv1, p8$1, p8$2);
    p10$1 := (if p6$1 && b104 then b104 else p10$1);
    p10$2 := (if p6$2 && b104 then b104 else p10$2);
    call {:repair_barrier "b104"} {:repair_instrumented} {:sourceloc_num 5} $bugle_grid_barrier_duplicated_116(p10$1, p10$2);
    v8$1 := (if p6$1
       then FEQ32($.08$1, 1077936128bv32) || FLT32($.08$1, 1077936128bv32)
       else v8$1);
    v8$2 := (if p6$2
       then FEQ32($.08$2, 1077936128bv32) || FLT32($.08$2, 1077936128bv32)
       else v8$2);
    p11$1 := (if p6$1 && v8$1 then v8$1 else p11$1);
    p11$2 := (if p6$2 && v8$2 then v8$2 else p11$2);
    p6$1 := (if p6$1 && !v8$1 then v8$1 else p6$1);
    p6$2 := (if p6$2 && !v8$2 then v8$2 else p6$2);
    p13$1 := (if p11$1 && b109 then b109 else p13$1);
    p13$2 := (if p11$2 && b109 then b109 else p13$2);
    call {:repair_barrier "b109"} {:repair_instrumented} {:sourceloc_num 6} $bugle_barrier_duplicated_115(1bv1, 1bv1, p13$1, p13$2);
    p15$1 := (if p11$1 && b110 then b110 else p15$1);
    p15$2 := (if p11$2 && b110 then b110 else p15$2);
    call {:repair_barrier "b110"} {:repair_instrumented} {:sourceloc_num 6} $bugle_grid_barrier_duplicated_114(p15$1, p15$2);
    $.113$1, $.17$1, $.110$1, $.07$1 := (if p11$1 then $.012$1 else $.113$1), (if p11$1 then $.06$1 else $.17$1), (if p11$1 then $.09$1 else $.110$1), (if p11$1 then 3225419776bv32 else $.07$1);
    $.113$2, $.17$2, $.110$2, $.07$2 := (if p11$2 then $.012$2 else $.113$2), (if p11$2 then $.06$2 else $.17$2), (if p11$2 then $.09$2 else $.110$2), (if p11$2 then 3225419776bv32 else $.07$2);
    p16$1 := (if p11$1 then true else p16$1);
    p16$2 := (if p11$2 then true else p16$2);
    assume {:captureState "loop_entry_state_3_0"} true;
    goto __partitioned_block_$5_0;

  __partitioned_block_$5_0:
    assume {:captureState "loop_head_state_3"} true;
    assume {:tag "predicatedEquality"} true ==> p16$1 && p16$2 ==> $.07$1 == $.07$2;
    assume {:tag "loopPredicateEquality"} true
       ==> 
      group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> (p16$1 <==> p16$2);
    assume {:tag "loopPredicateEquality"} true ==> (p16$1 <==> p16$2);
    assert {:tag "groupSharedArraysDisjointAcrossGroups"} _ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights
       ==> group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2;
    assert {:tag "groupSharedArraysDisjointAcrossGroups"} _WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights
       ==> group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2;
    assert {:tag "groupSharedArraysDisjointAcrossGroups"} _READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights
       ==> group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2;
    assume {:predicate "p16"} {:dominator_predicate "p11"} true;
    assert p16$1 ==> p6$1;
    assert p16$2 ==> p6$2;
    assume {:tag "conditionsImpliedByEnabledness"} {:thread 1} p16$1
       ==> 
      true
       ==> 
      p16$1
       ==> BV32_SLT(BV32_ADD(BV32_MUL(group_size_x, group_id_x$1), local_id_x$1), $imageW)
         && BV32_SLT(BV32_ADD(BV32_MUL(group_size_y, group_id_y$1), local_id_y$1), $imageH);
    assume {:tag "conditionsImpliedByEnabledness"} {:thread 2} p16$2
       ==> 
      true
       ==> 
      p16$2
       ==> BV32_SLT(BV32_ADD(BV32_MUL(group_size_x, group_id_x$2), local_id_x$2), $imageW)
         && BV32_SLT(BV32_ADD(BV32_MUL(group_size_y, group_id_y$2), local_id_y$2), $imageH);
    p17$1 := false;
    p17$2 := false;
    p18$1 := false;
    p18$2 := false;
    p19$1 := false;
    p19$2 := false;
    p20$1 := false;
    p20$2 := false;
    p21$1 := false;
    p21$2 := false;
    p22$1 := false;
    p22$2 := false;
    p23$1 := false;
    p23$2 := false;
    p24$1 := false;
    p24$2 := false;
    p25$1 := false;
    p25$2 := false;
    p26$1 := false;
    p26$2 := false;
    p27$1 := false;
    p27$2 := false;
    p28$1 := false;
    p28$2 := false;
    p29$1 := false;
    p29$2 := false;
    p30$1 := false;
    p30$2 := false;
    p31$1 := false;
    p31$2 := false;
    p32$1 := false;
    p32$2 := false;
    p33$1 := false;
    p33$2 := false;
    p34$1 := false;
    p34$2 := false;
    p35$1 := false;
    p35$2 := false;
    p36$1 := false;
    p36$2 := false;
    p37$1 := false;
    p37$2 := false;
    p38$1 := false;
    p38$2 := false;
    p39$1 := false;
    p39$2 := false;
    p40$1 := false;
    p40$2 := false;
    p41$1 := false;
    p41$2 := false;
    p42$1 := false;
    p42$2 := false;
    p43$1 := false;
    p43$2 := false;
    p44$1 := false;
    p44$2 := false;
    p45$1 := false;
    p45$2 := false;
    p46$1 := false;
    p46$2 := false;
    p47$1 := false;
    p47$2 := false;
    p48$1 := false;
    p48$2 := false;
    p49$1 := false;
    p49$2 := false;
    p50$1 := false;
    p50$2 := false;
    p51$1 := false;
    p51$2 := false;
    p52$1 := false;
    p52$2 := false;
    p53$1 := false;
    p53$2 := false;
    p54$1 := false;
    p54$2 := false;
    p55$1 := false;
    p55$2 := false;
    p56$1 := false;
    p56$2 := false;
    p57$1 := false;
    p57$2 := false;
    p58$1 := false;
    p58$2 := false;
    p59$1 := false;
    p59$2 := false;
    p60$1 := false;
    p60$2 := false;
    p61$1 := false;
    p61$2 := false;
    p62$1 := false;
    p62$2 := false;
    p63$1 := false;
    p63$2 := false;
    p64$1 := false;
    p64$2 := false;
    p65$1 := false;
    p65$2 := false;
    p66$1 := false;
    p66$2 := false;
    p67$1 := false;
    p67$2 := false;
    p68$1 := false;
    p68$2 := false;
    p69$1 := false;
    p69$2 := false;
    p70$1 := false;
    p70$2 := false;
    p71$1 := false;
    p71$2 := false;
    p72$1 := false;
    p72$2 := false;
    p73$1 := false;
    p73$2 := false;
    p74$1 := false;
    p74$2 := false;
    p75$1 := false;
    p75$2 := false;
    p76$1 := false;
    p76$2 := false;
    p77$1 := false;
    p77$2 := false;
    p78$1 := false;
    p78$2 := false;
    p79$1 := false;
    p79$2 := false;
    p80$1 := false;
    p80$2 := false;
    p81$1 := false;
    p81$2 := false;
    p82$1 := false;
    p82$2 := false;
    p83$1 := false;
    p83$2 := false;
    p84$1 := false;
    p84$2 := false;
    p85$1 := false;
    p85$2 := false;
    p86$1 := false;
    p86$2 := false;
    p87$1 := false;
    p87$2 := false;
    p88$1 := false;
    p88$2 := false;
    p89$1 := false;
    p89$2 := false;
    p90$1 := false;
    p90$2 := false;
    p91$1 := false;
    p91$2 := false;
    p92$1 := false;
    p92$2 := false;
    p93$1 := false;
    p93$2 := false;
    p94$1 := false;
    p94$2 := false;
    p95$1 := false;
    p95$2 := false;
    p96$1 := false;
    p96$2 := false;
    p97$1 := false;
    p97$2 := false;
    p98$1 := false;
    p98$2 := false;
    p99$1 := false;
    p99$2 := false;
    p100$1 := false;
    p100$2 := false;
    p101$1 := false;
    p101$2 := false;
    p102$1 := false;
    p102$2 := false;
    p103$1 := false;
    p103$2 := false;
    p104$1 := false;
    p104$2 := false;
    p105$1 := false;
    p105$2 := false;
    p106$1 := false;
    p106$2 := false;
    p107$1 := false;
    p107$2 := false;
    p108$1 := false;
    p108$2 := false;
    p109$1 := false;
    p109$2 := false;
    p110$1 := false;
    p110$2 := false;
    p111$1 := false;
    p111$2 := false;
    p112$1 := false;
    p112$2 := false;
    p113$1 := false;
    p113$2 := false;
    p114$1 := false;
    p114$2 := false;
    p115$1 := false;
    p115$2 := false;
    p116$1 := false;
    p116$2 := false;
    p117$1 := false;
    p117$2 := false;
    p18$1 := (if p16$1 && b107 then b107 else p18$1);
    p18$2 := (if p16$2 && b107 then b107 else p18$2);
    call {:repair_barrier "b107"} {:repair_instrumented} {:sourceloc_num 7} $bugle_barrier_duplicated_113(1bv1, 1bv1, p18$1, p18$2);
    p20$1 := (if p16$1 && b108 then b108 else p20$1);
    p20$2 := (if p16$2 && b108 then b108 else p20$2);
    call {:repair_barrier "b108"} {:repair_instrumented} {:sourceloc_num 7} $bugle_grid_barrier_duplicated_112(p20$1, p20$2);
    v9$1 := (if p16$1
       then FEQ32($.07$1, 1077936128bv32) || FLT32($.07$1, 1077936128bv32)
       else v9$1);
    v9$2 := (if p16$2
       then FEQ32($.07$2, 1077936128bv32) || FLT32($.07$2, 1077936128bv32)
       else v9$2);
    p21$1 := (if p16$1 && v9$1 then v9$1 else p21$1);
    p21$2 := (if p16$2 && v9$2 then v9$2 else p21$2);
    p16$1 := (if p16$1 && !v9$1 then v9$1 else p16$1);
    p16$2 := (if p16$2 && !v9$2 then v9$2 else p16$2);
    p23$1 := (if p21$1 && b1 then b1 else p23$1);
    p23$2 := (if p21$2 && b1 then b1 else p23$2);
    call {:repair_barrier "b1"} {:repair_instrumented} {:sourceloc_num 9} $bugle_barrier_duplicated_111(1bv1, 1bv1, p23$1, p23$2);
    p25$1 := (if p21$1 && b2 then b2 else p25$1);
    p25$2 := (if p21$2 && b2 then b2 else p25$2);
    call {:repair_barrier "b2"} {:repair_instrumented} {:sourceloc_num 9} $bugle_grid_barrier_duplicated_110(p25$1, p25$2);
    havoc _HAVOC_bv8$1, _HAVOC_bv8$2;
    v10$1 := (if p21$1 then _HAVOC_bv8$1 else v10$1);
    v10$2 := (if p21$2 then _HAVOC_bv8$2 else v10$2);
    p27$1 := (if p21$1 && b9 then b9 else p27$1);
    p27$2 := (if p21$2 && b9 then b9 else p27$2);
    call {:repair_barrier "b9"} {:repair_instrumented} {:sourceloc_num 10} $bugle_barrier_duplicated_109(1bv1, 1bv1, p27$1, p27$2);
    p29$1 := (if p21$1 && b10 then b10 else p29$1);
    p29$2 := (if p21$2 && b10 then b10 else p29$2);
    call {:repair_barrier "b10"} {:repair_instrumented} {:sourceloc_num 10} $bugle_grid_barrier_duplicated_108(p29$1, p29$2);
    havoc _HAVOC_bv8$1, _HAVOC_bv8$2;
    v11$1 := (if p21$1 then _HAVOC_bv8$1 else v11$1);
    v11$2 := (if p21$2 then _HAVOC_bv8$2 else v11$2);
    p31$1 := (if p21$1 && b15 then b15 else p31$1);
    p31$2 := (if p21$2 && b15 then b15 else p31$2);
    call {:repair_barrier "b15"} {:repair_instrumented} {:sourceloc_num 11} $bugle_barrier_duplicated_107(1bv1, 1bv1, p31$1, p31$2);
    p33$1 := (if p21$1 && b16 then b16 else p33$1);
    p33$2 := (if p21$2 && b16 then b16 else p33$2);
    call {:repair_barrier "b16"} {:repair_instrumented} {:sourceloc_num 11} $bugle_grid_barrier_duplicated_106(p33$1, p33$2);
    havoc _HAVOC_bv8$1, _HAVOC_bv8$2;
    v12$1 := (if p21$1 then _HAVOC_bv8$1 else v12$1);
    v12$2 := (if p21$2 then _HAVOC_bv8$2 else v12$2);
    p35$1 := (if p21$1 && b21 then b21 else p35$1);
    p35$2 := (if p21$2 && b21 then b21 else p35$2);
    call {:repair_barrier "b21"} {:repair_instrumented} {:sourceloc_num 12} $bugle_barrier_duplicated_105(1bv1, 1bv1, p35$1, p35$2);
    p37$1 := (if p21$1 && b22 then b22 else p37$1);
    p37$2 := (if p21$2 && b22 then b22 else p37$2);
    call {:repair_barrier "b22"} {:repair_instrumented} {:sourceloc_num 12} $bugle_grid_barrier_duplicated_104(p37$1, p37$2);
    havoc _HAVOC_bv8$1, _HAVOC_bv8$2;
    v13$1 := (if p21$1 then _HAVOC_bv8$1 else v13$1);
    v13$2 := (if p21$2 then _HAVOC_bv8$2 else v13$2);
    p39$1 := (if p21$1 && b27 then b27 else p39$1);
    p39$2 := (if p21$2 && b27 then b27 else p39$2);
    call {:repair_barrier "b27"} {:repair_instrumented} {:sourceloc_num 13} $bugle_barrier_duplicated_103(1bv1, 1bv1, p39$1, p39$2);
    p41$1 := (if p21$1 && b28 then b28 else p41$1);
    p41$2 := (if p21$2 && b28 then b28 else p41$2);
    call {:repair_barrier "b28"} {:repair_instrumented} {:sourceloc_num 13} $bugle_grid_barrier_duplicated_102(p41$1, p41$2);
    havoc _HAVOC_bv8$1, _HAVOC_bv8$2;
    v14$1 := (if p21$1 then _HAVOC_bv8$1 else v14$1);
    v14$2 := (if p21$2 then _HAVOC_bv8$2 else v14$2);
    p43$1 := (if p21$1 && b33 then b33 else p43$1);
    p43$2 := (if p21$2 && b33 then b33 else p43$2);
    call {:repair_barrier "b33"} {:repair_instrumented} {:sourceloc_num 14} $bugle_barrier_duplicated_101(1bv1, 1bv1, p43$1, p43$2);
    p45$1 := (if p21$1 && b34 then b34 else p45$1);
    p45$2 := (if p21$2 && b34 then b34 else p45$2);
    call {:repair_barrier "b34"} {:repair_instrumented} {:sourceloc_num 14} $bugle_grid_barrier_duplicated_100(p45$1, p45$2);
    havoc _HAVOC_bv8$1, _HAVOC_bv8$2;
    v15$1 := (if p21$1 then _HAVOC_bv8$1 else v15$1);
    v15$2 := (if p21$2 then _HAVOC_bv8$2 else v15$2);
    p47$1 := (if p21$1 && b39 then b39 else p47$1);
    p47$2 := (if p21$2 && b39 then b39 else p47$2);
    call {:repair_barrier "b39"} {:repair_instrumented} {:sourceloc_num 15} $bugle_barrier_duplicated_99(1bv1, 1bv1, p47$1, p47$2);
    p49$1 := (if p21$1 && b40 then b40 else p49$1);
    p49$2 := (if p21$2 && b40 then b40 else p49$2);
    call {:repair_barrier "b40"} {:repair_instrumented} {:sourceloc_num 15} $bugle_grid_barrier_duplicated_98(p49$1, p49$2);
    havoc _HAVOC_bv8$1, _HAVOC_bv8$2;
    v16$1 := (if p21$1 then _HAVOC_bv8$1 else v16$1);
    v16$2 := (if p21$2 then _HAVOC_bv8$2 else v16$2);
    p51$1 := (if p21$1 && b45 then b45 else p51$1);
    p51$2 := (if p21$2 && b45 then b45 else p51$2);
    call {:repair_barrier "b45"} {:repair_instrumented} {:sourceloc_num 16} $bugle_barrier_duplicated_97(1bv1, 1bv1, p51$1, p51$2);
    p53$1 := (if p21$1 && b46 then b46 else p53$1);
    p53$2 := (if p21$2 && b46 then b46 else p53$2);
    call {:repair_barrier "b46"} {:repair_instrumented} {:sourceloc_num 16} $bugle_grid_barrier_duplicated_96(p53$1, p53$2);
    havoc _HAVOC_bv8$1, _HAVOC_bv8$2;
    v17$1 := (if p21$1 then _HAVOC_bv8$1 else v17$1);
    v17$2 := (if p21$2 then _HAVOC_bv8$2 else v17$2);
    p55$1 := (if p21$1 && b51 then b51 else p55$1);
    p55$2 := (if p21$2 && b51 then b51 else p55$2);
    call {:repair_barrier "b51"} {:repair_instrumented} {:sourceloc_num 17} $bugle_barrier_duplicated_95(1bv1, 1bv1, p55$1, p55$2);
    p57$1 := (if p21$1 && b52 then b52 else p57$1);
    p57$2 := (if p21$2 && b52 then b52 else p57$2);
    call {:repair_barrier "b52"} {:repair_instrumented} {:sourceloc_num 17} $bugle_grid_barrier_duplicated_94(p57$1, p57$2);
    havoc _HAVOC_bv8$1, _HAVOC_bv8$2;
    v18$1 := (if p21$1 then _HAVOC_bv8$1 else v18$1);
    v18$2 := (if p21$2 then _HAVOC_bv8$2 else v18$2);
    p59$1 := (if p21$1 && b57 then b57 else p59$1);
    p59$2 := (if p21$2 && b57 then b57 else p59$2);
    call {:repair_barrier "b57"} {:repair_instrumented} {:sourceloc_num 18} $bugle_barrier_duplicated_93(1bv1, 1bv1, p59$1, p59$2);
    p61$1 := (if p21$1 && b58 then b58 else p61$1);
    p61$2 := (if p21$2 && b58 then b58 else p61$2);
    call {:repair_barrier "b58"} {:repair_instrumented} {:sourceloc_num 18} $bugle_grid_barrier_duplicated_92(p61$1, p61$2);
    havoc _HAVOC_bv8$1, _HAVOC_bv8$2;
    v19$1 := (if p21$1 then _HAVOC_bv8$1 else v19$1);
    v19$2 := (if p21$2 then _HAVOC_bv8$2 else v19$2);
    p63$1 := (if p21$1 && b63 then b63 else p63$1);
    p63$2 := (if p21$2 && b63 then b63 else p63$2);
    call {:repair_barrier "b63"} {:repair_instrumented} {:sourceloc_num 19} $bugle_barrier_duplicated_91(1bv1, 1bv1, p63$1, p63$2);
    p65$1 := (if p21$1 && b64 then b64 else p65$1);
    p65$2 := (if p21$2 && b64 then b64 else p65$2);
    call {:repair_barrier "b64"} {:repair_instrumented} {:sourceloc_num 19} $bugle_grid_barrier_duplicated_90(p65$1, p65$2);
    havoc _HAVOC_bv8$1, _HAVOC_bv8$2;
    v20$1 := (if p21$1 then _HAVOC_bv8$1 else v20$1);
    v20$2 := (if p21$2 then _HAVOC_bv8$2 else v20$2);
    p67$1 := (if p21$1 && b69 then b69 else p67$1);
    p67$2 := (if p21$2 && b69 then b69 else p67$2);
    call {:repair_barrier "b69"} {:repair_instrumented} {:sourceloc_num 20} $bugle_barrier_duplicated_89(1bv1, 1bv1, p67$1, p67$2);
    p69$1 := (if p21$1 && b70 then b70 else p69$1);
    p69$2 := (if p21$2 && b70 then b70 else p69$2);
    call {:repair_barrier "b70"} {:repair_instrumented} {:sourceloc_num 20} $bugle_grid_barrier_duplicated_88(p69$1, p69$2);
    havoc _HAVOC_bv8$1, _HAVOC_bv8$2;
    v21$1 := (if p21$1 then _HAVOC_bv8$1 else v21$1);
    v21$2 := (if p21$2 then _HAVOC_bv8$2 else v21$2);
    call {:sourceloc_num 21} v22$1, v22$2 := $_Z5tex2D7textureI6uchar4Li2EL19cudaTextureReadMode1EEff(p21$1, v21$1 ++ v20$1 ++ v19$1 ++ v18$1 ++ v17$1 ++ v16$1 ++ v15$1 ++ v14$1 ++ v13$1 ++ v12$1 ++ v11$1 ++ v10$1, FADD32(FADD32(UI32_TO_FP32(BV32_ADD(BV32_MUL(group_size_x, group_id_x$1), 3bv32)), 
        1056964608bv32), 
      $.07$1), FADD32(FADD32(UI32_TO_FP32(BV32_ADD(BV32_MUL(group_size_x, group_id_y$1), 3bv32)), 
        1056964608bv32), 
      $.08$1), v22$1, p21$2, v21$2 ++ v20$2 ++ v19$2 ++ v18$2 ++ v17$2 ++ v16$2 ++ v15$2 ++ v14$2 ++ v13$2 ++ v12$2 ++ v11$2 ++ v10$2, FADD32(FADD32(UI32_TO_FP32(BV32_ADD(BV32_MUL(group_size_x, group_id_x$2), 3bv32)), 
        1056964608bv32), 
      $.07$2), FADD32(FADD32(UI32_TO_FP32(BV32_ADD(BV32_MUL(group_size_x, group_id_y$2), 3bv32)), 
        1056964608bv32), 
      $.08$2), v22$2);
    assume {:captureState "call_return_state_0"} {:procedureName "$_Z5tex2D7textureI6uchar4Li2EL19cudaTextureReadMode1EEff"} true;
    v23$1 := (if p21$1 then v22$1[32:0] else v23$1);
    v23$2 := (if p21$2 then v22$2[32:0] else v23$2);
    v24$1 := (if p21$1 then v22$1[64:32] else v24$1);
    v24$2 := (if p21$2 then v22$2[64:32] else v24$2);
    v25$1 := (if p21$1 then v22$1[96:64] else v25$1);
    v25$2 := (if p21$2 then v22$2[96:64] else v25$2);
    p71$1 := (if p21$1 && b75 then b75 else p71$1);
    p71$2 := (if p21$2 && b75 then b75 else p71$2);
    call {:repair_barrier "b75"} {:repair_instrumented} {:sourceloc_num 22} $bugle_barrier_duplicated_87(1bv1, 1bv1, p71$1, p71$2);
    p73$1 := (if p21$1 && b76 then b76 else p73$1);
    p73$2 := (if p21$2 && b76 then b76 else p73$2);
    call {:repair_barrier "b76"} {:repair_instrumented} {:sourceloc_num 22} $bugle_grid_barrier_duplicated_86(p73$1, p73$2);
    havoc _HAVOC_bv8$1, _HAVOC_bv8$2;
    v26$1 := (if p21$1 then _HAVOC_bv8$1 else v26$1);
    v26$2 := (if p21$2 then _HAVOC_bv8$2 else v26$2);
    p75$1 := (if p21$1 && b81 then b81 else p75$1);
    p75$2 := (if p21$2 && b81 then b81 else p75$2);
    call {:repair_barrier "b81"} {:repair_instrumented} {:sourceloc_num 23} $bugle_barrier_duplicated_85(1bv1, 1bv1, p75$1, p75$2);
    p77$1 := (if p21$1 && b82 then b82 else p77$1);
    p77$2 := (if p21$2 && b82 then b82 else p77$2);
    call {:repair_barrier "b82"} {:repair_instrumented} {:sourceloc_num 23} $bugle_grid_barrier_duplicated_84(p77$1, p77$2);
    havoc _HAVOC_bv8$1, _HAVOC_bv8$2;
    v27$1 := (if p21$1 then _HAVOC_bv8$1 else v27$1);
    v27$2 := (if p21$2 then _HAVOC_bv8$2 else v27$2);
    p79$1 := (if p21$1 && b83 then b83 else p79$1);
    p79$2 := (if p21$2 && b83 then b83 else p79$2);
    call {:repair_barrier "b83"} {:repair_instrumented} {:sourceloc_num 24} $bugle_barrier_duplicated_83(1bv1, 1bv1, p79$1, p79$2);
    p81$1 := (if p21$1 && b84 then b84 else p81$1);
    p81$2 := (if p21$2 && b84 then b84 else p81$2);
    call {:repair_barrier "b84"} {:repair_instrumented} {:sourceloc_num 24} $bugle_grid_barrier_duplicated_82(p81$1, p81$2);
    havoc _HAVOC_bv8$1, _HAVOC_bv8$2;
    v28$1 := (if p21$1 then _HAVOC_bv8$1 else v28$1);
    v28$2 := (if p21$2 then _HAVOC_bv8$2 else v28$2);
    p83$1 := (if p21$1 && b85 then b85 else p83$1);
    p83$2 := (if p21$2 && b85 then b85 else p83$2);
    call {:repair_barrier "b85"} {:repair_instrumented} {:sourceloc_num 25} $bugle_barrier_duplicated_81(1bv1, 1bv1, p83$1, p83$2);
    p85$1 := (if p21$1 && b86 then b86 else p85$1);
    p85$2 := (if p21$2 && b86 then b86 else p85$2);
    call {:repair_barrier "b86"} {:repair_instrumented} {:sourceloc_num 25} $bugle_grid_barrier_duplicated_80(p85$1, p85$2);
    havoc _HAVOC_bv8$1, _HAVOC_bv8$2;
    v29$1 := (if p21$1 then _HAVOC_bv8$1 else v29$1);
    v29$2 := (if p21$2 then _HAVOC_bv8$2 else v29$2);
    p87$1 := (if p21$1 && b87 then b87 else p87$1);
    p87$2 := (if p21$2 && b87 then b87 else p87$2);
    call {:repair_barrier "b87"} {:repair_instrumented} {:sourceloc_num 26} $bugle_barrier_duplicated_79(1bv1, 1bv1, p87$1, p87$2);
    p89$1 := (if p21$1 && b88 then b88 else p89$1);
    p89$2 := (if p21$2 && b88 then b88 else p89$2);
    call {:repair_barrier "b88"} {:repair_instrumented} {:sourceloc_num 26} $bugle_grid_barrier_duplicated_78(p89$1, p89$2);
    havoc _HAVOC_bv8$1, _HAVOC_bv8$2;
    v30$1 := (if p21$1 then _HAVOC_bv8$1 else v30$1);
    v30$2 := (if p21$2 then _HAVOC_bv8$2 else v30$2);
    p91$1 := (if p21$1 && b89 then b89 else p91$1);
    p91$2 := (if p21$2 && b89 then b89 else p91$2);
    call {:repair_barrier "b89"} {:repair_instrumented} {:sourceloc_num 27} $bugle_barrier_duplicated_77(1bv1, 1bv1, p91$1, p91$2);
    p93$1 := (if p21$1 && b90 then b90 else p93$1);
    p93$2 := (if p21$2 && b90 then b90 else p93$2);
    call {:repair_barrier "b90"} {:repair_instrumented} {:sourceloc_num 27} $bugle_grid_barrier_duplicated_76(p93$1, p93$2);
    havoc _HAVOC_bv8$1, _HAVOC_bv8$2;
    v31$1 := (if p21$1 then _HAVOC_bv8$1 else v31$1);
    v31$2 := (if p21$2 then _HAVOC_bv8$2 else v31$2);
    p95$1 := (if p21$1 && b91 then b91 else p95$1);
    p95$2 := (if p21$2 && b91 then b91 else p95$2);
    call {:repair_barrier "b91"} {:repair_instrumented} {:sourceloc_num 28} $bugle_barrier_duplicated_75(1bv1, 1bv1, p95$1, p95$2);
    p97$1 := (if p21$1 && b92 then b92 else p97$1);
    p97$2 := (if p21$2 && b92 then b92 else p97$2);
    call {:repair_barrier "b92"} {:repair_instrumented} {:sourceloc_num 28} $bugle_grid_barrier_duplicated_74(p97$1, p97$2);
    havoc _HAVOC_bv8$1, _HAVOC_bv8$2;
    v32$1 := (if p21$1 then _HAVOC_bv8$1 else v32$1);
    v32$2 := (if p21$2 then _HAVOC_bv8$2 else v32$2);
    p99$1 := (if p21$1 && b93 then b93 else p99$1);
    p99$2 := (if p21$2 && b93 then b93 else p99$2);
    call {:repair_barrier "b93"} {:repair_instrumented} {:sourceloc_num 29} $bugle_barrier_duplicated_73(1bv1, 1bv1, p99$1, p99$2);
    p101$1 := (if p21$1 && b94 then b94 else p101$1);
    p101$2 := (if p21$2 && b94 then b94 else p101$2);
    call {:repair_barrier "b94"} {:repair_instrumented} {:sourceloc_num 29} $bugle_grid_barrier_duplicated_72(p101$1, p101$2);
    havoc _HAVOC_bv8$1, _HAVOC_bv8$2;
    v33$1 := (if p21$1 then _HAVOC_bv8$1 else v33$1);
    v33$2 := (if p21$2 then _HAVOC_bv8$2 else v33$2);
    p103$1 := (if p21$1 && b95 then b95 else p103$1);
    p103$2 := (if p21$2 && b95 then b95 else p103$2);
    call {:repair_barrier "b95"} {:repair_instrumented} {:sourceloc_num 30} $bugle_barrier_duplicated_71(1bv1, 1bv1, p103$1, p103$2);
    p105$1 := (if p21$1 && b96 then b96 else p105$1);
    p105$2 := (if p21$2 && b96 then b96 else p105$2);
    call {:repair_barrier "b96"} {:repair_instrumented} {:sourceloc_num 30} $bugle_grid_barrier_duplicated_70(p105$1, p105$2);
    havoc _HAVOC_bv8$1, _HAVOC_bv8$2;
    v34$1 := (if p21$1 then _HAVOC_bv8$1 else v34$1);
    v34$2 := (if p21$2 then _HAVOC_bv8$2 else v34$2);
    p107$1 := (if p21$1 && b97 then b97 else p107$1);
    p107$2 := (if p21$2 && b97 then b97 else p107$2);
    call {:repair_barrier "b97"} {:repair_instrumented} {:sourceloc_num 31} $bugle_barrier_duplicated_69(1bv1, 1bv1, p107$1, p107$2);
    p109$1 := (if p21$1 && b98 then b98 else p109$1);
    p109$2 := (if p21$2 && b98 then b98 else p109$2);
    call {:repair_barrier "b98"} {:repair_instrumented} {:sourceloc_num 31} $bugle_grid_barrier_duplicated_68(p109$1, p109$2);
    havoc _HAVOC_bv8$1, _HAVOC_bv8$2;
    v35$1 := (if p21$1 then _HAVOC_bv8$1 else v35$1);
    v35$2 := (if p21$2 then _HAVOC_bv8$2 else v35$2);
    p111$1 := (if p21$1 && b99 then b99 else p111$1);
    p111$2 := (if p21$2 && b99 then b99 else p111$2);
    call {:repair_barrier "b99"} {:repair_instrumented} {:sourceloc_num 32} $bugle_barrier_duplicated_67(1bv1, 1bv1, p111$1, p111$2);
    p113$1 := (if p21$1 && b100 then b100 else p113$1);
    p113$2 := (if p21$2 && b100 then b100 else p113$2);
    call {:repair_barrier "b100"} {:repair_instrumented} {:sourceloc_num 32} $bugle_grid_barrier_duplicated_66(p113$1, p113$2);
    havoc _HAVOC_bv8$1, _HAVOC_bv8$2;
    v36$1 := (if p21$1 then _HAVOC_bv8$1 else v36$1);
    v36$2 := (if p21$2 then _HAVOC_bv8$2 else v36$2);
    p115$1 := (if p21$1 && b101 then b101 else p115$1);
    p115$2 := (if p21$2 && b101 then b101 else p115$2);
    call {:repair_barrier "b101"} {:repair_instrumented} {:sourceloc_num 33} $bugle_barrier_duplicated_65(1bv1, 1bv1, p115$1, p115$2);
    p117$1 := (if p21$1 && b102 then b102 else p117$1);
    p117$2 := (if p21$2 && b102 then b102 else p117$2);
    call {:repair_barrier "b102"} {:repair_instrumented} {:sourceloc_num 33} $bugle_grid_barrier_duplicated_64(p117$1, p117$2);
    havoc _HAVOC_bv8$1, _HAVOC_bv8$2;
    v37$1 := (if p21$1 then _HAVOC_bv8$1 else v37$1);
    v37$2 := (if p21$2 then _HAVOC_bv8$2 else v37$2);
    call {:sourceloc_num 34} v38$1, v38$2 := $_Z5tex2D7textureI6uchar4Li2EL19cudaTextureReadMode1EEff(p21$1, v37$1 ++ v36$1 ++ v35$1 ++ v34$1 ++ v33$1 ++ v32$1 ++ v31$1 ++ v30$1 ++ v29$1 ++ v28$1 ++ v27$1 ++ v26$1, FADD32(v2$1, $.07$1), FADD32(v3$1, $.08$1), v38$1, p21$2, v37$2 ++ v36$2 ++ v35$2 ++ v34$2 ++ v33$2 ++ v32$2 ++ v31$2 ++ v30$2 ++ v29$2 ++ v28$2 ++ v27$2 ++ v26$2, FADD32(v2$2, $.07$2), FADD32(v3$2, $.08$2), v38$2);
    assume {:captureState "call_return_state_0"} {:procedureName "$_Z5tex2D7textureI6uchar4Li2EL19cudaTextureReadMode1EEff"} true;
    v39$1 := (if p21$1 then v38$1[32:0] else v39$1);
    v39$2 := (if p21$2 then v38$2[32:0] else v39$2);
    v40$1 := (if p21$1 then v38$1[64:32] else v40$1);
    v40$2 := (if p21$2 then v38$2[64:32] else v40$2);
    v41$1 := (if p21$1 then v38$1[96:64] else v41$1);
    v41$2 := (if p21$2 then v38$2[96:64] else v41$2);
    $.113$1, $.17$1, $.110$1, $.07$1 := (if p21$1 then v38$1[128:96] ++ (v41$1 ++ (v40$1 ++ v39$1)) else $.113$1), (if p21$1 then v22$1[128:96] ++ (v25$1 ++ (v24$1 ++ v23$1)) else $.17$1), (if p21$1
       then FADD32($.110$1, 
        FADD32(FADD32(FMUL32(FSUB32(v39$1, v23$1), FSUB32(v39$1, v23$1)), 
            FMUL32(FSUB32(v40$1, v24$1), FSUB32(v40$1, v24$1))), 
          FMUL32(FSUB32(v41$1, v25$1), FSUB32(v41$1, v25$1))))
       else $.110$1), (if p21$1 then FADD32($.07$1, 1065353216bv32) else $.07$1);
    $.113$2, $.17$2, $.110$2, $.07$2 := (if p21$2 then v38$2[128:96] ++ (v41$2 ++ (v40$2 ++ v39$2)) else $.113$2), (if p21$2 then v22$2[128:96] ++ (v25$2 ++ (v24$2 ++ v23$2)) else $.17$2), (if p21$2
       then FADD32($.110$2, 
        FADD32(FADD32(FMUL32(FSUB32(v39$2, v23$2), FSUB32(v39$2, v23$2)), 
            FMUL32(FSUB32(v40$2, v24$2), FSUB32(v40$2, v24$2))), 
          FMUL32(FSUB32(v41$2, v25$2), FSUB32(v41$2, v25$2))))
       else $.110$2), (if p21$2 then FADD32($.07$2, 1065353216bv32) else $.07$2);
    p16$1 := (if p21$1 then true else p16$1);
    p16$2 := (if p21$2 then true else p16$2);
    goto $5.backedge, $5.tail;

  $5.tail:
    assume !p16$1 && !p16$2;
    $.012$1, $.06$1, $.09$1, $.08$1 := (if p11$1 then $.113$1 else $.012$1), (if p11$1 then $.17$1 else $.06$1), (if p11$1 then $.110$1 else $.09$1), (if p11$1 then FADD32($.08$1, 1065353216bv32) else $.08$1);
    $.012$2, $.06$2, $.09$2, $.08$2 := (if p11$2 then $.113$2 else $.012$2), (if p11$2 then $.17$2 else $.06$2), (if p11$2 then $.110$2 else $.09$2), (if p11$2 then FADD32($.08$2, 1065353216bv32) else $.08$2);
    p6$1 := (if p11$1 then true else p6$1);
    p6$2 := (if p11$2 then true else p6$2);
    goto $3.backedge, __partitioned_block_$3.tail_0;

  __partitioned_block_$3.tail_0:
    assume !p6$1 && !p6$2;
    call {:sourceloc_num 39} v42$1, v42$2 := $__expf(p1$1, FSUB32(2147483648bv32, 
      FADD32(FMUL32($.09$1, $Noise), 
        FMUL32(UI32_TO_FP32(BV32_ADD(BV32_MUL(BV32_SUB(local_id_x$1, 3bv32), BV32_SUB(local_id_x$1, 3bv32)), 
              BV32_MUL(BV32_SUB(local_id_y$1, 3bv32), BV32_SUB(local_id_y$1, 3bv32)))), 
          1017589509bv32))), v42$1, p1$2, FSUB32(2147483648bv32, 
      FADD32(FMUL32($.09$2, $Noise), 
        FMUL32(UI32_TO_FP32(BV32_ADD(BV32_MUL(BV32_SUB(local_id_x$2, 3bv32), BV32_SUB(local_id_x$2, 3bv32)), 
              BV32_MUL(BV32_SUB(local_id_y$2, 3bv32), BV32_SUB(local_id_y$2, 3bv32)))), 
          1017589509bv32))), v42$2);
    assume {:captureState "call_return_state_0"} {:procedureName "$__expf"} true;
    p118$1 := (if p1$1 && b3 then b3 else p118$1);
    p118$2 := (if p1$2 && b3 then b3 else p118$2);
    call {:repair_barrier "b3"} {:repair_instrumented} {:sourceloc_num 40} $bugle_barrier_duplicated_63(1bv1, 1bv1, p118$1, p118$2);
    p120$1 := (if p1$1 && b4 then b4 else p120$1);
    p120$2 := (if p1$2 && b4 then b4 else p120$2);
    call {:repair_barrier "b4"} {:repair_instrumented} {:sourceloc_num 40} $bugle_grid_barrier_duplicated_62(p120$1, p120$2);
    call {:sourceloc} {:sourceloc_num 40} {:repair_instrumented} _LOG_WRITE_$$_ZZ4NLM2PjiiffE8fWeights(p1$1, BV32_ADD(BV32_MUL(local_id_y$1, 8bv32), local_id_x$1), v42$1, $$_ZZ4NLM2PjiiffE8fWeights[1bv1][BV32_ADD(BV32_MUL(local_id_y$1, 8bv32), local_id_x$1)]);
    call _UPDATE_WRITE_READ_BENIGN_FLAG_$$_ZZ4NLM2PjiiffE8fWeights(p1$2, BV32_ADD(BV32_MUL(local_id_y$2, 8bv32), local_id_x$2));
    assume {:do_not_predicate} {:check_id "check_state_0"} {:captureState "check_state_0"} {:sourceloc} {:sourceloc_num 40} {:repair_instrumented} true;
    call {:check_id "check_state_0"} {:sourceloc} {:sourceloc_num 40} {:repair_instrumented} _CHECK_WRITE_$$_ZZ4NLM2PjiiffE8fWeights(p1$2, BV32_ADD(BV32_MUL(local_id_y$2, 8bv32), local_id_x$2), v42$2);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_WRITE_$$_ZZ4NLM2PjiiffE8fWeights"} true;
    $$_ZZ4NLM2PjiiffE8fWeights[1bv1][BV32_ADD(BV32_MUL(local_id_y$1, 8bv32), local_id_x$1)] := (if p1$1
       then v42$1
       else $$_ZZ4NLM2PjiiffE8fWeights[1bv1][BV32_ADD(BV32_MUL(local_id_y$1, 8bv32), local_id_x$1)]);
    $$_ZZ4NLM2PjiiffE8fWeights[(if group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       then 1bv1
       else 0bv1)][BV32_ADD(BV32_MUL(local_id_y$2, 8bv32), local_id_x$2)] := (if p1$2
       then v42$2
       else $$_ZZ4NLM2PjiiffE8fWeights[(if group_id_x$1 == group_id_x$2
           && group_id_y$1 == group_id_y$2
           && group_id_z$1 == group_id_z$2
         then 1bv1
         else 0bv1)][BV32_ADD(BV32_MUL(local_id_y$2, 8bv32), local_id_x$2)]);
    p122$1 := (if p1$1 && b113 then b113 else p122$1);
    p122$2 := (if p1$2 && b113 then b113 else p122$2);
    call {:repair_barrier "b113"} {:repair_instrumented} {:sourceloc_num 41} $bugle_barrier_duplicated_61(1bv1, 1bv1, p122$1, p122$2);
    p124$1 := (if p1$1 && b114 then b114 else p124$1);
    p124$2 := (if p1$2 && b114 then b114 else p124$2);
    call {:repair_barrier "b114"} {:repair_instrumented} {:sourceloc_num 41} $bugle_grid_barrier_duplicated_60(p124$1, p124$2);
    assert {:sourceloc_num 41} {:repair_instrumented} {:thread 1} p1$1 ==> true;
    assert {:sourceloc_num 41} {:repair_instrumented} {:thread 2} p1$2 ==> true;
    havoc _HAVOC_bv128$1, _HAVOC_bv128$2;
    v43$1 := (if p1$1 then _HAVOC_bv128$1 else v43$1);
    v43$2 := (if p1$2 then _HAVOC_bv128$2 else v43$2);
    $.010$1, $.04$1, $.05$1, $.03$1, $.02$1, $.01$1 := (if p1$1 then 0bv96 else $.010$1), (if p1$1 then v43$1 else $.04$1), (if p1$1 then 0bv32 else $.05$1), (if p1$1 then 0bv32 else $.03$1), (if p1$1 then 0bv32 else $.02$1), (if p1$1 then 3225419776bv32 else $.01$1);
    $.010$2, $.04$2, $.05$2, $.03$2, $.02$2, $.01$2 := (if p1$2 then 0bv96 else $.010$2), (if p1$2 then v43$2 else $.04$2), (if p1$2 then 0bv32 else $.05$2), (if p1$2 then 0bv32 else $.03$2), (if p1$2 then 0bv32 else $.02$2), (if p1$2 then 3225419776bv32 else $.01$2);
    p126$1 := (if p1$1 then true else p126$1);
    p126$2 := (if p1$2 then true else p126$2);
    _READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights$ghost$__partitioned_block_$11_0 := _READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume {:captureState "loop_entry_state_0_0"} true;
    goto __partitioned_block_$11_0;

  __partitioned_block_$11_0:
    assume {:captureState "loop_head_state_0"} true;
    assume {:tag "disabledMaintainsInstrumentation"} true
       ==> 
      !p1$1
       ==> (_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights$ghost$__partitioned_block_$11_0
         <==> _READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights);
    assume {:tag "predicatedEquality"} true ==> p126$1 && p126$2 ==> $.01$1 == $.01$2;
    assume {:tag "loopPredicateEquality"} true
       ==> 
      group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> (p126$1 <==> p126$2);
    assume {:tag "loopPredicateEquality"} true ==> (p126$1 <==> p126$2);
    assert {:tag "groupSharedArraysDisjointAcrossGroups"} _ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights
       ==> group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2;
    assert {:tag "groupSharedArraysDisjointAcrossGroups"} _WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights
       ==> group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2;
    assert {:tag "groupSharedArraysDisjointAcrossGroups"} _READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights
       ==> group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2;
    assume {:predicate "p126"} {:dominator_predicate "p1"} true;
    assume {:do_not_predicate} {:tag "accessOnlyIfEnabledInEnclosingScopes"} {:thread 1} true
       ==> 
      _READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights
       ==> BV32_SLT(BV32_ADD(BV32_MUL(group_size_y, group_id_y$1), local_id_y$1), $imageH);
    assume {:do_not_predicate} {:tag "accessOnlyIfEnabledInEnclosingScopes"} {:thread 1} true
       ==> 
      _READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights
       ==> BV32_SLT(BV32_ADD(BV32_MUL(group_size_x, group_id_x$1), local_id_x$1), $imageW);
    assume {:tag "conditionsImpliedByEnabledness"} {:thread 1} p126$1
       ==> 
      true
       ==> 
      p126$1
       ==> BV32_SLT(BV32_ADD(BV32_MUL(group_size_x, group_id_x$1), local_id_x$1), $imageW)
         && BV32_SLT(BV32_ADD(BV32_MUL(group_size_y, group_id_y$1), local_id_y$1), $imageH);
    assume {:tag "conditionsImpliedByEnabledness"} {:thread 2} p126$2
       ==> 
      true
       ==> 
      p126$2
       ==> BV32_SLT(BV32_ADD(BV32_MUL(group_size_x, group_id_x$2), local_id_x$2), $imageW)
         && BV32_SLT(BV32_ADD(BV32_MUL(group_size_y, group_id_y$2), local_id_y$2), $imageH);
    p127$1 := false;
    p127$2 := false;
    p128$1 := false;
    p128$2 := false;
    p129$1 := false;
    p129$2 := false;
    p130$1 := false;
    p130$2 := false;
    p131$1 := false;
    p131$2 := false;
    p132$1 := false;
    p132$2 := false;
    p133$1 := false;
    p133$2 := false;
    p134$1 := false;
    p134$2 := false;
    p135$1 := false;
    p135$2 := false;
    p136$1 := false;
    p136$2 := false;
    p194$1 := false;
    p194$2 := false;
    p195$1 := false;
    p195$2 := false;
    p196$1 := false;
    p196$2 := false;
    p197$1 := false;
    p197$2 := false;
    p198$1 := false;
    p198$2 := false;
    p199$1 := false;
    p199$2 := false;
    p200$1 := false;
    p200$2 := false;
    p201$1 := false;
    p201$2 := false;
    p202$1 := false;
    p202$2 := false;
    p203$1 := false;
    p203$2 := false;
    p204$1 := false;
    p204$2 := false;
    p205$1 := false;
    p205$2 := false;
    p206$1 := false;
    p206$2 := false;
    p207$1 := false;
    p207$2 := false;
    p208$1 := false;
    p208$2 := false;
    p209$1 := false;
    p209$2 := false;
    p210$1 := false;
    p210$2 := false;
    p211$1 := false;
    p211$2 := false;
    p212$1 := false;
    p212$2 := false;
    p213$1 := false;
    p213$2 := false;
    p214$1 := false;
    p214$2 := false;
    p215$1 := false;
    p215$2 := false;
    p216$1 := false;
    p216$2 := false;
    p217$1 := false;
    p217$2 := false;
    p218$1 := false;
    p218$2 := false;
    p219$1 := false;
    p219$2 := false;
    p220$1 := false;
    p220$2 := false;
    p221$1 := false;
    p221$2 := false;
    p222$1 := false;
    p222$2 := false;
    p223$1 := false;
    p223$2 := false;
    p224$1 := false;
    p224$2 := false;
    p225$1 := false;
    p225$2 := false;
    p226$1 := false;
    p226$2 := false;
    p227$1 := false;
    p227$2 := false;
    p228$1 := false;
    p228$2 := false;
    p229$1 := false;
    p229$2 := false;
    p230$1 := false;
    p230$2 := false;
    p231$1 := false;
    p231$2 := false;
    p232$1 := false;
    p232$2 := false;
    p233$1 := false;
    p233$2 := false;
    p234$1 := false;
    p234$2 := false;
    p235$1 := false;
    p235$2 := false;
    p236$1 := false;
    p236$2 := false;
    p237$1 := false;
    p237$2 := false;
    p238$1 := false;
    p238$2 := false;
    p239$1 := false;
    p239$2 := false;
    p240$1 := false;
    p240$2 := false;
    p241$1 := false;
    p241$2 := false;
    p242$1 := false;
    p242$2 := false;
    p243$1 := false;
    p243$2 := false;
    p244$1 := false;
    p244$2 := false;
    p245$1 := false;
    p245$2 := false;
    p246$1 := false;
    p246$2 := false;
    p247$1 := false;
    p247$2 := false;
    p128$1 := (if p126$1 && b111 then b111 else p128$1);
    p128$2 := (if p126$2 && b111 then b111 else p128$2);
    call {:repair_barrier "b111"} {:repair_instrumented} {:sourceloc_num 41} $bugle_barrier_duplicated_59(1bv1, 1bv1, p128$1, p128$2);
    p130$1 := (if p126$1 && b112 then b112 else p130$1);
    p130$2 := (if p126$2 && b112 then b112 else p130$2);
    call {:repair_barrier "b112"} {:repair_instrumented} {:sourceloc_num 41} $bugle_grid_barrier_duplicated_58(p130$1, p130$2);
    v44$1 := (if p126$1
       then FEQ32($.01$1, 1082130432bv32) || FLT32($.01$1, 1082130432bv32)
       else v44$1);
    v44$2 := (if p126$2
       then FEQ32($.01$2, 1082130432bv32) || FLT32($.01$2, 1082130432bv32)
       else v44$2);
    p131$1 := (if p126$1 && v44$1 then v44$1 else p131$1);
    p131$2 := (if p126$2 && v44$2 then v44$2 else p131$2);
    p126$1 := (if p126$1 && !v44$1 then v44$1 else p126$1);
    p126$2 := (if p126$2 && !v44$2 then v44$2 else p126$2);
    p133$1 := (if p131$1 && b117 then b117 else p133$1);
    p133$2 := (if p131$2 && b117 then b117 else p133$2);
    call {:repair_barrier "b117"} {:repair_instrumented} {:sourceloc_num 42} $bugle_barrier_duplicated_57(1bv1, 1bv1, p133$1, p133$2);
    p135$1 := (if p131$1 && b118 then b118 else p135$1);
    p135$2 := (if p131$2 && b118 then b118 else p135$2);
    call {:repair_barrier "b118"} {:repair_instrumented} {:sourceloc_num 42} $bugle_grid_barrier_duplicated_56(p135$1, p135$2);
    $.111$1, $.15$1, $.16$1, $.14$1, $.1$1, $.0$1 := (if p131$1 then $.010$1 else $.111$1), (if p131$1 then $.04$1 else $.15$1), (if p131$1 then $.05$1 else $.16$1), (if p131$1 then $.03$1 else $.14$1), (if p131$1 then $.02$1 else $.1$1), (if p131$1 then 3225419776bv32 else $.0$1);
    $.111$2, $.15$2, $.16$2, $.14$2, $.1$2, $.0$2 := (if p131$2 then $.010$2 else $.111$2), (if p131$2 then $.04$2 else $.15$2), (if p131$2 then $.05$2 else $.16$2), (if p131$2 then $.03$2 else $.14$2), (if p131$2 then $.02$2 else $.1$2), (if p131$2 then 3225419776bv32 else $.0$2);
    p136$1 := (if p131$1 then true else p136$1);
    p136$2 := (if p131$2 then true else p136$2);
    _READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights$ghost$__partitioned_block_$13_0 := _READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume {:captureState "loop_entry_state_1_0"} true;
    goto __partitioned_block_$13_0;

  __partitioned_block_$13_0:
    assume {:captureState "loop_head_state_1"} true;
    assume {:tag "disabledMaintainsInstrumentation"} true
       ==> 
      !p131$1
       ==> (_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights$ghost$__partitioned_block_$13_0
         <==> _READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights);
    assume {:tag "predicatedEquality"} true ==> p136$1 && p136$2 ==> $.0$1 == $.0$2;
    assume {:tag "loopPredicateEquality"} true
       ==> 
      group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> (p136$1 <==> p136$2);
    assume {:tag "loopPredicateEquality"} true ==> (p136$1 <==> p136$2);
    assert {:tag "groupSharedArraysDisjointAcrossGroups"} _ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights
       ==> group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2;
    assert {:tag "groupSharedArraysDisjointAcrossGroups"} _WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights
       ==> group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2;
    assert {:tag "groupSharedArraysDisjointAcrossGroups"} _READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights
       ==> group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2;
    assume {:predicate "p136"} {:dominator_predicate "p131"} true;
    assert p136$1 ==> p126$1;
    assert p136$2 ==> p126$2;
    assume {:do_not_predicate} {:tag "accessOnlyIfEnabledInEnclosingScopes"} {:thread 1} true
       ==> 
      _READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights
       ==> BV32_SLT(BV32_ADD(BV32_MUL(group_size_y, group_id_y$1), local_id_y$1), $imageH);
    assume {:do_not_predicate} {:tag "accessOnlyIfEnabledInEnclosingScopes"} {:thread 1} true
       ==> 
      _READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights
       ==> BV32_SLT(BV32_ADD(BV32_MUL(group_size_x, group_id_x$1), local_id_x$1), $imageW);
    assume {:tag "conditionsImpliedByEnabledness"} {:thread 1} p136$1
       ==> 
      true
       ==> 
      p136$1
       ==> BV32_SLT(BV32_ADD(BV32_MUL(group_size_x, group_id_x$1), local_id_x$1), $imageW)
         && BV32_SLT(BV32_ADD(BV32_MUL(group_size_y, group_id_y$1), local_id_y$1), $imageH);
    assume {:tag "conditionsImpliedByEnabledness"} {:thread 2} p136$2
       ==> 
      true
       ==> 
      p136$2
       ==> BV32_SLT(BV32_ADD(BV32_MUL(group_size_x, group_id_x$2), local_id_x$2), $imageW)
         && BV32_SLT(BV32_ADD(BV32_MUL(group_size_y, group_id_y$2), local_id_y$2), $imageH);
    p137$1 := false;
    p137$2 := false;
    p138$1 := false;
    p138$2 := false;
    p139$1 := false;
    p139$2 := false;
    p140$1 := false;
    p140$2 := false;
    p141$1 := false;
    p141$2 := false;
    p142$1 := false;
    p142$2 := false;
    p143$1 := false;
    p143$2 := false;
    p144$1 := false;
    p144$2 := false;
    p145$1 := false;
    p145$2 := false;
    p146$1 := false;
    p146$2 := false;
    p147$1 := false;
    p147$2 := false;
    p148$1 := false;
    p148$2 := false;
    p149$1 := false;
    p149$2 := false;
    p150$1 := false;
    p150$2 := false;
    p151$1 := false;
    p151$2 := false;
    p152$1 := false;
    p152$2 := false;
    p153$1 := false;
    p153$2 := false;
    p154$1 := false;
    p154$2 := false;
    p155$1 := false;
    p155$2 := false;
    p156$1 := false;
    p156$2 := false;
    p157$1 := false;
    p157$2 := false;
    p158$1 := false;
    p158$2 := false;
    p159$1 := false;
    p159$2 := false;
    p160$1 := false;
    p160$2 := false;
    p161$1 := false;
    p161$2 := false;
    p162$1 := false;
    p162$2 := false;
    p163$1 := false;
    p163$2 := false;
    p164$1 := false;
    p164$2 := false;
    p165$1 := false;
    p165$2 := false;
    p166$1 := false;
    p166$2 := false;
    p167$1 := false;
    p167$2 := false;
    p168$1 := false;
    p168$2 := false;
    p169$1 := false;
    p169$2 := false;
    p170$1 := false;
    p170$2 := false;
    p171$1 := false;
    p171$2 := false;
    p172$1 := false;
    p172$2 := false;
    p173$1 := false;
    p173$2 := false;
    p174$1 := false;
    p174$2 := false;
    p175$1 := false;
    p175$2 := false;
    p176$1 := false;
    p176$2 := false;
    p177$1 := false;
    p177$2 := false;
    p178$1 := false;
    p178$2 := false;
    p179$1 := false;
    p179$2 := false;
    p180$1 := false;
    p180$2 := false;
    p181$1 := false;
    p181$2 := false;
    p182$1 := false;
    p182$2 := false;
    p183$1 := false;
    p183$2 := false;
    p184$1 := false;
    p184$2 := false;
    p185$1 := false;
    p185$2 := false;
    p186$1 := false;
    p186$2 := false;
    p187$1 := false;
    p187$2 := false;
    p188$1 := false;
    p188$2 := false;
    p189$1 := false;
    p189$2 := false;
    p190$1 := false;
    p190$2 := false;
    p191$1 := false;
    p191$2 := false;
    p192$1 := false;
    p192$2 := false;
    p193$1 := false;
    p193$2 := false;
    p138$1 := (if p136$1 && b115 then b115 else p138$1);
    p138$2 := (if p136$2 && b115 then b115 else p138$2);
    call {:repair_barrier "b115"} {:repair_instrumented} {:sourceloc_num 43} $bugle_barrier_duplicated_55(1bv1, 1bv1, p138$1, p138$2);
    p140$1 := (if p136$1 && b116 then b116 else p140$1);
    p140$2 := (if p136$2 && b116 then b116 else p140$2);
    call {:repair_barrier "b116"} {:repair_instrumented} {:sourceloc_num 43} $bugle_grid_barrier_duplicated_54(p140$1, p140$2);
    v45$1 := (if p136$1
       then FEQ32($.0$1, 1082130432bv32) || FLT32($.0$1, 1082130432bv32)
       else v45$1);
    v45$2 := (if p136$2
       then FEQ32($.0$2, 1082130432bv32) || FLT32($.0$2, 1082130432bv32)
       else v45$2);
    p141$1 := (if p136$1 && v45$1 then v45$1 else p141$1);
    p141$2 := (if p136$2 && v45$2 then v45$2 else p141$2);
    p136$1 := (if p136$1 && !v45$1 then v45$1 else p136$1);
    p136$2 := (if p136$2 && !v45$2 then v45$2 else p136$2);
    p143$1 := (if p141$1 && b5 then b5 else p143$1);
    p143$2 := (if p141$2 && b5 then b5 else p143$2);
    call {:repair_barrier "b5"} {:repair_instrumented} {:sourceloc_num 45} $bugle_barrier_duplicated_53(1bv1, 1bv1, p143$1, p143$2);
    p145$1 := (if p141$1 && b6 then b6 else p145$1);
    p145$2 := (if p141$2 && b6 then b6 else p145$2);
    call {:repair_barrier "b6"} {:repair_instrumented} {:sourceloc_num 45} $bugle_grid_barrier_duplicated_52(p145$1, p145$2);
    call {:sourceloc} {:sourceloc_num 45} {:repair_instrumented} _LOG_READ_$$_ZZ4NLM2PjiiffE8fWeights(p141$1, $.1$1, $$_ZZ4NLM2PjiiffE8fWeights[1bv1][$.1$1]);
    assume {:do_not_predicate} {:check_id "check_state_2"} {:captureState "check_state_2"} {:sourceloc} {:sourceloc_num 45} {:repair_instrumented} true;
    call {:check_id "check_state_2"} {:sourceloc} {:sourceloc_num 45} {:repair_instrumented} _CHECK_READ_$$_ZZ4NLM2PjiiffE8fWeights(p141$2, $.1$2, $$_ZZ4NLM2PjiiffE8fWeights[(if group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       then 1bv1
       else 0bv1)][$.1$2]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$_ZZ4NLM2PjiiffE8fWeights"} true;
    v46$1 := (if p141$1 then $$_ZZ4NLM2PjiiffE8fWeights[1bv1][$.1$1] else v46$1);
    v46$2 := (if p141$2
       then $$_ZZ4NLM2PjiiffE8fWeights[(if group_id_x$1 == group_id_x$2
           && group_id_y$1 == group_id_y$2
           && group_id_z$1 == group_id_z$2
         then 1bv1
         else 0bv1)][$.1$2]
       else v46$2);
    p147$1 := (if p141$1 && b11 then b11 else p147$1);
    p147$2 := (if p141$2 && b11 then b11 else p147$2);
    call {:repair_barrier "b11"} {:repair_instrumented} {:sourceloc_num 46} $bugle_barrier_duplicated_51(1bv1, 1bv1, p147$1, p147$2);
    p149$1 := (if p141$1 && b12 then b12 else p149$1);
    p149$2 := (if p141$2 && b12 then b12 else p149$2);
    call {:repair_barrier "b12"} {:repair_instrumented} {:sourceloc_num 46} $bugle_grid_barrier_duplicated_50(p149$1, p149$2);
    havoc _HAVOC_bv8$1, _HAVOC_bv8$2;
    v47$1 := (if p141$1 then _HAVOC_bv8$1 else v47$1);
    v47$2 := (if p141$2 then _HAVOC_bv8$2 else v47$2);
    p151$1 := (if p141$1 && b17 then b17 else p151$1);
    p151$2 := (if p141$2 && b17 then b17 else p151$2);
    call {:repair_barrier "b17"} {:repair_instrumented} {:sourceloc_num 47} $bugle_barrier_duplicated_49(1bv1, 1bv1, p151$1, p151$2);
    p153$1 := (if p141$1 && b18 then b18 else p153$1);
    p153$2 := (if p141$2 && b18 then b18 else p153$2);
    call {:repair_barrier "b18"} {:repair_instrumented} {:sourceloc_num 47} $bugle_grid_barrier_duplicated_48(p153$1, p153$2);
    havoc _HAVOC_bv8$1, _HAVOC_bv8$2;
    v48$1 := (if p141$1 then _HAVOC_bv8$1 else v48$1);
    v48$2 := (if p141$2 then _HAVOC_bv8$2 else v48$2);
    p155$1 := (if p141$1 && b23 then b23 else p155$1);
    p155$2 := (if p141$2 && b23 then b23 else p155$2);
    call {:repair_barrier "b23"} {:repair_instrumented} {:sourceloc_num 48} $bugle_barrier_duplicated_47(1bv1, 1bv1, p155$1, p155$2);
    p157$1 := (if p141$1 && b24 then b24 else p157$1);
    p157$2 := (if p141$2 && b24 then b24 else p157$2);
    call {:repair_barrier "b24"} {:repair_instrumented} {:sourceloc_num 48} $bugle_grid_barrier_duplicated_46(p157$1, p157$2);
    havoc _HAVOC_bv8$1, _HAVOC_bv8$2;
    v49$1 := (if p141$1 then _HAVOC_bv8$1 else v49$1);
    v49$2 := (if p141$2 then _HAVOC_bv8$2 else v49$2);
    p159$1 := (if p141$1 && b29 then b29 else p159$1);
    p159$2 := (if p141$2 && b29 then b29 else p159$2);
    call {:repair_barrier "b29"} {:repair_instrumented} {:sourceloc_num 49} $bugle_barrier_duplicated_45(1bv1, 1bv1, p159$1, p159$2);
    p161$1 := (if p141$1 && b30 then b30 else p161$1);
    p161$2 := (if p141$2 && b30 then b30 else p161$2);
    call {:repair_barrier "b30"} {:repair_instrumented} {:sourceloc_num 49} $bugle_grid_barrier_duplicated_44(p161$1, p161$2);
    havoc _HAVOC_bv8$1, _HAVOC_bv8$2;
    v50$1 := (if p141$1 then _HAVOC_bv8$1 else v50$1);
    v50$2 := (if p141$2 then _HAVOC_bv8$2 else v50$2);
    p163$1 := (if p141$1 && b35 then b35 else p163$1);
    p163$2 := (if p141$2 && b35 then b35 else p163$2);
    call {:repair_barrier "b35"} {:repair_instrumented} {:sourceloc_num 50} $bugle_barrier_duplicated_43(1bv1, 1bv1, p163$1, p163$2);
    p165$1 := (if p141$1 && b36 then b36 else p165$1);
    p165$2 := (if p141$2 && b36 then b36 else p165$2);
    call {:repair_barrier "b36"} {:repair_instrumented} {:sourceloc_num 50} $bugle_grid_barrier_duplicated_42(p165$1, p165$2);
    havoc _HAVOC_bv8$1, _HAVOC_bv8$2;
    v51$1 := (if p141$1 then _HAVOC_bv8$1 else v51$1);
    v51$2 := (if p141$2 then _HAVOC_bv8$2 else v51$2);
    p167$1 := (if p141$1 && b41 then b41 else p167$1);
    p167$2 := (if p141$2 && b41 then b41 else p167$2);
    call {:repair_barrier "b41"} {:repair_instrumented} {:sourceloc_num 51} $bugle_barrier_duplicated_41(1bv1, 1bv1, p167$1, p167$2);
    p169$1 := (if p141$1 && b42 then b42 else p169$1);
    p169$2 := (if p141$2 && b42 then b42 else p169$2);
    call {:repair_barrier "b42"} {:repair_instrumented} {:sourceloc_num 51} $bugle_grid_barrier_duplicated_40(p169$1, p169$2);
    havoc _HAVOC_bv8$1, _HAVOC_bv8$2;
    v52$1 := (if p141$1 then _HAVOC_bv8$1 else v52$1);
    v52$2 := (if p141$2 then _HAVOC_bv8$2 else v52$2);
    p171$1 := (if p141$1 && b47 then b47 else p171$1);
    p171$2 := (if p141$2 && b47 then b47 else p171$2);
    call {:repair_barrier "b47"} {:repair_instrumented} {:sourceloc_num 52} $bugle_barrier_duplicated_39(1bv1, 1bv1, p171$1, p171$2);
    p173$1 := (if p141$1 && b48 then b48 else p173$1);
    p173$2 := (if p141$2 && b48 then b48 else p173$2);
    call {:repair_barrier "b48"} {:repair_instrumented} {:sourceloc_num 52} $bugle_grid_barrier_duplicated_38(p173$1, p173$2);
    havoc _HAVOC_bv8$1, _HAVOC_bv8$2;
    v53$1 := (if p141$1 then _HAVOC_bv8$1 else v53$1);
    v53$2 := (if p141$2 then _HAVOC_bv8$2 else v53$2);
    p175$1 := (if p141$1 && b53 then b53 else p175$1);
    p175$2 := (if p141$2 && b53 then b53 else p175$2);
    call {:repair_barrier "b53"} {:repair_instrumented} {:sourceloc_num 53} $bugle_barrier_duplicated_37(1bv1, 1bv1, p175$1, p175$2);
    p177$1 := (if p141$1 && b54 then b54 else p177$1);
    p177$2 := (if p141$2 && b54 then b54 else p177$2);
    call {:repair_barrier "b54"} {:repair_instrumented} {:sourceloc_num 53} $bugle_grid_barrier_duplicated_36(p177$1, p177$2);
    havoc _HAVOC_bv8$1, _HAVOC_bv8$2;
    v54$1 := (if p141$1 then _HAVOC_bv8$1 else v54$1);
    v54$2 := (if p141$2 then _HAVOC_bv8$2 else v54$2);
    p179$1 := (if p141$1 && b59 then b59 else p179$1);
    p179$2 := (if p141$2 && b59 then b59 else p179$2);
    call {:repair_barrier "b59"} {:repair_instrumented} {:sourceloc_num 54} $bugle_barrier_duplicated_35(1bv1, 1bv1, p179$1, p179$2);
    p181$1 := (if p141$1 && b60 then b60 else p181$1);
    p181$2 := (if p141$2 && b60 then b60 else p181$2);
    call {:repair_barrier "b60"} {:repair_instrumented} {:sourceloc_num 54} $bugle_grid_barrier_duplicated_34(p181$1, p181$2);
    havoc _HAVOC_bv8$1, _HAVOC_bv8$2;
    v55$1 := (if p141$1 then _HAVOC_bv8$1 else v55$1);
    v55$2 := (if p141$2 then _HAVOC_bv8$2 else v55$2);
    p183$1 := (if p141$1 && b65 then b65 else p183$1);
    p183$2 := (if p141$2 && b65 then b65 else p183$2);
    call {:repair_barrier "b65"} {:repair_instrumented} {:sourceloc_num 55} $bugle_barrier_duplicated_33(1bv1, 1bv1, p183$1, p183$2);
    p185$1 := (if p141$1 && b66 then b66 else p185$1);
    p185$2 := (if p141$2 && b66 then b66 else p185$2);
    call {:repair_barrier "b66"} {:repair_instrumented} {:sourceloc_num 55} $bugle_grid_barrier_duplicated_32(p185$1, p185$2);
    havoc _HAVOC_bv8$1, _HAVOC_bv8$2;
    v56$1 := (if p141$1 then _HAVOC_bv8$1 else v56$1);
    v56$2 := (if p141$2 then _HAVOC_bv8$2 else v56$2);
    p187$1 := (if p141$1 && b71 then b71 else p187$1);
    p187$2 := (if p141$2 && b71 then b71 else p187$2);
    call {:repair_barrier "b71"} {:repair_instrumented} {:sourceloc_num 56} $bugle_barrier_duplicated_31(1bv1, 1bv1, p187$1, p187$2);
    p189$1 := (if p141$1 && b72 then b72 else p189$1);
    p189$2 := (if p141$2 && b72 then b72 else p189$2);
    call {:repair_barrier "b72"} {:repair_instrumented} {:sourceloc_num 56} $bugle_grid_barrier_duplicated_30(p189$1, p189$2);
    havoc _HAVOC_bv8$1, _HAVOC_bv8$2;
    v57$1 := (if p141$1 then _HAVOC_bv8$1 else v57$1);
    v57$2 := (if p141$2 then _HAVOC_bv8$2 else v57$2);
    p191$1 := (if p141$1 && b77 then b77 else p191$1);
    p191$2 := (if p141$2 && b77 then b77 else p191$2);
    call {:repair_barrier "b77"} {:repair_instrumented} {:sourceloc_num 57} $bugle_barrier_duplicated_29(1bv1, 1bv1, p191$1, p191$2);
    p193$1 := (if p141$1 && b78 then b78 else p193$1);
    p193$2 := (if p141$2 && b78 then b78 else p193$2);
    call {:repair_barrier "b78"} {:repair_instrumented} {:sourceloc_num 57} $bugle_grid_barrier_duplicated_28(p193$1, p193$2);
    havoc _HAVOC_bv8$1, _HAVOC_bv8$2;
    v58$1 := (if p141$1 then _HAVOC_bv8$1 else v58$1);
    v58$2 := (if p141$2 then _HAVOC_bv8$2 else v58$2);
    call {:sourceloc_num 58} v59$1, v59$2 := $_Z5tex2D7textureI6uchar4Li2EL19cudaTextureReadMode1EEff(p141$1, v58$1 ++ v57$1 ++ v56$1 ++ v55$1 ++ v54$1 ++ v53$1 ++ v52$1 ++ v51$1 ++ v50$1 ++ v49$1 ++ v48$1 ++ v47$1, FADD32(v2$1, $.0$1), FADD32(v3$1, $.01$1), v59$1, p141$2, v58$2 ++ v57$2 ++ v56$2 ++ v55$2 ++ v54$2 ++ v53$2 ++ v52$2 ++ v51$2 ++ v50$2 ++ v49$2 ++ v48$2 ++ v47$2, FADD32(v2$2, $.0$2), FADD32(v3$2, $.01$2), v59$2);
    assume {:captureState "call_return_state_0"} {:procedureName "$_Z5tex2D7textureI6uchar4Li2EL19cudaTextureReadMode1EEff"} true;
    v60$1 := (if p141$1 then v59$1[32:0] else v60$1);
    v60$2 := (if p141$2 then v59$2[32:0] else v60$2);
    v61$1 := (if p141$1 then v59$1[64:32] else v61$1);
    v61$2 := (if p141$2 then v59$2[64:32] else v61$2);
    v62$1 := (if p141$1 then v59$1[96:64] else v62$1);
    v62$2 := (if p141$2 then v59$2[96:64] else v62$2);
    v63$1 := (if p141$1 then $.111$1[96:64] else v63$1);
    v63$2 := (if p141$2 then $.111$2[96:64] else v63$2);
    $.111$1, $.15$1, $.16$1, $.14$1, $.1$1, $.0$1 := (if p141$1
       then FADD32(v63$1, FMUL32(v62$1, v46$1)) ++ (FADD32($.111$1[64:32], FMUL32(v61$1, v46$1)) ++ FADD32($.111$1[32:0], FMUL32(v60$1, v46$1)))
       else $.111$1), (if p141$1 then v59$1[128:96] ++ (v62$1 ++ (v61$1 ++ v60$1)) else $.15$1), (if p141$1
       then FADD32($.16$1, (if FLT32(1036831949bv32, v46$1) then 1017589509bv32 else 0bv32))
       else $.16$1), (if p141$1 then FADD32($.14$1, v46$1) else $.14$1), (if p141$1 then BV32_ADD($.1$1, 1bv32) else $.1$1), (if p141$1 then FADD32($.0$1, 1065353216bv32) else $.0$1);
    $.111$2, $.15$2, $.16$2, $.14$2, $.1$2, $.0$2 := (if p141$2
       then FADD32(v63$2, FMUL32(v62$2, v46$2)) ++ (FADD32($.111$2[64:32], FMUL32(v61$2, v46$2)) ++ FADD32($.111$2[32:0], FMUL32(v60$2, v46$2)))
       else $.111$2), (if p141$2 then v59$2[128:96] ++ (v62$2 ++ (v61$2 ++ v60$2)) else $.15$2), (if p141$2
       then FADD32($.16$2, (if FLT32(1036831949bv32, v46$2) then 1017589509bv32 else 0bv32))
       else $.16$2), (if p141$2 then FADD32($.14$2, v46$2) else $.14$2), (if p141$2 then BV32_ADD($.1$2, 1bv32) else $.1$2), (if p141$2 then FADD32($.0$2, 1065353216bv32) else $.0$2);
    p136$1 := (if p141$1 then true else p136$1);
    p136$2 := (if p141$2 then true else p136$2);
    goto $13.backedge, $13.tail;

  $13.tail:
    assume !p136$1 && !p136$2;
    $.010$1, $.04$1, $.05$1, $.03$1, $.02$1, $.01$1 := (if p131$1 then $.111$1 else $.010$1), (if p131$1 then $.15$1 else $.04$1), (if p131$1 then $.16$1 else $.05$1), (if p131$1 then $.14$1 else $.03$1), (if p131$1 then $.1$1 else $.02$1), (if p131$1 then FADD32($.01$1, 1065353216bv32) else $.01$1);
    $.010$2, $.04$2, $.05$2, $.03$2, $.02$2, $.01$2 := (if p131$2 then $.111$2 else $.010$2), (if p131$2 then $.15$2 else $.04$2), (if p131$2 then $.16$2 else $.05$2), (if p131$2 then $.14$2 else $.03$2), (if p131$2 then $.1$2 else $.02$2), (if p131$2 then FADD32($.01$2, 1065353216bv32) else $.01$2);
    p126$1 := (if p131$1 then true else p126$1);
    p126$2 := (if p131$2 then true else p126$2);
    goto $11.backedge, __partitioned_block_$11.tail_0;

  __partitioned_block_$11.tail_0:
    assume !p126$1 && !p126$2;
    v64$1 := (if p1$1 then FDIV32(1065353216bv32, $.03$1) else v64$1);
    v64$2 := (if p1$2 then FDIV32(1065353216bv32, $.03$2) else v64$2);
    v65$1 := (if p1$1 then FMUL32($.010$1[32:0], v64$1) else v65$1);
    v65$2 := (if p1$2 then FMUL32($.010$2[32:0], v64$2) else v65$2);
    v66$1 := (if p1$1 then FMUL32($.010$1[64:32], v64$1) else v66$1);
    v66$2 := (if p1$2 then FMUL32($.010$2[64:32], v64$2) else v66$2);
    v67$1 := (if p1$1 then $.010$1[96:64] else v67$1);
    v67$2 := (if p1$2 then $.010$2[96:64] else v67$2);
    v68$1 := (if p1$1 then FMUL32(v67$1, v64$1) else v68$1);
    v68$2 := (if p1$2 then FMUL32(v67$2, v64$2) else v68$2);
    v69$1 := (if p1$1 then FLT32(1036831949bv32, $.05$1) else v69$1);
    v69$2 := (if p1$2 then FLT32(1036831949bv32, $.05$2) else v69$2);
    p194$1 := (if p1$1 && v69$1 then v69$1 else p194$1);
    p194$2 := (if p1$2 && v69$2 then v69$2 else p194$2);
    p195$1 := (if p1$1 && !v69$1 then !v69$1 else p195$1);
    p195$2 := (if p1$2 && !v69$2 then !v69$2 else p195$2);
    $0$1 := (if p194$1 then $lerpC else $0$1);
    $0$2 := (if p194$2 then $lerpC else $0$2);
    $0$1 := (if p195$1 then FSUB32(1065353216bv32, $lerpC) else $0$1);
    $0$2 := (if p195$2 then FSUB32(1065353216bv32, $lerpC) else $0$2);
    p196$1 := (if p1$1 && b7 then b7 else p196$1);
    p196$2 := (if p1$2 && b7 then b7 else p196$2);
    call {:repair_barrier "b7"} {:repair_instrumented} {:sourceloc_num 66} $bugle_barrier_duplicated_27(1bv1, 1bv1, p196$1, p196$2);
    p198$1 := (if p1$1 && b8 then b8 else p198$1);
    p198$2 := (if p1$2 && b8 then b8 else p198$2);
    call {:repair_barrier "b8"} {:repair_instrumented} {:sourceloc_num 66} $bugle_grid_barrier_duplicated_26(p198$1, p198$2);
    havoc _HAVOC_bv8$1, _HAVOC_bv8$2;
    v70$1 := (if p1$1 then _HAVOC_bv8$1 else v70$1);
    v70$2 := (if p1$2 then _HAVOC_bv8$2 else v70$2);
    p200$1 := (if p1$1 && b13 then b13 else p200$1);
    p200$2 := (if p1$2 && b13 then b13 else p200$2);
    call {:repair_barrier "b13"} {:repair_instrumented} {:sourceloc_num 67} $bugle_barrier_duplicated_25(1bv1, 1bv1, p200$1, p200$2);
    p202$1 := (if p1$1 && b14 then b14 else p202$1);
    p202$2 := (if p1$2 && b14 then b14 else p202$2);
    call {:repair_barrier "b14"} {:repair_instrumented} {:sourceloc_num 67} $bugle_grid_barrier_duplicated_24(p202$1, p202$2);
    havoc _HAVOC_bv8$1, _HAVOC_bv8$2;
    v71$1 := (if p1$1 then _HAVOC_bv8$1 else v71$1);
    v71$2 := (if p1$2 then _HAVOC_bv8$2 else v71$2);
    p204$1 := (if p1$1 && b19 then b19 else p204$1);
    p204$2 := (if p1$2 && b19 then b19 else p204$2);
    call {:repair_barrier "b19"} {:repair_instrumented} {:sourceloc_num 68} $bugle_barrier_duplicated_23(1bv1, 1bv1, p204$1, p204$2);
    p206$1 := (if p1$1 && b20 then b20 else p206$1);
    p206$2 := (if p1$2 && b20 then b20 else p206$2);
    call {:repair_barrier "b20"} {:repair_instrumented} {:sourceloc_num 68} $bugle_grid_barrier_duplicated_22(p206$1, p206$2);
    havoc _HAVOC_bv8$1, _HAVOC_bv8$2;
    v72$1 := (if p1$1 then _HAVOC_bv8$1 else v72$1);
    v72$2 := (if p1$2 then _HAVOC_bv8$2 else v72$2);
    p208$1 := (if p1$1 && b25 then b25 else p208$1);
    p208$2 := (if p1$2 && b25 then b25 else p208$2);
    call {:repair_barrier "b25"} {:repair_instrumented} {:sourceloc_num 69} $bugle_barrier_duplicated_21(1bv1, 1bv1, p208$1, p208$2);
    p210$1 := (if p1$1 && b26 then b26 else p210$1);
    p210$2 := (if p1$2 && b26 then b26 else p210$2);
    call {:repair_barrier "b26"} {:repair_instrumented} {:sourceloc_num 69} $bugle_grid_barrier_duplicated_20(p210$1, p210$2);
    havoc _HAVOC_bv8$1, _HAVOC_bv8$2;
    v73$1 := (if p1$1 then _HAVOC_bv8$1 else v73$1);
    v73$2 := (if p1$2 then _HAVOC_bv8$2 else v73$2);
    p212$1 := (if p1$1 && b31 then b31 else p212$1);
    p212$2 := (if p1$2 && b31 then b31 else p212$2);
    call {:repair_barrier "b31"} {:repair_instrumented} {:sourceloc_num 70} $bugle_barrier_duplicated_19(1bv1, 1bv1, p212$1, p212$2);
    p214$1 := (if p1$1 && b32 then b32 else p214$1);
    p214$2 := (if p1$2 && b32 then b32 else p214$2);
    call {:repair_barrier "b32"} {:repair_instrumented} {:sourceloc_num 70} $bugle_grid_barrier_duplicated_18(p214$1, p214$2);
    havoc _HAVOC_bv8$1, _HAVOC_bv8$2;
    v74$1 := (if p1$1 then _HAVOC_bv8$1 else v74$1);
    v74$2 := (if p1$2 then _HAVOC_bv8$2 else v74$2);
    p216$1 := (if p1$1 && b37 then b37 else p216$1);
    p216$2 := (if p1$2 && b37 then b37 else p216$2);
    call {:repair_barrier "b37"} {:repair_instrumented} {:sourceloc_num 71} $bugle_barrier_duplicated_17(1bv1, 1bv1, p216$1, p216$2);
    p218$1 := (if p1$1 && b38 then b38 else p218$1);
    p218$2 := (if p1$2 && b38 then b38 else p218$2);
    call {:repair_barrier "b38"} {:repair_instrumented} {:sourceloc_num 71} $bugle_grid_barrier_duplicated_16(p218$1, p218$2);
    havoc _HAVOC_bv8$1, _HAVOC_bv8$2;
    v75$1 := (if p1$1 then _HAVOC_bv8$1 else v75$1);
    v75$2 := (if p1$2 then _HAVOC_bv8$2 else v75$2);
    p220$1 := (if p1$1 && b43 then b43 else p220$1);
    p220$2 := (if p1$2 && b43 then b43 else p220$2);
    call {:repair_barrier "b43"} {:repair_instrumented} {:sourceloc_num 72} $bugle_barrier_duplicated_15(1bv1, 1bv1, p220$1, p220$2);
    p222$1 := (if p1$1 && b44 then b44 else p222$1);
    p222$2 := (if p1$2 && b44 then b44 else p222$2);
    call {:repair_barrier "b44"} {:repair_instrumented} {:sourceloc_num 72} $bugle_grid_barrier_duplicated_14(p222$1, p222$2);
    havoc _HAVOC_bv8$1, _HAVOC_bv8$2;
    v76$1 := (if p1$1 then _HAVOC_bv8$1 else v76$1);
    v76$2 := (if p1$2 then _HAVOC_bv8$2 else v76$2);
    p224$1 := (if p1$1 && b49 then b49 else p224$1);
    p224$2 := (if p1$2 && b49 then b49 else p224$2);
    call {:repair_barrier "b49"} {:repair_instrumented} {:sourceloc_num 73} $bugle_barrier_duplicated_13(1bv1, 1bv1, p224$1, p224$2);
    p226$1 := (if p1$1 && b50 then b50 else p226$1);
    p226$2 := (if p1$2 && b50 then b50 else p226$2);
    call {:repair_barrier "b50"} {:repair_instrumented} {:sourceloc_num 73} $bugle_grid_barrier_duplicated_12(p226$1, p226$2);
    havoc _HAVOC_bv8$1, _HAVOC_bv8$2;
    v77$1 := (if p1$1 then _HAVOC_bv8$1 else v77$1);
    v77$2 := (if p1$2 then _HAVOC_bv8$2 else v77$2);
    p228$1 := (if p1$1 && b55 then b55 else p228$1);
    p228$2 := (if p1$2 && b55 then b55 else p228$2);
    call {:repair_barrier "b55"} {:repair_instrumented} {:sourceloc_num 74} $bugle_barrier_duplicated_11(1bv1, 1bv1, p228$1, p228$2);
    p230$1 := (if p1$1 && b56 then b56 else p230$1);
    p230$2 := (if p1$2 && b56 then b56 else p230$2);
    call {:repair_barrier "b56"} {:repair_instrumented} {:sourceloc_num 74} $bugle_grid_barrier_duplicated_10(p230$1, p230$2);
    havoc _HAVOC_bv8$1, _HAVOC_bv8$2;
    v78$1 := (if p1$1 then _HAVOC_bv8$1 else v78$1);
    v78$2 := (if p1$2 then _HAVOC_bv8$2 else v78$2);
    p232$1 := (if p1$1 && b61 then b61 else p232$1);
    p232$2 := (if p1$2 && b61 then b61 else p232$2);
    call {:repair_barrier "b61"} {:repair_instrumented} {:sourceloc_num 75} $bugle_barrier_duplicated_9(1bv1, 1bv1, p232$1, p232$2);
    p234$1 := (if p1$1 && b62 then b62 else p234$1);
    p234$2 := (if p1$2 && b62 then b62 else p234$2);
    call {:repair_barrier "b62"} {:repair_instrumented} {:sourceloc_num 75} $bugle_grid_barrier_duplicated_8(p234$1, p234$2);
    havoc _HAVOC_bv8$1, _HAVOC_bv8$2;
    v79$1 := (if p1$1 then _HAVOC_bv8$1 else v79$1);
    v79$2 := (if p1$2 then _HAVOC_bv8$2 else v79$2);
    p236$1 := (if p1$1 && b67 then b67 else p236$1);
    p236$2 := (if p1$2 && b67 then b67 else p236$2);
    call {:repair_barrier "b67"} {:repair_instrumented} {:sourceloc_num 76} $bugle_barrier_duplicated_7(1bv1, 1bv1, p236$1, p236$2);
    p238$1 := (if p1$1 && b68 then b68 else p238$1);
    p238$2 := (if p1$2 && b68 then b68 else p238$2);
    call {:repair_barrier "b68"} {:repair_instrumented} {:sourceloc_num 76} $bugle_grid_barrier_duplicated_6(p238$1, p238$2);
    havoc _HAVOC_bv8$1, _HAVOC_bv8$2;
    v80$1 := (if p1$1 then _HAVOC_bv8$1 else v80$1);
    v80$2 := (if p1$2 then _HAVOC_bv8$2 else v80$2);
    p240$1 := (if p1$1 && b73 then b73 else p240$1);
    p240$2 := (if p1$2 && b73 then b73 else p240$2);
    call {:repair_barrier "b73"} {:repair_instrumented} {:sourceloc_num 77} $bugle_barrier_duplicated_5(1bv1, 1bv1, p240$1, p240$2);
    p242$1 := (if p1$1 && b74 then b74 else p242$1);
    p242$2 := (if p1$2 && b74 then b74 else p242$2);
    call {:repair_barrier "b74"} {:repair_instrumented} {:sourceloc_num 77} $bugle_grid_barrier_duplicated_4(p242$1, p242$2);
    havoc _HAVOC_bv8$1, _HAVOC_bv8$2;
    v81$1 := (if p1$1 then _HAVOC_bv8$1 else v81$1);
    v81$2 := (if p1$2 then _HAVOC_bv8$2 else v81$2);
    call {:sourceloc_num 78} v82$1, v82$2 := $_Z5tex2D7textureI6uchar4Li2EL19cudaTextureReadMode1EEff(p1$1, v81$1 ++ v80$1 ++ v79$1 ++ v78$1 ++ v77$1 ++ v76$1 ++ v75$1 ++ v74$1 ++ v73$1 ++ v72$1 ++ v71$1 ++ v70$1, v2$1, v3$1, v82$1, p1$2, v81$2 ++ v80$2 ++ v79$2 ++ v78$2 ++ v77$2 ++ v76$2 ++ v75$2 ++ v74$2 ++ v73$2 ++ v72$2 ++ v71$2 ++ v70$2, v2$2, v3$2, v82$2);
    assume {:captureState "call_return_state_0"} {:procedureName "$_Z5tex2D7textureI6uchar4Li2EL19cudaTextureReadMode1EEff"} true;
    call {:sourceloc_num 79} v83$1, v83$2 := $_Z5lerpffff(p1$1, v65$1, v82$1[32:0], $0$1, v83$1, p1$2, v65$2, v82$2[32:0], $0$2, v83$2);
    assume {:captureState "call_return_state_0"} {:procedureName "$_Z5lerpffff"} true;
    call {:sourceloc_num 80} v84$1, v84$2 := $_Z5lerpffff(p1$1, v66$1, v82$1[64:32], $0$1, v84$1, p1$2, v66$2, v82$2[64:32], $0$2, v84$2);
    assume {:captureState "call_return_state_0"} {:procedureName "$_Z5lerpffff"} true;
    call {:sourceloc_num 81} v85$1, v85$2 := $_Z5lerpffff(p1$1, v68$1, v82$1[96:64], $0$1, v85$1, p1$2, v68$2, v82$2[96:64], $0$2, v85$2);
    assume {:captureState "call_return_state_0"} {:procedureName "$_Z5lerpffff"} true;
    p244$1 := (if p1$1 && b79 then b79 else p244$1);
    p244$2 := (if p1$2 && b79 then b79 else p244$2);
    call {:repair_barrier "b79"} {:repair_instrumented} {:sourceloc_num 82} $bugle_barrier_duplicated_3(1bv1, 1bv1, p244$1, p244$2);
    p246$1 := (if p1$1 && b80 then b80 else p246$1);
    p246$2 := (if p1$2 && b80 then b80 else p246$2);
    call {:repair_barrier "b80"} {:repair_instrumented} {:sourceloc_num 82} $bugle_grid_barrier_duplicated_2(p246$1, p246$2);
    call {:sourceloc} {:sourceloc_num 82} {:repair_instrumented} _LOG_WRITE_$$arg.(p1$1, BV32_ADD(BV32_MUL($imageW, v1$1), v0$1), BV32_OR(BV32_OR(BV32_OR(BV32_SHL(FP32_TO_SI32(FMUL32(0bv32, 1132396544bv32)), 24bv32), 
          BV32_SHL(FP32_TO_SI32(FMUL32(v85$1, 1132396544bv32)), 16bv32)), 
        BV32_SHL(FP32_TO_SI32(FMUL32(v84$1, 1132396544bv32)), 8bv32)), 
      FP32_TO_SI32(FMUL32(v83$1, 1132396544bv32))), $$arg.[BV32_ADD(BV32_MUL($imageW, v1$1), v0$1)]);
    call _UPDATE_WRITE_READ_BENIGN_FLAG_$$arg.(p1$2, BV32_ADD(BV32_MUL($imageW, v1$2), v0$2));
    assume {:do_not_predicate} {:check_id "check_state_1"} {:captureState "check_state_1"} {:sourceloc} {:sourceloc_num 82} {:repair_instrumented} true;
    call {:check_id "check_state_1"} {:sourceloc} {:sourceloc_num 82} {:repair_instrumented} _CHECK_WRITE_$$arg.(p1$2, BV32_ADD(BV32_MUL($imageW, v1$2), v0$2), BV32_OR(BV32_OR(BV32_OR(BV32_SHL(FP32_TO_SI32(FMUL32(0bv32, 1132396544bv32)), 24bv32), 
          BV32_SHL(FP32_TO_SI32(FMUL32(v85$2, 1132396544bv32)), 16bv32)), 
        BV32_SHL(FP32_TO_SI32(FMUL32(v84$2, 1132396544bv32)), 8bv32)), 
      FP32_TO_SI32(FMUL32(v83$2, 1132396544bv32))));
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_WRITE_$$arg."} true;
    $$arg.[BV32_ADD(BV32_MUL($imageW, v1$1), v0$1)] := (if p1$1
       then BV32_OR(BV32_OR(BV32_OR(BV32_SHL(FP32_TO_SI32(FMUL32(0bv32, 1132396544bv32)), 24bv32), 
            BV32_SHL(FP32_TO_SI32(FMUL32(v85$1, 1132396544bv32)), 16bv32)), 
          BV32_SHL(FP32_TO_SI32(FMUL32(v84$1, 1132396544bv32)), 8bv32)), 
        FP32_TO_SI32(FMUL32(v83$1, 1132396544bv32)))
       else $$arg.[BV32_ADD(BV32_MUL($imageW, v1$1), v0$1)]);
    $$arg.[BV32_ADD(BV32_MUL($imageW, v1$2), v0$2)] := (if p1$2
       then BV32_OR(BV32_OR(BV32_OR(BV32_SHL(FP32_TO_SI32(FMUL32(0bv32, 1132396544bv32)), 24bv32), 
            BV32_SHL(FP32_TO_SI32(FMUL32(v85$2, 1132396544bv32)), 16bv32)), 
          BV32_SHL(FP32_TO_SI32(FMUL32(v84$2, 1132396544bv32)), 8bv32)), 
        FP32_TO_SI32(FMUL32(v83$2, 1132396544bv32)))
       else $$arg.[BV32_ADD(BV32_MUL($imageW, v1$2), v0$2)]);
    p250$1 := (if b119 then b119 else p250$1);
    p250$2 := (if b119 then b119 else p250$2);
    call {:repair_barrier "b119"} {:repair_instrumented} {:sourceloc_num 83} $bugle_barrier_duplicated_1(1bv1, 1bv1, p250$1, p250$2);
    p252$1 := (if b120 then b120 else p252$1);
    p252$2 := (if b120 then b120 else p252$2);
    call {:repair_barrier "b120"} {:repair_instrumented} {:sourceloc_num 83} $bugle_grid_barrier_duplicated_0(p252$1, p252$2);
    return;

  $11.backedge:
    assume {:backedge} p126$1 || p126$2;
    assume {:captureState "loop_back_edge_state_0_0"} true;
    goto __partitioned_block_$11_0;

  $13.backedge:
    assume {:backedge} p136$1 || p136$2;
    assume {:captureState "loop_back_edge_state_1_0"} true;
    goto __partitioned_block_$13_0;

  $3.backedge:
    assume {:backedge} p6$1 || p6$2;
    assume {:captureState "loop_back_edge_state_2_0"} true;
    goto __partitioned_block_$3_0;

  $5.backedge:
    assume {:backedge} p16$1 || p16$2;
    assume {:captureState "loop_back_edge_state_3_0"} true;
    goto __partitioned_block_$5_0;
}



procedure {:source_name "_Z5tex2D7textureI6uchar4Li2EL19cudaTextureReadMode1EEff"} $_Z5tex2D7textureI6uchar4Li2EL19cudaTextureReadMode1EEff(_P$1: bool, 
    $0$1: bv96, 
    $1$1: bv32, 
    $2$1: bv32, 
    _V$ret$1: bv128, 
    _P$2: bool, 
    $0$2: bv96, 
    $1$2: bv32, 
    $2$2: bv32, 
    _V$ret$2: bv128)
   returns ($ret$1: bv128, $ret$2: bv128);
  ensures !_P$1 ==> _V$ret$1 == $ret$1;
  ensures !_P$2 ==> _V$ret$2 == $ret$2;



procedure {:source_name "__expf"} $__expf(_P$1: bool, $0$1: bv32, _V$ret$1: bv32, _P$2: bool, $0$2: bv32, _V$ret$2: bv32)
   returns ($ret$1: bv32, $ret$2: bv32);
  ensures !_P$1 ==> _V$ret$1 == $ret$1;
  ensures !_P$2 ==> _V$ret$2 == $ret$2;



procedure {:source_name "_Z5lerpffff"} $_Z5lerpffff(_P$1: bool, 
    $0$1: bv32, 
    $1$1: bv32, 
    $2$1: bv32, 
    _V$ret$1: bv32, 
    _P$2: bool, 
    $0$2: bv32, 
    $1$2: bv32, 
    $2$2: bv32, 
    _V$ret$2: bv32)
   returns ($ret$1: bv32, $ret$2: bv32);
  ensures !_P$1 ==> _V$ret$1 == $ret$1;
  ensures !_P$2 ==> _V$ret$2 == $ret$2;



axiom (if group_size_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;

axiom (if num_groups_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;

axiom (if group_size_x == 8bv32 then 1bv1 else 0bv1) != 0bv1;

axiom (if group_size_y == 8bv32 then 1bv1 else 0bv1) != 0bv1;

axiom (if num_groups_x == 40bv32 then 1bv1 else 0bv1) != 0bv1;

axiom (if num_groups_y == 51bv32 then 1bv1 else 0bv1) != 0bv1;

axiom (if sub_group_size == 32bv32 then 1bv1 else 0bv1) != 0bv1;

procedure {:grid_barrier} $bugle_grid_barrier();



var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b1: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b2: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b3: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b4: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b5: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b6: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b7: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b8: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b9: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b10: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b11: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b12: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b13: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b14: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b15: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b16: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b17: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b18: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b19: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b20: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b21: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b22: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b23: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b24: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b25: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b26: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b27: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b28: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b29: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b30: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b31: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b32: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b33: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b34: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b35: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b36: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b37: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b38: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b39: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b40: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b41: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b42: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b43: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b44: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b45: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b46: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b47: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b48: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b49: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b50: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b51: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b52: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b53: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b54: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b55: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b56: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b57: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b58: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b59: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b60: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b61: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b62: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b63: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b64: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b65: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b66: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b67: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b68: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b69: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b70: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b71: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b72: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b73: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b74: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b75: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b76: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b77: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b78: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b79: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b80: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b81: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b82: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b83: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b84: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b85: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b86: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b87: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b88: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b89: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b90: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b91: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b92: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b93: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b94: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b95: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b96: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b97: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b98: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b99: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b100: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b101: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b102: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b103: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b104: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b105: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b106: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b107: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b108: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b109: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b110: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b111: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b112: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b113: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b114: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b115: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b116: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b117: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b118: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b119: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b120: bool;

const {:local_id_z} local_id_z$1: bv32;

const {:local_id_z} local_id_z$2: bv32;

const {:group_id_z} group_id_z$1: bv32;

const {:group_id_z} group_id_z$2: bv32;

procedure {:inline 1} {:grid_barrier} $bugle_grid_barrier_duplicated_0(_P$1: bool, _P$2: bool);
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:barrier} $bugle_barrier_duplicated_1($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:grid_barrier} $bugle_grid_barrier_duplicated_2(_P$1: bool, _P$2: bool);
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:barrier} $bugle_barrier_duplicated_3($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:grid_barrier} $bugle_grid_barrier_duplicated_4(_P$1: bool, _P$2: bool);
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:barrier} $bugle_barrier_duplicated_5($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:grid_barrier} $bugle_grid_barrier_duplicated_6(_P$1: bool, _P$2: bool);
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:barrier} $bugle_barrier_duplicated_7($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:grid_barrier} $bugle_grid_barrier_duplicated_8(_P$1: bool, _P$2: bool);
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:barrier} $bugle_barrier_duplicated_9($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:grid_barrier} $bugle_grid_barrier_duplicated_10(_P$1: bool, _P$2: bool);
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:barrier} $bugle_barrier_duplicated_11($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:grid_barrier} $bugle_grid_barrier_duplicated_12(_P$1: bool, _P$2: bool);
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:barrier} $bugle_barrier_duplicated_13($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:grid_barrier} $bugle_grid_barrier_duplicated_14(_P$1: bool, _P$2: bool);
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:barrier} $bugle_barrier_duplicated_15($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:grid_barrier} $bugle_grid_barrier_duplicated_16(_P$1: bool, _P$2: bool);
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:barrier} $bugle_barrier_duplicated_17($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:grid_barrier} $bugle_grid_barrier_duplicated_18(_P$1: bool, _P$2: bool);
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:barrier} $bugle_barrier_duplicated_19($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:grid_barrier} $bugle_grid_barrier_duplicated_20(_P$1: bool, _P$2: bool);
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:barrier} $bugle_barrier_duplicated_21($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:grid_barrier} $bugle_grid_barrier_duplicated_22(_P$1: bool, _P$2: bool);
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:barrier} $bugle_barrier_duplicated_23($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:grid_barrier} $bugle_grid_barrier_duplicated_24(_P$1: bool, _P$2: bool);
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:barrier} $bugle_barrier_duplicated_25($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:grid_barrier} $bugle_grid_barrier_duplicated_26(_P$1: bool, _P$2: bool);
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:barrier} $bugle_barrier_duplicated_27($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:grid_barrier} $bugle_grid_barrier_duplicated_28(_P$1: bool, _P$2: bool);
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:barrier} $bugle_barrier_duplicated_29($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:grid_barrier} $bugle_grid_barrier_duplicated_30(_P$1: bool, _P$2: bool);
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:barrier} $bugle_barrier_duplicated_31($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:grid_barrier} $bugle_grid_barrier_duplicated_32(_P$1: bool, _P$2: bool);
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:barrier} $bugle_barrier_duplicated_33($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:grid_barrier} $bugle_grid_barrier_duplicated_34(_P$1: bool, _P$2: bool);
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:barrier} $bugle_barrier_duplicated_35($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:grid_barrier} $bugle_grid_barrier_duplicated_36(_P$1: bool, _P$2: bool);
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:barrier} $bugle_barrier_duplicated_37($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:grid_barrier} $bugle_grid_barrier_duplicated_38(_P$1: bool, _P$2: bool);
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:barrier} $bugle_barrier_duplicated_39($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:grid_barrier} $bugle_grid_barrier_duplicated_40(_P$1: bool, _P$2: bool);
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:barrier} $bugle_barrier_duplicated_41($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:grid_barrier} $bugle_grid_barrier_duplicated_42(_P$1: bool, _P$2: bool);
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:barrier} $bugle_barrier_duplicated_43($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:grid_barrier} $bugle_grid_barrier_duplicated_44(_P$1: bool, _P$2: bool);
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:barrier} $bugle_barrier_duplicated_45($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:grid_barrier} $bugle_grid_barrier_duplicated_46(_P$1: bool, _P$2: bool);
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:barrier} $bugle_barrier_duplicated_47($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:grid_barrier} $bugle_grid_barrier_duplicated_48(_P$1: bool, _P$2: bool);
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:barrier} $bugle_barrier_duplicated_49($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:grid_barrier} $bugle_grid_barrier_duplicated_50(_P$1: bool, _P$2: bool);
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:barrier} $bugle_barrier_duplicated_51($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:grid_barrier} $bugle_grid_barrier_duplicated_52(_P$1: bool, _P$2: bool);
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:barrier} $bugle_barrier_duplicated_53($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:grid_barrier} $bugle_grid_barrier_duplicated_54(_P$1: bool, _P$2: bool);
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:barrier} $bugle_barrier_duplicated_55($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:grid_barrier} $bugle_grid_barrier_duplicated_56(_P$1: bool, _P$2: bool);
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:barrier} $bugle_barrier_duplicated_57($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:grid_barrier} $bugle_grid_barrier_duplicated_58(_P$1: bool, _P$2: bool);
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:barrier} $bugle_barrier_duplicated_59($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:grid_barrier} $bugle_grid_barrier_duplicated_60(_P$1: bool, _P$2: bool);
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:barrier} $bugle_barrier_duplicated_61($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:grid_barrier} $bugle_grid_barrier_duplicated_62(_P$1: bool, _P$2: bool);
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:barrier} $bugle_barrier_duplicated_63($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:grid_barrier} $bugle_grid_barrier_duplicated_64(_P$1: bool, _P$2: bool);
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:barrier} $bugle_barrier_duplicated_65($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:grid_barrier} $bugle_grid_barrier_duplicated_66(_P$1: bool, _P$2: bool);
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:barrier} $bugle_barrier_duplicated_67($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:grid_barrier} $bugle_grid_barrier_duplicated_68(_P$1: bool, _P$2: bool);
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:barrier} $bugle_barrier_duplicated_69($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:grid_barrier} $bugle_grid_barrier_duplicated_70(_P$1: bool, _P$2: bool);
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:barrier} $bugle_barrier_duplicated_71($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:grid_barrier} $bugle_grid_barrier_duplicated_72(_P$1: bool, _P$2: bool);
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:barrier} $bugle_barrier_duplicated_73($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:grid_barrier} $bugle_grid_barrier_duplicated_74(_P$1: bool, _P$2: bool);
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:barrier} $bugle_barrier_duplicated_75($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:grid_barrier} $bugle_grid_barrier_duplicated_76(_P$1: bool, _P$2: bool);
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:barrier} $bugle_barrier_duplicated_77($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:grid_barrier} $bugle_grid_barrier_duplicated_78(_P$1: bool, _P$2: bool);
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:barrier} $bugle_barrier_duplicated_79($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:grid_barrier} $bugle_grid_barrier_duplicated_80(_P$1: bool, _P$2: bool);
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:barrier} $bugle_barrier_duplicated_81($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:grid_barrier} $bugle_grid_barrier_duplicated_82(_P$1: bool, _P$2: bool);
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:barrier} $bugle_barrier_duplicated_83($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:grid_barrier} $bugle_grid_barrier_duplicated_84(_P$1: bool, _P$2: bool);
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:barrier} $bugle_barrier_duplicated_85($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:grid_barrier} $bugle_grid_barrier_duplicated_86(_P$1: bool, _P$2: bool);
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:barrier} $bugle_barrier_duplicated_87($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:grid_barrier} $bugle_grid_barrier_duplicated_88(_P$1: bool, _P$2: bool);
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:barrier} $bugle_barrier_duplicated_89($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:grid_barrier} $bugle_grid_barrier_duplicated_90(_P$1: bool, _P$2: bool);
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:barrier} $bugle_barrier_duplicated_91($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:grid_barrier} $bugle_grid_barrier_duplicated_92(_P$1: bool, _P$2: bool);
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:barrier} $bugle_barrier_duplicated_93($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:grid_barrier} $bugle_grid_barrier_duplicated_94(_P$1: bool, _P$2: bool);
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:barrier} $bugle_barrier_duplicated_95($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:grid_barrier} $bugle_grid_barrier_duplicated_96(_P$1: bool, _P$2: bool);
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:barrier} $bugle_barrier_duplicated_97($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:grid_barrier} $bugle_grid_barrier_duplicated_98(_P$1: bool, _P$2: bool);
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:barrier} $bugle_barrier_duplicated_99($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:grid_barrier} $bugle_grid_barrier_duplicated_100(_P$1: bool, _P$2: bool);
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:barrier} $bugle_barrier_duplicated_101($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:grid_barrier} $bugle_grid_barrier_duplicated_102(_P$1: bool, _P$2: bool);
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:barrier} $bugle_barrier_duplicated_103($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:grid_barrier} $bugle_grid_barrier_duplicated_104(_P$1: bool, _P$2: bool);
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:barrier} $bugle_barrier_duplicated_105($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:grid_barrier} $bugle_grid_barrier_duplicated_106(_P$1: bool, _P$2: bool);
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:barrier} $bugle_barrier_duplicated_107($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:grid_barrier} $bugle_grid_barrier_duplicated_108(_P$1: bool, _P$2: bool);
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:barrier} $bugle_barrier_duplicated_109($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:grid_barrier} $bugle_grid_barrier_duplicated_110(_P$1: bool, _P$2: bool);
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:barrier} $bugle_barrier_duplicated_111($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:grid_barrier} $bugle_grid_barrier_duplicated_112(_P$1: bool, _P$2: bool);
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:barrier} $bugle_barrier_duplicated_113($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:grid_barrier} $bugle_grid_barrier_duplicated_114(_P$1: bool, _P$2: bool);
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:barrier} $bugle_barrier_duplicated_115($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:grid_barrier} $bugle_grid_barrier_duplicated_116(_P$1: bool, _P$2: bool);
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:barrier} $bugle_barrier_duplicated_117($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:grid_barrier} $bugle_grid_barrier_duplicated_118(_P$1: bool, _P$2: bool);
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



procedure {:inline 1} {:barrier} $bugle_barrier_duplicated_119($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ4NLM2PjiiffE8fWeights;



const _WATCHED_VALUE_$$arg.: bv32;

procedure {:inline 1} _LOG_READ_$$arg.(_P: bool, _offset: bv32, _value: bv32);
  modifies _READ_HAS_OCCURRED_$$arg.;



implementation {:inline 1} _LOG_READ_$$arg.(_P: bool, _offset: bv32, _value: bv32)
{

  log_access_entry:
    _READ_HAS_OCCURRED_$$arg. := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$arg. == _value
       then true
       else _READ_HAS_OCCURRED_$$arg.);
    return;
}



procedure _CHECK_READ_$$arg.(_P: bool, _offset: bv32, _value: bv32);
  requires {:source_name "dst"} {:array "$$arg."} {:race} {:write_read} !(
    _P
     && _WRITE_HAS_OCCURRED_$$arg.
     && _WATCHED_OFFSET == _offset
     && _WRITE_READ_BENIGN_FLAG_$$arg.);
  requires {:source_name "dst"} {:array "$$arg."} {:race} {:atomic_read} !(_P && _ATOMIC_HAS_OCCURRED_$$arg. && _WATCHED_OFFSET == _offset);



var _WRITE_READ_BENIGN_FLAG_$$arg.: bool;

procedure {:inline 1} _LOG_WRITE_$$arg.(_P: bool, _offset: bv32, _value: bv32, _value_old: bv32);
  modifies _WRITE_HAS_OCCURRED_$$arg., _WRITE_READ_BENIGN_FLAG_$$arg.;



implementation {:inline 1} _LOG_WRITE_$$arg.(_P: bool, _offset: bv32, _value: bv32, _value_old: bv32)
{

  log_access_entry:
    _WRITE_HAS_OCCURRED_$$arg. := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$arg. == _value
       then true
       else _WRITE_HAS_OCCURRED_$$arg.);
    _WRITE_READ_BENIGN_FLAG_$$arg. := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$arg. == _value
       then _value != _value_old
       else _WRITE_READ_BENIGN_FLAG_$$arg.);
    return;
}



procedure _CHECK_WRITE_$$arg.(_P: bool, _offset: bv32, _value: bv32);
  requires {:source_name "dst"} {:array "$$arg."} {:race} {:write_write} !(
    _P
     && _WRITE_HAS_OCCURRED_$$arg.
     && _WATCHED_OFFSET == _offset
     && _WATCHED_VALUE_$$arg. != _value);
  requires {:source_name "dst"} {:array "$$arg."} {:race} {:read_write} !(
    _P
     && _READ_HAS_OCCURRED_$$arg.
     && _WATCHED_OFFSET == _offset
     && _WATCHED_VALUE_$$arg. != _value);
  requires {:source_name "dst"} {:array "$$arg."} {:race} {:atomic_write} !(_P && _ATOMIC_HAS_OCCURRED_$$arg. && _WATCHED_OFFSET == _offset);



procedure {:inline 1} _LOG_ATOMIC_$$arg.(_P: bool, _offset: bv32);
  modifies _ATOMIC_HAS_OCCURRED_$$arg.;



implementation {:inline 1} _LOG_ATOMIC_$$arg.(_P: bool, _offset: bv32)
{

  log_access_entry:
    _ATOMIC_HAS_OCCURRED_$$arg. := (if _P && _TRACKING && _WATCHED_OFFSET == _offset
       then true
       else _ATOMIC_HAS_OCCURRED_$$arg.);
    return;
}



procedure _CHECK_ATOMIC_$$arg.(_P: bool, _offset: bv32);
  requires {:source_name "dst"} {:array "$$arg."} {:race} {:write_atomic} !(_P && _WRITE_HAS_OCCURRED_$$arg. && _WATCHED_OFFSET == _offset);
  requires {:source_name "dst"} {:array "$$arg."} {:race} {:read_atomic} !(_P && _READ_HAS_OCCURRED_$$arg. && _WATCHED_OFFSET == _offset);



procedure {:inline 1} _UPDATE_WRITE_READ_BENIGN_FLAG_$$arg.(_P: bool, _offset: bv32);
  modifies _WRITE_READ_BENIGN_FLAG_$$arg.;



implementation {:inline 1} _UPDATE_WRITE_READ_BENIGN_FLAG_$$arg.(_P: bool, _offset: bv32)
{

  _UPDATE_BENIGN_FLAG:
    _WRITE_READ_BENIGN_FLAG_$$arg. := (if _P && _WRITE_HAS_OCCURRED_$$arg. && _WATCHED_OFFSET == _offset
       then false
       else _WRITE_READ_BENIGN_FLAG_$$arg.);
    return;
}



const _WATCHED_VALUE_$$texImage: bv8;

procedure {:inline 1} _LOG_READ_$$texImage(_P: bool, _offset: bv32, _value: bv8);
  modifies _READ_HAS_OCCURRED_$$texImage;



implementation {:inline 1} _LOG_READ_$$texImage(_P: bool, _offset: bv32, _value: bv8)
{

  log_access_entry:
    _READ_HAS_OCCURRED_$$texImage := (if _P
         && _TRACKING
         && _WATCHED_OFFSET == _offset
         && _WATCHED_VALUE_$$texImage == _value
       then true
       else _READ_HAS_OCCURRED_$$texImage);
    return;
}



procedure _CHECK_READ_$$texImage(_P: bool, _offset: bv32, _value: bv8);
  requires {:source_name "texImage"} {:array "$$texImage"} {:race} {:write_read} !(
    _P
     && _WRITE_HAS_OCCURRED_$$texImage
     && _WATCHED_OFFSET == _offset
     && _WRITE_READ_BENIGN_FLAG_$$texImage);
  requires {:source_name "texImage"} {:array "$$texImage"} {:race} {:atomic_read} !(_P && _ATOMIC_HAS_OCCURRED_$$texImage && _WATCHED_OFFSET == _offset);



var _WRITE_READ_BENIGN_FLAG_$$texImage: bool;

procedure {:inline 1} _LOG_WRITE_$$texImage(_P: bool, _offset: bv32, _value: bv8, _value_old: bv8);
  modifies _WRITE_HAS_OCCURRED_$$texImage, _WRITE_READ_BENIGN_FLAG_$$texImage;



implementation {:inline 1} _LOG_WRITE_$$texImage(_P: bool, _offset: bv32, _value: bv8, _value_old: bv8)
{

  log_access_entry:
    _WRITE_HAS_OCCURRED_$$texImage := (if _P
         && _TRACKING
         && _WATCHED_OFFSET == _offset
         && _WATCHED_VALUE_$$texImage == _value
       then true
       else _WRITE_HAS_OCCURRED_$$texImage);
    _WRITE_READ_BENIGN_FLAG_$$texImage := (if _P
         && _TRACKING
         && _WATCHED_OFFSET == _offset
         && _WATCHED_VALUE_$$texImage == _value
       then _value != _value_old
       else _WRITE_READ_BENIGN_FLAG_$$texImage);
    return;
}



procedure _CHECK_WRITE_$$texImage(_P: bool, _offset: bv32, _value: bv8);
  requires {:source_name "texImage"} {:array "$$texImage"} {:race} {:write_write} !(
    _P
     && _WRITE_HAS_OCCURRED_$$texImage
     && _WATCHED_OFFSET == _offset
     && _WATCHED_VALUE_$$texImage != _value);
  requires {:source_name "texImage"} {:array "$$texImage"} {:race} {:read_write} !(
    _P
     && _READ_HAS_OCCURRED_$$texImage
     && _WATCHED_OFFSET == _offset
     && _WATCHED_VALUE_$$texImage != _value);
  requires {:source_name "texImage"} {:array "$$texImage"} {:race} {:atomic_write} !(_P && _ATOMIC_HAS_OCCURRED_$$texImage && _WATCHED_OFFSET == _offset);



procedure {:inline 1} _LOG_ATOMIC_$$texImage(_P: bool, _offset: bv32);
  modifies _ATOMIC_HAS_OCCURRED_$$texImage;



implementation {:inline 1} _LOG_ATOMIC_$$texImage(_P: bool, _offset: bv32)
{

  log_access_entry:
    _ATOMIC_HAS_OCCURRED_$$texImage := (if _P && _TRACKING && _WATCHED_OFFSET == _offset
       then true
       else _ATOMIC_HAS_OCCURRED_$$texImage);
    return;
}



procedure _CHECK_ATOMIC_$$texImage(_P: bool, _offset: bv32);
  requires {:source_name "texImage"} {:array "$$texImage"} {:race} {:write_atomic} !(_P && _WRITE_HAS_OCCURRED_$$texImage && _WATCHED_OFFSET == _offset);
  requires {:source_name "texImage"} {:array "$$texImage"} {:race} {:read_atomic} !(_P && _READ_HAS_OCCURRED_$$texImage && _WATCHED_OFFSET == _offset);



procedure {:inline 1} _UPDATE_WRITE_READ_BENIGN_FLAG_$$texImage(_P: bool, _offset: bv32);
  modifies _WRITE_READ_BENIGN_FLAG_$$texImage;



implementation {:inline 1} _UPDATE_WRITE_READ_BENIGN_FLAG_$$texImage(_P: bool, _offset: bv32)
{

  _UPDATE_BENIGN_FLAG:
    _WRITE_READ_BENIGN_FLAG_$$texImage := (if _P && _WRITE_HAS_OCCURRED_$$texImage && _WATCHED_OFFSET == _offset
       then false
       else _WRITE_READ_BENIGN_FLAG_$$texImage);
    return;
}



const _WATCHED_VALUE_$$_ZZ4NLM2PjiiffE8fWeights: bv32;

procedure {:inline 1} _LOG_READ_$$_ZZ4NLM2PjiiffE8fWeights(_P: bool, _offset: bv32, _value: bv32);
  modifies _READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;



implementation {:inline 1} _LOG_READ_$$_ZZ4NLM2PjiiffE8fWeights(_P: bool, _offset: bv32, _value: bv32)
{

  log_access_entry:
    _READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights := (if _P
         && group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && _TRACKING
         && _WATCHED_OFFSET == _offset
         && _WATCHED_VALUE_$$_ZZ4NLM2PjiiffE8fWeights == _value
       then true
       else _READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights);
    return;
}



procedure _CHECK_READ_$$_ZZ4NLM2PjiiffE8fWeights(_P: bool, _offset: bv32, _value: bv32);
  requires {:source_name "fWeights"} {:array "$$_ZZ4NLM2PjiiffE8fWeights"} {:race} {:write_read} !(
    _P
     && _WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights
     && _WATCHED_OFFSET == _offset
     && _WRITE_READ_BENIGN_FLAG_$$_ZZ4NLM2PjiiffE8fWeights
     && group_id_x$1 == group_id_x$2
     && group_id_y$1 == group_id_y$2
     && group_id_z$1 == group_id_z$2);
  requires {:source_name "fWeights"} {:array "$$_ZZ4NLM2PjiiffE8fWeights"} {:race} {:atomic_read} !(
    _P
     && _ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights
     && _WATCHED_OFFSET == _offset
     && group_id_x$1 == group_id_x$2
     && group_id_y$1 == group_id_y$2
     && group_id_z$1 == group_id_z$2);



var _WRITE_READ_BENIGN_FLAG_$$_ZZ4NLM2PjiiffE8fWeights: bool;

procedure {:inline 1} _LOG_WRITE_$$_ZZ4NLM2PjiiffE8fWeights(_P: bool, _offset: bv32, _value: bv32, _value_old: bv32);
  modifies _WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights, _WRITE_READ_BENIGN_FLAG_$$_ZZ4NLM2PjiiffE8fWeights;



implementation {:inline 1} _LOG_WRITE_$$_ZZ4NLM2PjiiffE8fWeights(_P: bool, _offset: bv32, _value: bv32, _value_old: bv32)
{

  log_access_entry:
    _WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights := (if _P
         && group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && _TRACKING
         && _WATCHED_OFFSET == _offset
         && _WATCHED_VALUE_$$_ZZ4NLM2PjiiffE8fWeights == _value
       then true
       else _WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights);
    _WRITE_READ_BENIGN_FLAG_$$_ZZ4NLM2PjiiffE8fWeights := (if _P
         && group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && _TRACKING
         && _WATCHED_OFFSET == _offset
         && _WATCHED_VALUE_$$_ZZ4NLM2PjiiffE8fWeights == _value
       then _value != _value_old
       else _WRITE_READ_BENIGN_FLAG_$$_ZZ4NLM2PjiiffE8fWeights);
    return;
}



procedure _CHECK_WRITE_$$_ZZ4NLM2PjiiffE8fWeights(_P: bool, _offset: bv32, _value: bv32);
  requires {:source_name "fWeights"} {:array "$$_ZZ4NLM2PjiiffE8fWeights"} {:race} {:write_write} !(
    _P
     && _WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights
     && _WATCHED_OFFSET == _offset
     && _WATCHED_VALUE_$$_ZZ4NLM2PjiiffE8fWeights != _value
     && group_id_x$1 == group_id_x$2
     && group_id_y$1 == group_id_y$2
     && group_id_z$1 == group_id_z$2);
  requires {:source_name "fWeights"} {:array "$$_ZZ4NLM2PjiiffE8fWeights"} {:race} {:read_write} !(
    _P
     && _READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights
     && _WATCHED_OFFSET == _offset
     && _WATCHED_VALUE_$$_ZZ4NLM2PjiiffE8fWeights != _value
     && group_id_x$1 == group_id_x$2
     && group_id_y$1 == group_id_y$2
     && group_id_z$1 == group_id_z$2);
  requires {:source_name "fWeights"} {:array "$$_ZZ4NLM2PjiiffE8fWeights"} {:race} {:atomic_write} !(
    _P
     && _ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights
     && _WATCHED_OFFSET == _offset
     && group_id_x$1 == group_id_x$2
     && group_id_y$1 == group_id_y$2
     && group_id_z$1 == group_id_z$2);



procedure {:inline 1} _LOG_ATOMIC_$$_ZZ4NLM2PjiiffE8fWeights(_P: bool, _offset: bv32);
  modifies _ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;



implementation {:inline 1} _LOG_ATOMIC_$$_ZZ4NLM2PjiiffE8fWeights(_P: bool, _offset: bv32)
{

  log_access_entry:
    _ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights := (if _P
         && group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && _TRACKING
         && _WATCHED_OFFSET == _offset
       then true
       else _ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights);
    return;
}



procedure _CHECK_ATOMIC_$$_ZZ4NLM2PjiiffE8fWeights(_P: bool, _offset: bv32);
  requires {:source_name "fWeights"} {:array "$$_ZZ4NLM2PjiiffE8fWeights"} {:race} {:write_atomic} !(
    _P
     && _WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights
     && _WATCHED_OFFSET == _offset
     && group_id_x$1 == group_id_x$2
     && group_id_y$1 == group_id_y$2
     && group_id_z$1 == group_id_z$2);
  requires {:source_name "fWeights"} {:array "$$_ZZ4NLM2PjiiffE8fWeights"} {:race} {:read_atomic} !(
    _P
     && _READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights
     && _WATCHED_OFFSET == _offset
     && group_id_x$1 == group_id_x$2
     && group_id_y$1 == group_id_y$2
     && group_id_z$1 == group_id_z$2);



procedure {:inline 1} _UPDATE_WRITE_READ_BENIGN_FLAG_$$_ZZ4NLM2PjiiffE8fWeights(_P: bool, _offset: bv32);
  modifies _WRITE_READ_BENIGN_FLAG_$$_ZZ4NLM2PjiiffE8fWeights;



implementation {:inline 1} _UPDATE_WRITE_READ_BENIGN_FLAG_$$_ZZ4NLM2PjiiffE8fWeights(_P: bool, _offset: bv32)
{

  _UPDATE_BENIGN_FLAG:
    _WRITE_READ_BENIGN_FLAG_$$_ZZ4NLM2PjiiffE8fWeights := (if _P
         && _WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights
         && _WATCHED_OFFSET == _offset
       then false
       else _WRITE_READ_BENIGN_FLAG_$$_ZZ4NLM2PjiiffE8fWeights);
    return;
}



var _TRACKING: bool;

implementation {:inline 1} $bugle_grid_barrier_duplicated_0(_P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume true ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} false;
    goto anon3;

  anon3:
    assume true ==> true ==> !_READ_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} false;
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} true;
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} true;
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_1($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1 ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(
      group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_grid_barrier_duplicated_2(_P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume true ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} false;
    goto anon3;

  anon3:
    assume true ==> true ==> !_READ_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} false;
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} true;
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} true;
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_3($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1 ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(
      group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_grid_barrier_duplicated_4(_P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume true ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} false;
    goto anon3;

  anon3:
    assume true ==> true ==> !_READ_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} false;
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} true;
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} true;
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_5($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1 ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(
      group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_grid_barrier_duplicated_6(_P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume true ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} false;
    goto anon3;

  anon3:
    assume true ==> true ==> !_READ_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} false;
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} true;
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} true;
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_7($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1 ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(
      group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_grid_barrier_duplicated_8(_P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume true ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} false;
    goto anon3;

  anon3:
    assume true ==> true ==> !_READ_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} false;
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} true;
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} true;
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_9($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1 ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(
      group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_grid_barrier_duplicated_10(_P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume true ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} false;
    goto anon3;

  anon3:
    assume true ==> true ==> !_READ_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} false;
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} true;
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} true;
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_11($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1 ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(
      group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_grid_barrier_duplicated_12(_P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume true ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} false;
    goto anon3;

  anon3:
    assume true ==> true ==> !_READ_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} false;
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} true;
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} true;
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_13($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1 ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(
      group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_grid_barrier_duplicated_14(_P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume true ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} false;
    goto anon3;

  anon3:
    assume true ==> true ==> !_READ_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} false;
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} true;
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} true;
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_15($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1 ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(
      group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_grid_barrier_duplicated_16(_P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume true ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} false;
    goto anon3;

  anon3:
    assume true ==> true ==> !_READ_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} false;
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} true;
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} true;
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_17($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1 ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(
      group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_grid_barrier_duplicated_18(_P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume true ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} false;
    goto anon3;

  anon3:
    assume true ==> true ==> !_READ_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} false;
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} true;
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} true;
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_19($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1 ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(
      group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_grid_barrier_duplicated_20(_P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume true ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} false;
    goto anon3;

  anon3:
    assume true ==> true ==> !_READ_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} false;
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} true;
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} true;
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_21($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1 ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(
      group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_grid_barrier_duplicated_22(_P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume true ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} false;
    goto anon3;

  anon3:
    assume true ==> true ==> !_READ_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} false;
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} true;
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} true;
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_23($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1 ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(
      group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_grid_barrier_duplicated_24(_P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume true ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} false;
    goto anon3;

  anon3:
    assume true ==> true ==> !_READ_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} false;
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} true;
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} true;
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_25($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1 ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(
      group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_grid_barrier_duplicated_26(_P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume true ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} false;
    goto anon3;

  anon3:
    assume true ==> true ==> !_READ_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} false;
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} true;
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} true;
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_27($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1 ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(
      group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_grid_barrier_duplicated_28(_P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume true ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} false;
    goto anon3;

  anon3:
    assume true ==> true ==> !_READ_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} false;
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} true;
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} true;
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_29($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1 ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(
      group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_grid_barrier_duplicated_30(_P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume true ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} false;
    goto anon3;

  anon3:
    assume true ==> true ==> !_READ_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} false;
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} true;
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} true;
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_31($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1 ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(
      group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_grid_barrier_duplicated_32(_P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume true ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} false;
    goto anon3;

  anon3:
    assume true ==> true ==> !_READ_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} false;
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} true;
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} true;
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_33($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1 ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(
      group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_grid_barrier_duplicated_34(_P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume true ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} false;
    goto anon3;

  anon3:
    assume true ==> true ==> !_READ_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} false;
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} true;
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} true;
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_35($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1 ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(
      group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_grid_barrier_duplicated_36(_P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume true ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} false;
    goto anon3;

  anon3:
    assume true ==> true ==> !_READ_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} false;
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} true;
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} true;
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_37($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1 ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(
      group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_grid_barrier_duplicated_38(_P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume true ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} false;
    goto anon3;

  anon3:
    assume true ==> true ==> !_READ_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} false;
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} true;
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} true;
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_39($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1 ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(
      group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_grid_barrier_duplicated_40(_P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume true ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} false;
    goto anon3;

  anon3:
    assume true ==> true ==> !_READ_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} false;
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} true;
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} true;
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_41($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1 ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(
      group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_grid_barrier_duplicated_42(_P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume true ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} false;
    goto anon3;

  anon3:
    assume true ==> true ==> !_READ_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} false;
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} true;
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} true;
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_43($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1 ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(
      group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_grid_barrier_duplicated_44(_P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume true ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} false;
    goto anon3;

  anon3:
    assume true ==> true ==> !_READ_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} false;
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} true;
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} true;
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_45($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1 ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(
      group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_grid_barrier_duplicated_46(_P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume true ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} false;
    goto anon3;

  anon3:
    assume true ==> true ==> !_READ_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} false;
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} true;
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} true;
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_47($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1 ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(
      group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_grid_barrier_duplicated_48(_P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume true ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} false;
    goto anon3;

  anon3:
    assume true ==> true ==> !_READ_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} false;
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} true;
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} true;
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_49($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1 ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(
      group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_grid_barrier_duplicated_50(_P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume true ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} false;
    goto anon3;

  anon3:
    assume true ==> true ==> !_READ_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} false;
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} true;
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} true;
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_51($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1 ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(
      group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_grid_barrier_duplicated_52(_P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume true ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} false;
    goto anon3;

  anon3:
    assume true ==> true ==> !_READ_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} false;
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} true;
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} true;
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_53($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1 ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(
      group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_grid_barrier_duplicated_54(_P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume true ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} false;
    goto anon3;

  anon3:
    assume true ==> true ==> !_READ_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} false;
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} true;
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} true;
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_55($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1 ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(
      group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_grid_barrier_duplicated_56(_P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume true ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} false;
    goto anon3;

  anon3:
    assume true ==> true ==> !_READ_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} false;
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} true;
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} true;
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_57($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1 ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(
      group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_grid_barrier_duplicated_58(_P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume true ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} false;
    goto anon3;

  anon3:
    assume true ==> true ==> !_READ_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} false;
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} true;
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} true;
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_59($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1 ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(
      group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_grid_barrier_duplicated_60(_P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume true ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} false;
    goto anon3;

  anon3:
    assume true ==> true ==> !_READ_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} false;
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} true;
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} true;
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_61($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1 ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(
      group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_grid_barrier_duplicated_62(_P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume true ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} false;
    goto anon3;

  anon3:
    assume true ==> true ==> !_READ_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} false;
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} true;
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} true;
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_63($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1 ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(
      group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_grid_barrier_duplicated_64(_P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume true ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} false;
    goto anon3;

  anon3:
    assume true ==> true ==> !_READ_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} false;
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} true;
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} true;
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_65($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1 ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(
      group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_grid_barrier_duplicated_66(_P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume true ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} false;
    goto anon3;

  anon3:
    assume true ==> true ==> !_READ_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} false;
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} true;
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} true;
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_67($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1 ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(
      group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_grid_barrier_duplicated_68(_P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume true ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} false;
    goto anon3;

  anon3:
    assume true ==> true ==> !_READ_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} false;
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} true;
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} true;
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_69($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1 ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(
      group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_grid_barrier_duplicated_70(_P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume true ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} false;
    goto anon3;

  anon3:
    assume true ==> true ==> !_READ_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} false;
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} true;
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} true;
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_71($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1 ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(
      group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_grid_barrier_duplicated_72(_P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume true ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} false;
    goto anon3;

  anon3:
    assume true ==> true ==> !_READ_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} false;
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} true;
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} true;
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_73($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1 ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(
      group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_grid_barrier_duplicated_74(_P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume true ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} false;
    goto anon3;

  anon3:
    assume true ==> true ==> !_READ_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} false;
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} true;
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} true;
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_75($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1 ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(
      group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_grid_barrier_duplicated_76(_P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume true ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} false;
    goto anon3;

  anon3:
    assume true ==> true ==> !_READ_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} false;
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} true;
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} true;
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_77($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1 ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(
      group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_grid_barrier_duplicated_78(_P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume true ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} false;
    goto anon3;

  anon3:
    assume true ==> true ==> !_READ_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} false;
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} true;
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} true;
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_79($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1 ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(
      group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_grid_barrier_duplicated_80(_P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume true ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} false;
    goto anon3;

  anon3:
    assume true ==> true ==> !_READ_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} false;
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} true;
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} true;
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_81($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1 ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(
      group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_grid_barrier_duplicated_82(_P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume true ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} false;
    goto anon3;

  anon3:
    assume true ==> true ==> !_READ_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} false;
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} true;
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} true;
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_83($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1 ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(
      group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_grid_barrier_duplicated_84(_P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume true ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} false;
    goto anon3;

  anon3:
    assume true ==> true ==> !_READ_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} false;
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} true;
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} true;
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_85($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1 ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(
      group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_grid_barrier_duplicated_86(_P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume true ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} false;
    goto anon3;

  anon3:
    assume true ==> true ==> !_READ_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} false;
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} true;
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} true;
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_87($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1 ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(
      group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_grid_barrier_duplicated_88(_P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume true ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} false;
    goto anon3;

  anon3:
    assume true ==> true ==> !_READ_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} false;
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} true;
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} true;
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_89($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1 ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(
      group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_grid_barrier_duplicated_90(_P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume true ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} false;
    goto anon3;

  anon3:
    assume true ==> true ==> !_READ_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} false;
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} true;
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} true;
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_91($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1 ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(
      group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_grid_barrier_duplicated_92(_P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume true ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} false;
    goto anon3;

  anon3:
    assume true ==> true ==> !_READ_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} false;
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} true;
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} true;
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_93($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1 ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(
      group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_grid_barrier_duplicated_94(_P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume true ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} false;
    goto anon3;

  anon3:
    assume true ==> true ==> !_READ_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} false;
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} true;
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} true;
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_95($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1 ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(
      group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_grid_barrier_duplicated_96(_P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume true ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} false;
    goto anon3;

  anon3:
    assume true ==> true ==> !_READ_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} false;
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} true;
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} true;
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_97($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1 ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(
      group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_grid_barrier_duplicated_98(_P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume true ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} false;
    goto anon3;

  anon3:
    assume true ==> true ==> !_READ_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} false;
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} true;
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} true;
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_99($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1 ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(
      group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_grid_barrier_duplicated_100(_P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume true ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} false;
    goto anon3;

  anon3:
    assume true ==> true ==> !_READ_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} false;
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} true;
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} true;
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_101($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1 ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(
      group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_grid_barrier_duplicated_102(_P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume true ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} false;
    goto anon3;

  anon3:
    assume true ==> true ==> !_READ_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} false;
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} true;
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} true;
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_103($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1 ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(
      group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_grid_barrier_duplicated_104(_P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume true ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} false;
    goto anon3;

  anon3:
    assume true ==> true ==> !_READ_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} false;
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} true;
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} true;
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_105($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1 ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(
      group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_grid_barrier_duplicated_106(_P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume true ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} false;
    goto anon3;

  anon3:
    assume true ==> true ==> !_READ_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} false;
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} true;
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} true;
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_107($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1 ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(
      group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_grid_barrier_duplicated_108(_P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume true ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} false;
    goto anon3;

  anon3:
    assume true ==> true ==> !_READ_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} false;
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} true;
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} true;
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_109($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1 ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(
      group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_grid_barrier_duplicated_110(_P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume true ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} false;
    goto anon3;

  anon3:
    assume true ==> true ==> !_READ_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} false;
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} true;
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} true;
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_111($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1 ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(
      group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_grid_barrier_duplicated_112(_P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume true ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} false;
    goto anon3;

  anon3:
    assume true ==> true ==> !_READ_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} false;
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} true;
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} true;
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_113($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1 ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(
      group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_grid_barrier_duplicated_114(_P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume true ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} false;
    goto anon3;

  anon3:
    assume true ==> true ==> !_READ_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} false;
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} true;
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} true;
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_115($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1 ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(
      group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_grid_barrier_duplicated_116(_P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume true ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} false;
    goto anon3;

  anon3:
    assume true ==> true ==> !_READ_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} false;
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} true;
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} true;
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_117($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1 ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(
      group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_grid_barrier_duplicated_118(_P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume true ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume true ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} false;
    goto anon3;

  anon3:
    assume true ==> true ==> !_READ_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} false;
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} true;
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} true;
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_119($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1 ==> !_READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    assume _P$1 && $0 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(
      group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$_ZZ4NLM2PjiiffE8fWeights;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



function {:bvbuiltin "bvsgt"} BV32_SGT(bv32, bv32) : bool;

function {:bvbuiltin "bvsge"} BV32_SGE(bv32, bv32) : bool;
