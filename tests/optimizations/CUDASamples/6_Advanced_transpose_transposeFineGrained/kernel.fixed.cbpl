type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x: [bv32]bv32, y: bv32)
   returns (z$1: bv32, A$1: [bv32]bv32, z$2: bv32, A$2: [bv32]bv32);



var {:source_name "odata"} {:global} $$arg.: [bv32]bv32;

axiom {:array_info "$$arg."} {:global} {:elem_width 32} {:source_name "odata"} {:source_elem_width 32} {:source_dimensions "*"} true;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$arg.: bool;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$arg.: bool;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$arg.: bool;

axiom {:array_info "$$arg.1"} {:global} {:elem_width 32} {:source_name "idata"} {:source_elem_width 32} {:source_dimensions "*"} true;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$arg.1: bool;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$arg.1: bool;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$arg.1: bool;

var {:source_name "block"} {:group_shared} $$_ZZ20transposeFineGrainedPfS_iiiE5block: [bv1][bv32]bv32;

axiom {:array_info "$$_ZZ20transposeFineGrainedPfS_iiiE5block"} {:group_shared} {:elem_width 32} {:source_name "block"} {:source_elem_width 32} {:source_dimensions "16,17"} true;

var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*,17"} _READ_HAS_OCCURRED_$$_ZZ20transposeFineGrainedPfS_iiiE5block: bool;

var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*,17"} _WRITE_HAS_OCCURRED_$$_ZZ20transposeFineGrainedPfS_iiiE5block: bool;

var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*,17"} _ATOMIC_HAS_OCCURRED_$$_ZZ20transposeFineGrainedPfS_iiiE5block: bool;

const _WATCHED_OFFSET: bv32;

const {:group_id_x} group_id_x$1: bv32;

const {:group_id_x} group_id_x$2: bv32;

const {:group_id_y} group_id_y$1: bv32;

const {:group_id_y} group_id_y$2: bv32;

const {:group_size_x} group_size_x: bv32;

const {:group_size_y} group_size_y: bv32;

const {:group_size_z} group_size_z: bv32;

const {:local_id_x} local_id_x$1: bv32;

const {:local_id_x} local_id_x$2: bv32;

const {:local_id_y} local_id_y$1: bv32;

const {:local_id_y} local_id_y$2: bv32;

const {:num_groups_x} num_groups_x: bv32;

const {:num_groups_y} num_groups_y: bv32;

const {:num_groups_z} num_groups_z: bv32;

const {:sub_group_size} sub_group_size: bv32;

function {:bvbuiltin "bvadd"} BV32_ADD(bv32, bv32) : bv32;

function {:bvbuiltin "bvmul"} BV32_MUL(bv32, bv32) : bv32;

function {:bvbuiltin "bvslt"} BV32_SLT(bv32, bv32) : bool;

procedure {:source_name "transposeFineGrained"} {:kernel} $_Z20transposeFineGrainedPfS_iii($width: bv32, $height: bv32, $nreps: bv32);
  requires {:sourceloc_num 0} {:thread 1} (if $width == 1024bv32 then 1bv1 else 0bv1) != 0bv1;
  requires {:sourceloc_num 1} {:thread 1} (if $height == 1024bv32 then 1bv1 else 0bv1) != 0bv1;
  requires {:sourceloc_num 2} {:thread 1} (if $nreps == 1bv32 then 1bv1 else 0bv1) != 0bv1;
  requires !_READ_HAS_OCCURRED_$$arg.
     && !_WRITE_HAS_OCCURRED_$$arg.
     && !_ATOMIC_HAS_OCCURRED_$$arg.;
  requires !_READ_HAS_OCCURRED_$$arg.1
     && !_WRITE_HAS_OCCURRED_$$arg.1
     && !_ATOMIC_HAS_OCCURRED_$$arg.1;
  requires !_READ_HAS_OCCURRED_$$_ZZ20transposeFineGrainedPfS_iiiE5block
     && !_WRITE_HAS_OCCURRED_$$_ZZ20transposeFineGrainedPfS_iiiE5block
     && !_ATOMIC_HAS_OCCURRED_$$_ZZ20transposeFineGrainedPfS_iiiE5block;
  requires BV32_SGT(group_size_x, 0bv32);
  requires BV32_SGT(num_groups_x, 0bv32);
  requires BV32_SGE(group_id_x$1, 0bv32);
  requires BV32_SGE(group_id_x$2, 0bv32);
  requires BV32_SLT(group_id_x$1, num_groups_x);
  requires BV32_SLT(group_id_x$2, num_groups_x);
  requires BV32_SGE(local_id_x$1, 0bv32);
  requires BV32_SGE(local_id_x$2, 0bv32);
  requires BV32_SLT(local_id_x$1, group_size_x);
  requires BV32_SLT(local_id_x$2, group_size_x);
  requires BV32_SGT(group_size_y, 0bv32);
  requires BV32_SGT(num_groups_y, 0bv32);
  requires BV32_SGE(group_id_y$1, 0bv32);
  requires BV32_SGE(group_id_y$2, 0bv32);
  requires BV32_SLT(group_id_y$1, num_groups_y);
  requires BV32_SLT(group_id_y$2, num_groups_y);
  requires BV32_SGE(local_id_y$1, 0bv32);
  requires BV32_SGE(local_id_y$2, 0bv32);
  requires BV32_SLT(local_id_y$1, group_size_y);
  requires BV32_SLT(local_id_y$2, group_size_y);
  requires BV32_SGT(group_size_z, 0bv32);
  requires BV32_SGT(num_groups_z, 0bv32);
  requires BV32_SGE(group_id_z$1, 0bv32);
  requires BV32_SGE(group_id_z$2, 0bv32);
  requires BV32_SLT(group_id_z$1, num_groups_z);
  requires BV32_SLT(group_id_z$2, num_groups_z);
  requires BV32_SGE(local_id_z$1, 0bv32);
  requires BV32_SGE(local_id_z$2, 0bv32);
  requires BV32_SLT(local_id_z$1, group_size_z);
  requires BV32_SLT(local_id_z$2, group_size_z);
  requires group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> local_id_x$1 != local_id_x$2
       || local_id_y$1 != local_id_y$2
       || local_id_z$1 != local_id_z$2;
  modifies b20, b19, b18, b17, b16, b15, b14, b13, b12, b11, b10, b9, b8, b7, b6, b5, b4, b3, b2, b1, $$arg., $$_ZZ20transposeFineGrainedPfS_iiiE5block, _TRACKING, _READ_HAS_OCCURRED_$$_ZZ20transposeFineGrainedPfS_iiiE5block, _WRITE_HAS_OCCURRED_$$arg., _WRITE_READ_BENIGN_FLAG_$$arg., _WRITE_HAS_OCCURRED_$$_ZZ20transposeFineGrainedPfS_iiiE5block, _WRITE_READ_BENIGN_FLAG_$$_ZZ20transposeFineGrainedPfS_iiiE5block;



implementation {:source_name "transposeFineGrained"} {:kernel} $_Z20transposeFineGrainedPfS_iii($width: bv32, $height: bv32, $nreps: bv32)
{
  var $.02: bv32;
  var $.01: bv32;
  var $.0: bv32;
  var v0$1: bv32;
  var v0$2: bv32;
  var v1: bool;
  var v2: bool;
  var v3$1: bv32;
  var v3$2: bv32;
  var v4: bool;
  var v5$1: bv32;
  var v5$2: bv32;
  var p0$1: bool;
  var p0$2: bool;
  var p1$1: bool;
  var p1$2: bool;
  var p2$1: bool;
  var p2$2: bool;
  var p3$1: bool;
  var p3$2: bool;
  var p4$1: bool;
  var p4$2: bool;
  var p5$1: bool;
  var p5$2: bool;
  var p6$1: bool;
  var p6$2: bool;
  var p7$1: bool;
  var p7$2: bool;
  var p8$1: bool;
  var p8$2: bool;
  var p9$1: bool;
  var p9$2: bool;
  var p10$1: bool;
  var p10$2: bool;
  var p11$1: bool;
  var p11$2: bool;
  var p12$1: bool;
  var p12$2: bool;
  var p13$1: bool;
  var p13$2: bool;
  var p14$1: bool;
  var p14$2: bool;
  var p15$1: bool;
  var p15$2: bool;
  var p16$1: bool;
  var p16$2: bool;
  var p17$1: bool;
  var p17$2: bool;
  var p18$1: bool;
  var p18$2: bool;
  var p19$1: bool;
  var p19$2: bool;
  var p20$1: bool;
  var p20$2: bool;
  var p21$1: bool;
  var p21$2: bool;
  var p22$1: bool;
  var p22$2: bool;
  var p23$1: bool;
  var p23$2: bool;
  var p24$1: bool;
  var p24$2: bool;
  var p25$1: bool;
  var p25$2: bool;
  var p26$1: bool;
  var p26$2: bool;
  var p27$1: bool;
  var p27$2: bool;
  var p28$1: bool;
  var p28$2: bool;
  var p29$1: bool;
  var p29$2: bool;
  var p30$1: bool;
  var p30$2: bool;
  var p31$1: bool;
  var p31$2: bool;
  var p32$1: bool;
  var p32$2: bool;
  var p33$1: bool;
  var p33$2: bool;
  var p34$1: bool;
  var p34$2: bool;
  var p35$1: bool;
  var p35$2: bool;
  var p36$1: bool;
  var p36$2: bool;
  var p37$1: bool;
  var p37$2: bool;
  var p38$1: bool;
  var p38$2: bool;
  var p39$1: bool;
  var p39$2: bool;


  __partitioned_block_$0_0:
    b20 := false;
    b19 := false;
    b18 := false;
    b17 := false;
    b16 := false;
    b15 := true;
    b14 := false;
    b13 := false;
    b12 := false;
    b11 := false;
    b10 := false;
    b9 := false;
    b8 := false;
    b7 := false;
    b6 := false;
    b5 := false;
    b4 := false;
    b3 := false;
    b2 := false;
    b1 := false;
    p0$1 := false;
    p0$2 := false;
    p1$1 := false;
    p1$2 := false;
    p2$1 := false;
    p2$2 := false;
    p3$1 := false;
    p3$2 := false;
    p0$1 := (if b13 then b13 else p0$1);
    p0$2 := (if b13 then b13 else p0$2);
    call {:repair_barrier "b13"} {:repair_instrumented} {:sourceloc_num 3} $bugle_barrier_duplicated_19(1bv1, 1bv1, p0$1, p0$2);
    p2$1 := (if b14 then b14 else p2$1);
    p2$2 := (if b14 then b14 else p2$2);
    call {:repair_barrier "b14"} {:repair_instrumented} {:sourceloc_num 3} $bugle_grid_barrier_duplicated_18(p2$1, p2$2);
    v0$1 := BV32_ADD(BV32_ADD(BV32_MUL(group_id_x$1, 16bv32), local_id_x$1), 
      BV32_MUL(BV32_ADD(BV32_MUL(group_id_y$1, 16bv32), local_id_y$1), $width));
    v0$2 := BV32_ADD(BV32_ADD(BV32_MUL(group_id_x$2, 16bv32), local_id_x$2), 
      BV32_MUL(BV32_ADD(BV32_MUL(group_id_y$2, 16bv32), local_id_y$2), $width));
    $.02 := 0bv32;
    assume {:captureState "loop_entry_state_0_0"} true;
    goto __partitioned_block_$1_0;

  __partitioned_block_$1_0:
    assume {:captureState "loop_head_state_0"} true;
    assume {:tag "accessBreak"} true
       ==> 
      _WRITE_HAS_OCCURRED_$$_ZZ20transposeFineGrainedPfS_iiiE5block
       ==> local_id_y$1 == BV32_DIV(_WATCHED_OFFSET, 17bv32);
    assume {:tag "accessBreak"} true
       ==> 
      _READ_HAS_OCCURRED_$$_ZZ20transposeFineGrainedPfS_iiiE5block
       ==> local_id_x$1 == BV32_DIV(_WATCHED_OFFSET, 17bv32);
    assume {:tag "accessedOffsetsSatisfyPredicates"} true
       ==> 
      _WRITE_HAS_OCCURRED_$$_ZZ20transposeFineGrainedPfS_iiiE5block
       ==> BV32_AND(BV32_SUB(BV32_MUL(16bv32, 17bv32), 1bv32), _WATCHED_OFFSET)
         == BV32_AND(BV32_SUB(BV32_MUL(16bv32, 17bv32), 1bv32), 
          BV32_ADD(BV32_MUL(BV32_ADD(0bv32, local_id_y$1), 17bv32), local_id_x$1));
    assume {:tag "accessedOffsetsSatisfyPredicates"} true
       ==> 
      _READ_HAS_OCCURRED_$$_ZZ20transposeFineGrainedPfS_iiiE5block
       ==> BV32_AND(BV32_SUB(16bv32, 1bv32), _WATCHED_OFFSET)
         == BV32_AND(BV32_SUB(16bv32, 1bv32), 
          BV32_ADD(BV32_ADD(0bv32, local_id_y$1), BV32_MUL(local_id_x$1, 17bv32)));
    assume {:tag "accessBreak"} true
       ==> 
      _WRITE_HAS_OCCURRED_$$arg.
       ==> local_id_y$1
         == BV32_SUB(BV32_SUB(BV32_DIV(_WATCHED_OFFSET, $width), 
            BV32_DIV(BV32_MUL(group_id_x$1, 16bv32), $width)), 
          BV32_MUL(group_id_y$1, 16bv32));
    assume {:tag "accessBreak"} true
       ==> 
      _WRITE_HAS_OCCURRED_$$arg.
       ==> group_id_y$1
         == BV32_SUB(BV32_SUB(BV32_DIV(BV32_DIV(_WATCHED_OFFSET, $width), 16bv32), 
            BV32_DIV(group_id_x$1, $width)), 
          BV32_DIV(local_id_y$1, 16bv32));
    assume {:tag "accessBreak"} true
       ==> 
      _WRITE_HAS_OCCURRED_$$arg.
       ==> group_id_x$1
         == BV32_SUB(BV32_SUB(BV32_DIV(_WATCHED_OFFSET, 16bv32), BV32_MUL(group_id_y$1, $width)), 
          BV32_DIV(BV32_MUL(local_id_y$1, $width), 16bv32));
    assume {:tag "accessedOffsetsSatisfyPredicates"} true
       ==> 
      _WRITE_HAS_OCCURRED_$$arg.
       ==> BV32_AND(BV32_SUB(BV32_MUL(16bv32, $height), 1bv32), _WATCHED_OFFSET)
         == BV32_AND(BV32_SUB(BV32_MUL(16bv32, $height), 1bv32), 
          BV32_ADD(BV32_MUL(0bv32, $height), 
            BV32_ADD(BV32_ADD(BV32_MUL(group_id_x$1, 16bv32), local_id_x$1), 
              BV32_MUL(BV32_ADD(BV32_MUL(group_id_y$1, 16bv32), local_id_y$1), $width))));
    assert {:tag "groupSharedArraysDisjointAcrossGroups"} _ATOMIC_HAS_OCCURRED_$$_ZZ20transposeFineGrainedPfS_iiiE5block
       ==> group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2;
    assert {:tag "groupSharedArraysDisjointAcrossGroups"} _WRITE_HAS_OCCURRED_$$_ZZ20transposeFineGrainedPfS_iiiE5block
       ==> group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2;
    assert {:tag "groupSharedArraysDisjointAcrossGroups"} _READ_HAS_OCCURRED_$$_ZZ20transposeFineGrainedPfS_iiiE5block
       ==> group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2;
    assume {:tag "loopBound"} {:thread 1} true ==> BV32_UGE($.02, 0bv32);
    assume {:tag "loopBound"} {:thread 1} true ==> BV32_SGE($.02, 0bv32);
    assume {:tag "guardNonNeg"} {:thread 1} true ==> BV32_SLE(0bv32, $.02);
    p4$1 := false;
    p4$2 := false;
    p5$1 := false;
    p5$2 := false;
    p6$1 := false;
    p6$2 := false;
    p7$1 := false;
    p7$2 := false;
    p8$1 := false;
    p8$2 := false;
    p9$1 := false;
    p9$2 := false;
    p10$1 := false;
    p10$2 := false;
    p11$1 := false;
    p11$2 := false;
    p5$1 := (if b11 then b11 else p5$1);
    p5$2 := (if b11 then b11 else p5$2);
    call {:repair_barrier "b11"} {:repair_instrumented} {:sourceloc_num 4} $bugle_barrier_duplicated_17(1bv1, 1bv1, p5$1, p5$2);
    p7$1 := (if b12 then b12 else p7$1);
    p7$2 := (if b12 then b12 else p7$2);
    call {:repair_barrier "b12"} {:repair_instrumented} {:sourceloc_num 4} $bugle_grid_barrier_duplicated_16(p7$1, p7$2);
    v1 := BV32_SLT($.02, $nreps);
    goto __partitioned_block_$truebb_0, $falsebb;

  $falsebb:
    assume {:partition} !v1;
    return;

  __partitioned_block_$truebb_0:
    assume {:partition} v1;
    p9$1 := (if b17 then b17 else p9$1);
    p9$2 := (if b17 then b17 else p9$2);
    call {:repair_barrier "b17"} {:repair_instrumented} {:sourceloc_num 5} $bugle_barrier_duplicated_15(1bv1, 1bv1, p9$1, p9$2);
    p11$1 := (if b18 then b18 else p11$1);
    p11$2 := (if b18 then b18 else p11$2);
    call {:repair_barrier "b18"} {:repair_instrumented} {:sourceloc_num 5} $bugle_grid_barrier_duplicated_14(p11$1, p11$2);
    $.01 := 0bv32;
    assume {:captureState "loop_entry_state_2_0"} true;
    goto __partitioned_block_$3_0;

  __partitioned_block_$3_0:
    assume {:captureState "loop_head_state_2"} true;
    assume {:tag "accessBreak"} true
       ==> 
      _WRITE_HAS_OCCURRED_$$_ZZ20transposeFineGrainedPfS_iiiE5block
       ==> local_id_y$1 == BV32_DIV(_WATCHED_OFFSET, 17bv32);
    assume {:tag "accessedOffsetsSatisfyPredicates"} true
       ==> 
      _WRITE_HAS_OCCURRED_$$_ZZ20transposeFineGrainedPfS_iiiE5block
       ==> BV32_AND(BV32_SUB(BV32_MUL(16bv32, 17bv32), 1bv32), _WATCHED_OFFSET)
         == BV32_AND(BV32_SUB(BV32_MUL(16bv32, 17bv32), 1bv32), 
          BV32_ADD(BV32_MUL(BV32_ADD(0bv32, local_id_y$1), 17bv32), local_id_x$1));
    assert {:tag "groupSharedArraysDisjointAcrossGroups"} _ATOMIC_HAS_OCCURRED_$$_ZZ20transposeFineGrainedPfS_iiiE5block
       ==> group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2;
    assert {:tag "groupSharedArraysDisjointAcrossGroups"} _WRITE_HAS_OCCURRED_$$_ZZ20transposeFineGrainedPfS_iiiE5block
       ==> group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2;
    assert {:tag "groupSharedArraysDisjointAcrossGroups"} _READ_HAS_OCCURRED_$$_ZZ20transposeFineGrainedPfS_iiiE5block
       ==> group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2;
    assume {:tag "loopBound"} {:thread 1} true ==> BV32_UGE($.01, 0bv32);
    assume {:tag "loopBound"} {:thread 1} true ==> BV32_SGE($.01, 0bv32);
    assume {:tag "guardNonNeg"} {:thread 1} true ==> BV32_SLE(0bv32, $.01);
    assume {:tag "loopCounterIsStrided"} {:thread 1} true
       ==> BV32_AND(BV32_SUB(16bv32, 1bv32), $.01)
         == BV32_AND(BV32_SUB(16bv32, 1bv32), 0bv32);
    p12$1 := false;
    p12$2 := false;
    p13$1 := false;
    p13$2 := false;
    p14$1 := false;
    p14$2 := false;
    p15$1 := false;
    p15$2 := false;
    p16$1 := false;
    p16$2 := false;
    p17$1 := false;
    p17$2 := false;
    p18$1 := false;
    p18$2 := false;
    p19$1 := false;
    p19$2 := false;
    p20$1 := false;
    p20$2 := false;
    p21$1 := false;
    p21$2 := false;
    p22$1 := false;
    p22$2 := false;
    p23$1 := false;
    p23$2 := false;
    p24$1 := false;
    p24$2 := false;
    p25$1 := false;
    p25$2 := false;
    p13$1 := (if b15 then b15 else p13$1);
    p13$2 := (if b15 then b15 else p13$2);
    call {:repair_barrier "b15"} {:repair_instrumented} {:sourceloc_num 6} $bugle_barrier_duplicated_13(1bv1, 1bv1, p13$1, p13$2);
    p15$1 := (if b16 then b16 else p15$1);
    p15$2 := (if b16 then b16 else p15$2);
    call {:repair_barrier "b16"} {:repair_instrumented} {:sourceloc_num 6} $bugle_grid_barrier_duplicated_12(p15$1, p15$2);
    v2 := BV32_SLT($.01, 16bv32);
    goto __partitioned_block_$truebb0_0, __partitioned_block_$falsebb0_0;

  __partitioned_block_$falsebb0_0:
    assume {:partition} !v2;
    p25$1 := (if b9 then b9 else p25$1);
    p25$2 := (if b9 then b9 else p25$2);
    call {:sourceloc_num 12} {:repair_barrier "b9"} $bugle_barrier_duplicated_7(1bv1, 1bv1, p25$1, p25$2);
    $.0 := 0bv32;
    assume {:captureState "loop_entry_state_1_0"} true;
    goto __partitioned_block_$7_0;

  __partitioned_block_$7_0:
    assume {:captureState "loop_head_state_1"} true;
    assume {:tag "accessBreak"} true
       ==> 
      _READ_HAS_OCCURRED_$$_ZZ20transposeFineGrainedPfS_iiiE5block
       ==> local_id_x$1 == BV32_DIV(_WATCHED_OFFSET, 17bv32);
    assume {:tag "accessedOffsetsSatisfyPredicates"} true
       ==> 
      _READ_HAS_OCCURRED_$$_ZZ20transposeFineGrainedPfS_iiiE5block
       ==> BV32_AND(BV32_SUB(16bv32, 1bv32), _WATCHED_OFFSET)
         == BV32_AND(BV32_SUB(16bv32, 1bv32), 
          BV32_ADD(BV32_ADD(0bv32, local_id_y$1), BV32_MUL(local_id_x$1, 17bv32)));
    assume {:tag "accessBreak"} true
       ==> 
      _WRITE_HAS_OCCURRED_$$arg.
       ==> local_id_y$1
         == BV32_SUB(BV32_SUB(BV32_DIV(_WATCHED_OFFSET, $width), 
            BV32_DIV(BV32_MUL(group_id_x$1, 16bv32), $width)), 
          BV32_MUL(group_id_y$1, 16bv32));
    assume {:tag "accessBreak"} true
       ==> 
      _WRITE_HAS_OCCURRED_$$arg.
       ==> group_id_y$1
         == BV32_SUB(BV32_SUB(BV32_DIV(BV32_DIV(_WATCHED_OFFSET, $width), 16bv32), 
            BV32_DIV(group_id_x$1, $width)), 
          BV32_DIV(local_id_y$1, 16bv32));
    assume {:tag "accessBreak"} true
       ==> 
      _WRITE_HAS_OCCURRED_$$arg.
       ==> group_id_x$1
         == BV32_SUB(BV32_SUB(BV32_DIV(_WATCHED_OFFSET, 16bv32), BV32_MUL(group_id_y$1, $width)), 
          BV32_DIV(BV32_MUL(local_id_y$1, $width), 16bv32));
    assume {:tag "accessedOffsetsSatisfyPredicates"} true
       ==> 
      _WRITE_HAS_OCCURRED_$$arg.
       ==> BV32_AND(BV32_SUB(BV32_MUL(16bv32, $height), 1bv32), _WATCHED_OFFSET)
         == BV32_AND(BV32_SUB(BV32_MUL(16bv32, $height), 1bv32), 
          BV32_ADD(BV32_MUL(0bv32, $height), 
            BV32_ADD(BV32_ADD(BV32_MUL(group_id_x$1, 16bv32), local_id_x$1), 
              BV32_MUL(BV32_ADD(BV32_MUL(group_id_y$1, 16bv32), local_id_y$1), $width))));
    assert {:tag "groupSharedArraysDisjointAcrossGroups"} _ATOMIC_HAS_OCCURRED_$$_ZZ20transposeFineGrainedPfS_iiiE5block
       ==> group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2;
    assert {:tag "groupSharedArraysDisjointAcrossGroups"} _WRITE_HAS_OCCURRED_$$_ZZ20transposeFineGrainedPfS_iiiE5block
       ==> group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2;
    assert {:tag "groupSharedArraysDisjointAcrossGroups"} _READ_HAS_OCCURRED_$$_ZZ20transposeFineGrainedPfS_iiiE5block
       ==> group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2;
    assume {:tag "loopBound"} {:thread 1} true ==> BV32_UGE($.0, 0bv32);
    assume {:tag "loopBound"} {:thread 1} true ==> BV32_SGE($.0, 0bv32);
    assume {:tag "guardNonNeg"} {:thread 1} true ==> BV32_SLE(0bv32, $.0);
    assume {:tag "loopCounterIsStrided"} {:thread 1} true
       ==> BV32_AND(BV32_SUB(16bv32, 1bv32), $.0)
         == BV32_AND(BV32_SUB(16bv32, 1bv32), 0bv32);
    p26$1 := false;
    p26$2 := false;
    p27$1 := false;
    p27$2 := false;
    p28$1 := false;
    p28$2 := false;
    p29$1 := false;
    p29$2 := false;
    p30$1 := false;
    p30$2 := false;
    p31$1 := false;
    p31$2 := false;
    p32$1 := false;
    p32$2 := false;
    p33$1 := false;
    p33$2 := false;
    p34$1 := false;
    p34$2 := false;
    p35$1 := false;
    p35$2 := false;
    p36$1 := false;
    p36$2 := false;
    p37$1 := false;
    p37$2 := false;
    p38$1 := false;
    p38$2 := false;
    p39$1 := false;
    p39$2 := false;
    p27$1 := (if b19 then b19 else p27$1);
    p27$2 := (if b19 then b19 else p27$2);
    call {:repair_barrier "b19"} {:repair_instrumented} {:sourceloc_num 13} $bugle_barrier_duplicated_6(1bv1, 1bv1, p27$1, p27$2);
    p29$1 := (if b20 then b20 else p29$1);
    p29$2 := (if b20 then b20 else p29$2);
    call {:repair_barrier "b20"} {:repair_instrumented} {:sourceloc_num 13} $bugle_grid_barrier_duplicated_5(p29$1, p29$2);
    v4 := BV32_SLT($.0, 16bv32);
    goto __partitioned_block_$truebb1_0, __partitioned_block_$falsebb1_0;

  __partitioned_block_$falsebb1_0:
    assume {:partition} !v4;
    p39$1 := (if b10 then b10 else p39$1);
    p39$2 := (if b10 then b10 else p39$2);
    call {:sourceloc_num 19} {:repair_barrier "b10"} $bugle_barrier_duplicated_0(1bv1, 1bv1, p39$1, p39$2);
    $.02 := BV32_ADD($.02, 1bv32);
    assume {:captureState "loop_back_edge_state_0_0"} true;
    goto __partitioned_block_$1_0;

  __partitioned_block_$truebb1_0:
    assume {:partition} v4;
    p31$1 := (if b3 then b3 else p31$1);
    p31$2 := (if b3 then b3 else p31$2);
    call {:repair_barrier "b3"} {:repair_instrumented} {:sourceloc_num 15} $bugle_barrier_duplicated_4(1bv1, 1bv1, p31$1, p31$2);
    p33$1 := (if b4 then b4 else p33$1);
    p33$2 := (if b4 then b4 else p33$2);
    call {:repair_barrier "b4"} {:repair_instrumented} {:sourceloc_num 15} $bugle_grid_barrier_duplicated_3(p33$1, p33$2);
    call {:sourceloc} {:sourceloc_num 15} {:repair_instrumented} _LOG_READ_$$_ZZ20transposeFineGrainedPfS_iiiE5block(true, BV32_ADD(BV32_MUL(local_id_x$1, 17bv32), BV32_ADD(local_id_y$1, $.0)), $$_ZZ20transposeFineGrainedPfS_iiiE5block[1bv1][BV32_ADD(BV32_MUL(local_id_x$1, 17bv32), BV32_ADD(local_id_y$1, $.0))]);
    assume {:do_not_predicate} {:check_id "check_state_0"} {:captureState "check_state_0"} {:sourceloc} {:sourceloc_num 15} {:repair_instrumented} true;
    call {:check_id "check_state_0"} {:sourceloc} {:sourceloc_num 15} {:repair_instrumented} _CHECK_READ_$$_ZZ20transposeFineGrainedPfS_iiiE5block(true, BV32_ADD(BV32_MUL(local_id_x$2, 17bv32), BV32_ADD(local_id_y$2, $.0)), $$_ZZ20transposeFineGrainedPfS_iiiE5block[(if group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       then 1bv1
       else 0bv1)][BV32_ADD(BV32_MUL(local_id_x$2, 17bv32), BV32_ADD(local_id_y$2, $.0))]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$_ZZ20transposeFineGrainedPfS_iiiE5block"} true;
    v5$1 := $$_ZZ20transposeFineGrainedPfS_iiiE5block[1bv1][BV32_ADD(BV32_MUL(local_id_x$1, 17bv32), BV32_ADD(local_id_y$1, $.0))];
    v5$2 := $$_ZZ20transposeFineGrainedPfS_iiiE5block[(if group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       then 1bv1
       else 0bv1)][BV32_ADD(BV32_MUL(local_id_x$2, 17bv32), BV32_ADD(local_id_y$2, $.0))];
    p35$1 := (if b7 then b7 else p35$1);
    p35$2 := (if b7 then b7 else p35$2);
    call {:repair_barrier "b7"} {:repair_instrumented} {:sourceloc_num 16} $bugle_barrier_duplicated_2(1bv1, 1bv1, p35$1, p35$2);
    p37$1 := (if b8 then b8 else p37$1);
    p37$2 := (if b8 then b8 else p37$2);
    call {:repair_barrier "b8"} {:repair_instrumented} {:sourceloc_num 16} $bugle_grid_barrier_duplicated_1(p37$1, p37$2);
    call {:sourceloc} {:sourceloc_num 16} {:repair_instrumented} _LOG_WRITE_$$arg.(true, BV32_ADD(v0$1, BV32_MUL($.0, $height)), v5$1, $$arg.[BV32_ADD(v0$1, BV32_MUL($.0, $height))]);
    call _UPDATE_WRITE_READ_BENIGN_FLAG_$$arg.(true, BV32_ADD(v0$2, BV32_MUL($.0, $height)));
    assume {:do_not_predicate} {:check_id "check_state_1"} {:captureState "check_state_1"} {:sourceloc} {:sourceloc_num 16} {:repair_instrumented} true;
    call {:check_id "check_state_1"} {:sourceloc} {:sourceloc_num 16} {:repair_instrumented} _CHECK_WRITE_$$arg.(true, BV32_ADD(v0$2, BV32_MUL($.0, $height)), v5$2);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_WRITE_$$arg."} true;
    $$arg.[BV32_ADD(v0$1, BV32_MUL($.0, $height))] := v5$1;
    $$arg.[BV32_ADD(v0$2, BV32_MUL($.0, $height))] := v5$2;
    $.0 := BV32_ADD($.0, 16bv32);
    assume {:captureState "loop_back_edge_state_1_0"} true;
    goto __partitioned_block_$7_0;

  __partitioned_block_$truebb0_0:
    assume {:partition} v2;
    p17$1 := (if b1 then b1 else p17$1);
    p17$2 := (if b1 then b1 else p17$2);
    call {:repair_barrier "b1"} {:repair_instrumented} {:sourceloc_num 8} $bugle_barrier_duplicated_11(1bv1, 1bv1, p17$1, p17$2);
    p19$1 := (if b2 then b2 else p19$1);
    p19$2 := (if b2 then b2 else p19$2);
    call {:repair_barrier "b2"} {:repair_instrumented} {:sourceloc_num 8} $bugle_grid_barrier_duplicated_10(p19$1, p19$2);
    havoc v3$1, v3$2;
    p21$1 := (if b5 then b5 else p21$1);
    p21$2 := (if b5 then b5 else p21$2);
    call {:repair_barrier "b5"} {:repair_instrumented} {:sourceloc_num 9} $bugle_barrier_duplicated_9(1bv1, 1bv1, p21$1, p21$2);
    p23$1 := (if b6 then b6 else p23$1);
    p23$2 := (if b6 then b6 else p23$2);
    call {:repair_barrier "b6"} {:repair_instrumented} {:sourceloc_num 9} $bugle_grid_barrier_duplicated_8(p23$1, p23$2);
    call {:sourceloc} {:sourceloc_num 9} {:repair_instrumented} _LOG_WRITE_$$_ZZ20transposeFineGrainedPfS_iiiE5block(true, BV32_ADD(BV32_MUL(BV32_ADD(local_id_y$1, $.01), 17bv32), local_id_x$1), v3$1, $$_ZZ20transposeFineGrainedPfS_iiiE5block[1bv1][BV32_ADD(BV32_MUL(BV32_ADD(local_id_y$1, $.01), 17bv32), local_id_x$1)]);
    call _UPDATE_WRITE_READ_BENIGN_FLAG_$$_ZZ20transposeFineGrainedPfS_iiiE5block(true, BV32_ADD(BV32_MUL(BV32_ADD(local_id_y$2, $.01), 17bv32), local_id_x$2));
    assume {:do_not_predicate} {:check_id "check_state_2"} {:captureState "check_state_2"} {:sourceloc} {:sourceloc_num 9} {:repair_instrumented} true;
    call {:check_id "check_state_2"} {:sourceloc} {:sourceloc_num 9} {:repair_instrumented} _CHECK_WRITE_$$_ZZ20transposeFineGrainedPfS_iiiE5block(true, BV32_ADD(BV32_MUL(BV32_ADD(local_id_y$2, $.01), 17bv32), local_id_x$2), v3$2);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_WRITE_$$_ZZ20transposeFineGrainedPfS_iiiE5block"} true;
    $$_ZZ20transposeFineGrainedPfS_iiiE5block[1bv1][BV32_ADD(BV32_MUL(BV32_ADD(local_id_y$1, $.01), 17bv32), local_id_x$1)] := v3$1;
    $$_ZZ20transposeFineGrainedPfS_iiiE5block[(if group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       then 1bv1
       else 0bv1)][BV32_ADD(BV32_MUL(BV32_ADD(local_id_y$2, $.01), 17bv32), local_id_x$2)] := v3$2;
    $.01 := BV32_ADD($.01, 16bv32);
    assume {:captureState "loop_back_edge_state_2_0"} true;
    goto __partitioned_block_$3_0;
}



axiom (if group_size_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;

axiom (if num_groups_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;

axiom (if group_size_x == 16bv32 then 1bv1 else 0bv1) != 0bv1;

axiom (if group_size_y == 16bv32 then 1bv1 else 0bv1) != 0bv1;

axiom (if num_groups_x == 64bv32 then 1bv1 else 0bv1) != 0bv1;

axiom (if num_groups_y == 64bv32 then 1bv1 else 0bv1) != 0bv1;

axiom (if sub_group_size == 32bv32 then 1bv1 else 0bv1) != 0bv1;

procedure {:grid_barrier} $bugle_grid_barrier();



var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b1: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b2: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b3: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b4: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b5: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b6: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b7: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b8: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b9: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b10: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b11: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b12: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b13: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b14: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b15: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b16: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b17: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b18: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b19: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b20: bool;

const {:local_id_z} local_id_z$1: bv32;

const {:local_id_z} local_id_z$2: bv32;

const {:group_id_z} group_id_z$1: bv32;

const {:group_id_z} group_id_z$2: bv32;

procedure {:inline 1} {:source_name "bugle_barrier"} {:barrier} $bugle_barrier_duplicated_0($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ20transposeFineGrainedPfS_iiiE5block;



procedure {:inline 1} {:grid_barrier} $bugle_grid_barrier_duplicated_1(_P$1: bool, _P$2: bool);
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ20transposeFineGrainedPfS_iiiE5block;



procedure {:inline 1} {:source_name "bugle_barrier"} {:barrier} $bugle_barrier_duplicated_2($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ20transposeFineGrainedPfS_iiiE5block;



procedure {:inline 1} {:grid_barrier} $bugle_grid_barrier_duplicated_3(_P$1: bool, _P$2: bool);
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ20transposeFineGrainedPfS_iiiE5block;



procedure {:inline 1} {:source_name "bugle_barrier"} {:barrier} $bugle_barrier_duplicated_4($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ20transposeFineGrainedPfS_iiiE5block;



procedure {:inline 1} {:grid_barrier} $bugle_grid_barrier_duplicated_5(_P$1: bool, _P$2: bool);
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ20transposeFineGrainedPfS_iiiE5block;



procedure {:inline 1} {:source_name "bugle_barrier"} {:barrier} $bugle_barrier_duplicated_6($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ20transposeFineGrainedPfS_iiiE5block;



procedure {:inline 1} {:source_name "bugle_barrier"} {:barrier} $bugle_barrier_duplicated_7($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ20transposeFineGrainedPfS_iiiE5block;



procedure {:inline 1} {:grid_barrier} $bugle_grid_barrier_duplicated_8(_P$1: bool, _P$2: bool);
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ20transposeFineGrainedPfS_iiiE5block;



procedure {:inline 1} {:source_name "bugle_barrier"} {:barrier} $bugle_barrier_duplicated_9($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ20transposeFineGrainedPfS_iiiE5block;



procedure {:inline 1} {:grid_barrier} $bugle_grid_barrier_duplicated_10(_P$1: bool, _P$2: bool);
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ20transposeFineGrainedPfS_iiiE5block;



procedure {:inline 1} {:source_name "bugle_barrier"} {:barrier} $bugle_barrier_duplicated_11($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ20transposeFineGrainedPfS_iiiE5block;



procedure {:inline 1} {:grid_barrier} $bugle_grid_barrier_duplicated_12(_P$1: bool, _P$2: bool);
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ20transposeFineGrainedPfS_iiiE5block;



procedure {:inline 1} {:source_name "bugle_barrier"} {:barrier} $bugle_barrier_duplicated_13($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ20transposeFineGrainedPfS_iiiE5block;



procedure {:inline 1} {:grid_barrier} $bugle_grid_barrier_duplicated_14(_P$1: bool, _P$2: bool);
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ20transposeFineGrainedPfS_iiiE5block;



procedure {:inline 1} {:source_name "bugle_barrier"} {:barrier} $bugle_barrier_duplicated_15($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ20transposeFineGrainedPfS_iiiE5block;



procedure {:inline 1} {:grid_barrier} $bugle_grid_barrier_duplicated_16(_P$1: bool, _P$2: bool);
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ20transposeFineGrainedPfS_iiiE5block;



procedure {:inline 1} {:source_name "bugle_barrier"} {:barrier} $bugle_barrier_duplicated_17($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ20transposeFineGrainedPfS_iiiE5block;



procedure {:inline 1} {:grid_barrier} $bugle_grid_barrier_duplicated_18(_P$1: bool, _P$2: bool);
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ20transposeFineGrainedPfS_iiiE5block;



procedure {:inline 1} {:source_name "bugle_barrier"} {:barrier} $bugle_barrier_duplicated_19($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg., $$_ZZ20transposeFineGrainedPfS_iiiE5block;



function {:bvbuiltin "bvsle"} BV32_SLE(bv32, bv32) : bool;

function {:bvbuiltin "bvsge"} BV32_SGE(bv32, bv32) : bool;

function {:bvbuiltin "bvule"} BV32_ULE(bv32, bv32) : bool;

function {:bvbuiltin "bvuge"} BV32_UGE(bv32, bv32) : bool;

function {:bvbuiltin "bvsub"} BV32_SUB(bv32, bv32) : bv32;

function {:bvbuiltin "bvand"} BV32_AND(bv32, bv32) : bv32;

const _WATCHED_VALUE_$$arg.: bv32;

procedure {:inline 1} _LOG_READ_$$arg.(_P: bool, _offset: bv32, _value: bv32);
  modifies _READ_HAS_OCCURRED_$$arg.;



implementation {:inline 1} _LOG_READ_$$arg.(_P: bool, _offset: bv32, _value: bv32)
{

  log_access_entry:
    _READ_HAS_OCCURRED_$$arg. := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$arg. == _value
       then true
       else _READ_HAS_OCCURRED_$$arg.);
    return;
}



procedure _CHECK_READ_$$arg.(_P: bool, _offset: bv32, _value: bv32);
  requires {:source_name "odata"} {:array "$$arg."} {:race} {:write_read} !(
    _P
     && _WRITE_HAS_OCCURRED_$$arg.
     && _WATCHED_OFFSET == _offset
     && _WRITE_READ_BENIGN_FLAG_$$arg.);
  requires {:source_name "odata"} {:array "$$arg."} {:race} {:atomic_read} !(_P && _ATOMIC_HAS_OCCURRED_$$arg. && _WATCHED_OFFSET == _offset);



var _WRITE_READ_BENIGN_FLAG_$$arg.: bool;

procedure {:inline 1} _LOG_WRITE_$$arg.(_P: bool, _offset: bv32, _value: bv32, _value_old: bv32);
  modifies _WRITE_HAS_OCCURRED_$$arg., _WRITE_READ_BENIGN_FLAG_$$arg.;



implementation {:inline 1} _LOG_WRITE_$$arg.(_P: bool, _offset: bv32, _value: bv32, _value_old: bv32)
{

  log_access_entry:
    _WRITE_HAS_OCCURRED_$$arg. := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$arg. == _value
       then true
       else _WRITE_HAS_OCCURRED_$$arg.);
    _WRITE_READ_BENIGN_FLAG_$$arg. := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$arg. == _value
       then _value != _value_old
       else _WRITE_READ_BENIGN_FLAG_$$arg.);
    return;
}



procedure _CHECK_WRITE_$$arg.(_P: bool, _offset: bv32, _value: bv32);
  requires {:source_name "odata"} {:array "$$arg."} {:race} {:write_write} !(
    _P
     && _WRITE_HAS_OCCURRED_$$arg.
     && _WATCHED_OFFSET == _offset
     && _WATCHED_VALUE_$$arg. != _value);
  requires {:source_name "odata"} {:array "$$arg."} {:race} {:read_write} !(
    _P
     && _READ_HAS_OCCURRED_$$arg.
     && _WATCHED_OFFSET == _offset
     && _WATCHED_VALUE_$$arg. != _value);
  requires {:source_name "odata"} {:array "$$arg."} {:race} {:atomic_write} !(_P && _ATOMIC_HAS_OCCURRED_$$arg. && _WATCHED_OFFSET == _offset);



procedure {:inline 1} _LOG_ATOMIC_$$arg.(_P: bool, _offset: bv32);
  modifies _ATOMIC_HAS_OCCURRED_$$arg.;



implementation {:inline 1} _LOG_ATOMIC_$$arg.(_P: bool, _offset: bv32)
{

  log_access_entry:
    _ATOMIC_HAS_OCCURRED_$$arg. := (if _P && _TRACKING && _WATCHED_OFFSET == _offset
       then true
       else _ATOMIC_HAS_OCCURRED_$$arg.);
    return;
}



procedure _CHECK_ATOMIC_$$arg.(_P: bool, _offset: bv32);
  requires {:source_name "odata"} {:array "$$arg."} {:race} {:write_atomic} !(_P && _WRITE_HAS_OCCURRED_$$arg. && _WATCHED_OFFSET == _offset);
  requires {:source_name "odata"} {:array "$$arg."} {:race} {:read_atomic} !(_P && _READ_HAS_OCCURRED_$$arg. && _WATCHED_OFFSET == _offset);



procedure {:inline 1} _UPDATE_WRITE_READ_BENIGN_FLAG_$$arg.(_P: bool, _offset: bv32);
  modifies _WRITE_READ_BENIGN_FLAG_$$arg.;



implementation {:inline 1} _UPDATE_WRITE_READ_BENIGN_FLAG_$$arg.(_P: bool, _offset: bv32)
{

  _UPDATE_BENIGN_FLAG:
    _WRITE_READ_BENIGN_FLAG_$$arg. := (if _P && _WRITE_HAS_OCCURRED_$$arg. && _WATCHED_OFFSET == _offset
       then false
       else _WRITE_READ_BENIGN_FLAG_$$arg.);
    return;
}



const _WATCHED_VALUE_$$arg.1: bv32;

procedure {:inline 1} _LOG_READ_$$arg.1(_P: bool, _offset: bv32, _value: bv32);
  modifies _READ_HAS_OCCURRED_$$arg.1;



implementation {:inline 1} _LOG_READ_$$arg.1(_P: bool, _offset: bv32, _value: bv32)
{

  log_access_entry:
    _READ_HAS_OCCURRED_$$arg.1 := (if _P
         && _TRACKING
         && _WATCHED_OFFSET == _offset
         && _WATCHED_VALUE_$$arg.1 == _value
       then true
       else _READ_HAS_OCCURRED_$$arg.1);
    return;
}



procedure _CHECK_READ_$$arg.1(_P: bool, _offset: bv32, _value: bv32);
  requires {:source_name "idata"} {:array "$$arg.1"} {:race} {:write_read} !(
    _P
     && _WRITE_HAS_OCCURRED_$$arg.1
     && _WATCHED_OFFSET == _offset
     && _WRITE_READ_BENIGN_FLAG_$$arg.1);
  requires {:source_name "idata"} {:array "$$arg.1"} {:race} {:atomic_read} !(_P && _ATOMIC_HAS_OCCURRED_$$arg.1 && _WATCHED_OFFSET == _offset);



var _WRITE_READ_BENIGN_FLAG_$$arg.1: bool;

procedure {:inline 1} _LOG_WRITE_$$arg.1(_P: bool, _offset: bv32, _value: bv32, _value_old: bv32);
  modifies _WRITE_HAS_OCCURRED_$$arg.1, _WRITE_READ_BENIGN_FLAG_$$arg.1;



implementation {:inline 1} _LOG_WRITE_$$arg.1(_P: bool, _offset: bv32, _value: bv32, _value_old: bv32)
{

  log_access_entry:
    _WRITE_HAS_OCCURRED_$$arg.1 := (if _P
         && _TRACKING
         && _WATCHED_OFFSET == _offset
         && _WATCHED_VALUE_$$arg.1 == _value
       then true
       else _WRITE_HAS_OCCURRED_$$arg.1);
    _WRITE_READ_BENIGN_FLAG_$$arg.1 := (if _P
         && _TRACKING
         && _WATCHED_OFFSET == _offset
         && _WATCHED_VALUE_$$arg.1 == _value
       then _value != _value_old
       else _WRITE_READ_BENIGN_FLAG_$$arg.1);
    return;
}



procedure _CHECK_WRITE_$$arg.1(_P: bool, _offset: bv32, _value: bv32);
  requires {:source_name "idata"} {:array "$$arg.1"} {:race} {:write_write} !(
    _P
     && _WRITE_HAS_OCCURRED_$$arg.1
     && _WATCHED_OFFSET == _offset
     && _WATCHED_VALUE_$$arg.1 != _value);
  requires {:source_name "idata"} {:array "$$arg.1"} {:race} {:read_write} !(
    _P
     && _READ_HAS_OCCURRED_$$arg.1
     && _WATCHED_OFFSET == _offset
     && _WATCHED_VALUE_$$arg.1 != _value);
  requires {:source_name "idata"} {:array "$$arg.1"} {:race} {:atomic_write} !(_P && _ATOMIC_HAS_OCCURRED_$$arg.1 && _WATCHED_OFFSET == _offset);



procedure {:inline 1} _LOG_ATOMIC_$$arg.1(_P: bool, _offset: bv32);
  modifies _ATOMIC_HAS_OCCURRED_$$arg.1;



implementation {:inline 1} _LOG_ATOMIC_$$arg.1(_P: bool, _offset: bv32)
{

  log_access_entry:
    _ATOMIC_HAS_OCCURRED_$$arg.1 := (if _P && _TRACKING && _WATCHED_OFFSET == _offset
       then true
       else _ATOMIC_HAS_OCCURRED_$$arg.1);
    return;
}



procedure _CHECK_ATOMIC_$$arg.1(_P: bool, _offset: bv32);
  requires {:source_name "idata"} {:array "$$arg.1"} {:race} {:write_atomic} !(_P && _WRITE_HAS_OCCURRED_$$arg.1 && _WATCHED_OFFSET == _offset);
  requires {:source_name "idata"} {:array "$$arg.1"} {:race} {:read_atomic} !(_P && _READ_HAS_OCCURRED_$$arg.1 && _WATCHED_OFFSET == _offset);



procedure {:inline 1} _UPDATE_WRITE_READ_BENIGN_FLAG_$$arg.1(_P: bool, _offset: bv32);
  modifies _WRITE_READ_BENIGN_FLAG_$$arg.1;



implementation {:inline 1} _UPDATE_WRITE_READ_BENIGN_FLAG_$$arg.1(_P: bool, _offset: bv32)
{

  _UPDATE_BENIGN_FLAG:
    _WRITE_READ_BENIGN_FLAG_$$arg.1 := (if _P && _WRITE_HAS_OCCURRED_$$arg.1 && _WATCHED_OFFSET == _offset
       then false
       else _WRITE_READ_BENIGN_FLAG_$$arg.1);
    return;
}



const _WATCHED_VALUE_$$_ZZ20transposeFineGrainedPfS_iiiE5block: bv32;

procedure {:inline 1} _LOG_READ_$$_ZZ20transposeFineGrainedPfS_iiiE5block(_P: bool, _offset: bv32, _value: bv32);
  modifies _READ_HAS_OCCURRED_$$_ZZ20transposeFineGrainedPfS_iiiE5block;



implementation {:inline 1} _LOG_READ_$$_ZZ20transposeFineGrainedPfS_iiiE5block(_P: bool, _offset: bv32, _value: bv32)
{

  log_access_entry:
    _READ_HAS_OCCURRED_$$_ZZ20transposeFineGrainedPfS_iiiE5block := (if _P
         && group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && _TRACKING
         && _WATCHED_OFFSET == _offset
         && _WATCHED_VALUE_$$_ZZ20transposeFineGrainedPfS_iiiE5block == _value
       then true
       else _READ_HAS_OCCURRED_$$_ZZ20transposeFineGrainedPfS_iiiE5block);
    return;
}



procedure _CHECK_READ_$$_ZZ20transposeFineGrainedPfS_iiiE5block(_P: bool, _offset: bv32, _value: bv32);
  requires {:source_name "block"} {:array "$$_ZZ20transposeFineGrainedPfS_iiiE5block"} {:race} {:write_read} !(
    _P
     && _WRITE_HAS_OCCURRED_$$_ZZ20transposeFineGrainedPfS_iiiE5block
     && _WATCHED_OFFSET == _offset
     && _WRITE_READ_BENIGN_FLAG_$$_ZZ20transposeFineGrainedPfS_iiiE5block
     && group_id_x$1 == group_id_x$2
     && group_id_y$1 == group_id_y$2
     && group_id_z$1 == group_id_z$2);
  requires {:source_name "block"} {:array "$$_ZZ20transposeFineGrainedPfS_iiiE5block"} {:race} {:atomic_read} !(
    _P
     && _ATOMIC_HAS_OCCURRED_$$_ZZ20transposeFineGrainedPfS_iiiE5block
     && _WATCHED_OFFSET == _offset
     && group_id_x$1 == group_id_x$2
     && group_id_y$1 == group_id_y$2
     && group_id_z$1 == group_id_z$2);



var _WRITE_READ_BENIGN_FLAG_$$_ZZ20transposeFineGrainedPfS_iiiE5block: bool;

procedure {:inline 1} _LOG_WRITE_$$_ZZ20transposeFineGrainedPfS_iiiE5block(_P: bool, _offset: bv32, _value: bv32, _value_old: bv32);
  modifies _WRITE_HAS_OCCURRED_$$_ZZ20transposeFineGrainedPfS_iiiE5block, _WRITE_READ_BENIGN_FLAG_$$_ZZ20transposeFineGrainedPfS_iiiE5block;



implementation {:inline 1} _LOG_WRITE_$$_ZZ20transposeFineGrainedPfS_iiiE5block(_P: bool, _offset: bv32, _value: bv32, _value_old: bv32)
{

  log_access_entry:
    _WRITE_HAS_OCCURRED_$$_ZZ20transposeFineGrainedPfS_iiiE5block := (if _P
         && group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && _TRACKING
         && _WATCHED_OFFSET == _offset
         && _WATCHED_VALUE_$$_ZZ20transposeFineGrainedPfS_iiiE5block == _value
       then true
       else _WRITE_HAS_OCCURRED_$$_ZZ20transposeFineGrainedPfS_iiiE5block);
    _WRITE_READ_BENIGN_FLAG_$$_ZZ20transposeFineGrainedPfS_iiiE5block := (if _P
         && group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && _TRACKING
         && _WATCHED_OFFSET == _offset
         && _WATCHED_VALUE_$$_ZZ20transposeFineGrainedPfS_iiiE5block == _value
       then _value != _value_old
       else _WRITE_READ_BENIGN_FLAG_$$_ZZ20transposeFineGrainedPfS_iiiE5block);
    return;
}



procedure _CHECK_WRITE_$$_ZZ20transposeFineGrainedPfS_iiiE5block(_P: bool, _offset: bv32, _value: bv32);
  requires {:source_name "block"} {:array "$$_ZZ20transposeFineGrainedPfS_iiiE5block"} {:race} {:write_write} !(
    _P
     && _WRITE_HAS_OCCURRED_$$_ZZ20transposeFineGrainedPfS_iiiE5block
     && _WATCHED_OFFSET == _offset
     && _WATCHED_VALUE_$$_ZZ20transposeFineGrainedPfS_iiiE5block != _value
     && group_id_x$1 == group_id_x$2
     && group_id_y$1 == group_id_y$2
     && group_id_z$1 == group_id_z$2);
  requires {:source_name "block"} {:array "$$_ZZ20transposeFineGrainedPfS_iiiE5block"} {:race} {:read_write} !(
    _P
     && _READ_HAS_OCCURRED_$$_ZZ20transposeFineGrainedPfS_iiiE5block
     && _WATCHED_OFFSET == _offset
     && _WATCHED_VALUE_$$_ZZ20transposeFineGrainedPfS_iiiE5block != _value
     && group_id_x$1 == group_id_x$2
     && group_id_y$1 == group_id_y$2
     && group_id_z$1 == group_id_z$2);
  requires {:source_name "block"} {:array "$$_ZZ20transposeFineGrainedPfS_iiiE5block"} {:race} {:atomic_write} !(
    _P
     && _ATOMIC_HAS_OCCURRED_$$_ZZ20transposeFineGrainedPfS_iiiE5block
     && _WATCHED_OFFSET == _offset
     && group_id_x$1 == group_id_x$2
     && group_id_y$1 == group_id_y$2
     && group_id_z$1 == group_id_z$2);



procedure {:inline 1} _LOG_ATOMIC_$$_ZZ20transposeFineGrainedPfS_iiiE5block(_P: bool, _offset: bv32);
  modifies _ATOMIC_HAS_OCCURRED_$$_ZZ20transposeFineGrainedPfS_iiiE5block;



implementation {:inline 1} _LOG_ATOMIC_$$_ZZ20transposeFineGrainedPfS_iiiE5block(_P: bool, _offset: bv32)
{

  log_access_entry:
    _ATOMIC_HAS_OCCURRED_$$_ZZ20transposeFineGrainedPfS_iiiE5block := (if _P
         && group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && _TRACKING
         && _WATCHED_OFFSET == _offset
       then true
       else _ATOMIC_HAS_OCCURRED_$$_ZZ20transposeFineGrainedPfS_iiiE5block);
    return;
}



procedure _CHECK_ATOMIC_$$_ZZ20transposeFineGrainedPfS_iiiE5block(_P: bool, _offset: bv32);
  requires {:source_name "block"} {:array "$$_ZZ20transposeFineGrainedPfS_iiiE5block"} {:race} {:write_atomic} !(
    _P
     && _WRITE_HAS_OCCURRED_$$_ZZ20transposeFineGrainedPfS_iiiE5block
     && _WATCHED_OFFSET == _offset
     && group_id_x$1 == group_id_x$2
     && group_id_y$1 == group_id_y$2
     && group_id_z$1 == group_id_z$2);
  requires {:source_name "block"} {:array "$$_ZZ20transposeFineGrainedPfS_iiiE5block"} {:race} {:read_atomic} !(
    _P
     && _READ_HAS_OCCURRED_$$_ZZ20transposeFineGrainedPfS_iiiE5block
     && _WATCHED_OFFSET == _offset
     && group_id_x$1 == group_id_x$2
     && group_id_y$1 == group_id_y$2
     && group_id_z$1 == group_id_z$2);



procedure {:inline 1} _UPDATE_WRITE_READ_BENIGN_FLAG_$$_ZZ20transposeFineGrainedPfS_iiiE5block(_P: bool, _offset: bv32);
  modifies _WRITE_READ_BENIGN_FLAG_$$_ZZ20transposeFineGrainedPfS_iiiE5block;



implementation {:inline 1} _UPDATE_WRITE_READ_BENIGN_FLAG_$$_ZZ20transposeFineGrainedPfS_iiiE5block(_P: bool, _offset: bv32)
{

  _UPDATE_BENIGN_FLAG:
    _WRITE_READ_BENIGN_FLAG_$$_ZZ20transposeFineGrainedPfS_iiiE5block := (if _P
         && _WRITE_HAS_OCCURRED_$$_ZZ20transposeFineGrainedPfS_iiiE5block
         && _WATCHED_OFFSET == _offset
       then false
       else _WRITE_READ_BENIGN_FLAG_$$_ZZ20transposeFineGrainedPfS_iiiE5block);
    return;
}



var _TRACKING: bool;

implementation {:inline 1} $bugle_barrier_duplicated_0($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$_ZZ20transposeFineGrainedPfS_iiiE5block;
    assume _P$1 && $0 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$_ZZ20transposeFineGrainedPfS_iiiE5block;
    assume _P$1 && $0 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ20transposeFineGrainedPfS_iiiE5block;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(
      group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$_ZZ20transposeFineGrainedPfS_iiiE5block;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_grid_barrier_duplicated_1(_P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume true ==> !_READ_HAS_OCCURRED_$$_ZZ20transposeFineGrainedPfS_iiiE5block;
    assume true ==> !_WRITE_HAS_OCCURRED_$$_ZZ20transposeFineGrainedPfS_iiiE5block;
    assume true ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ20transposeFineGrainedPfS_iiiE5block;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} false;
    goto anon3;

  anon3:
    assume true ==> true ==> !_READ_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} false;
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} true;
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} true;
    havoc $$_ZZ20transposeFineGrainedPfS_iiiE5block;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_2($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$_ZZ20transposeFineGrainedPfS_iiiE5block;
    assume _P$1 && $0 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$_ZZ20transposeFineGrainedPfS_iiiE5block;
    assume _P$1 && $0 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ20transposeFineGrainedPfS_iiiE5block;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(
      group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$_ZZ20transposeFineGrainedPfS_iiiE5block;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_grid_barrier_duplicated_3(_P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume true ==> !_READ_HAS_OCCURRED_$$_ZZ20transposeFineGrainedPfS_iiiE5block;
    assume true ==> !_WRITE_HAS_OCCURRED_$$_ZZ20transposeFineGrainedPfS_iiiE5block;
    assume true ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ20transposeFineGrainedPfS_iiiE5block;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} false;
    goto anon3;

  anon3:
    assume true ==> true ==> !_READ_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} false;
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} true;
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} true;
    havoc $$_ZZ20transposeFineGrainedPfS_iiiE5block;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_4($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$_ZZ20transposeFineGrainedPfS_iiiE5block;
    assume _P$1 && $0 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$_ZZ20transposeFineGrainedPfS_iiiE5block;
    assume _P$1 && $0 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ20transposeFineGrainedPfS_iiiE5block;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(
      group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$_ZZ20transposeFineGrainedPfS_iiiE5block;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_grid_barrier_duplicated_5(_P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume true ==> !_READ_HAS_OCCURRED_$$_ZZ20transposeFineGrainedPfS_iiiE5block;
    assume true ==> !_WRITE_HAS_OCCURRED_$$_ZZ20transposeFineGrainedPfS_iiiE5block;
    assume true ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ20transposeFineGrainedPfS_iiiE5block;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} false;
    goto anon3;

  anon3:
    assume true ==> true ==> !_READ_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} false;
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} true;
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} true;
    havoc $$_ZZ20transposeFineGrainedPfS_iiiE5block;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_6($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$_ZZ20transposeFineGrainedPfS_iiiE5block;
    assume _P$1 && $0 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$_ZZ20transposeFineGrainedPfS_iiiE5block;
    assume _P$1 && $0 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ20transposeFineGrainedPfS_iiiE5block;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(
      group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$_ZZ20transposeFineGrainedPfS_iiiE5block;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_7($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$_ZZ20transposeFineGrainedPfS_iiiE5block;
    assume _P$1 && $0 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$_ZZ20transposeFineGrainedPfS_iiiE5block;
    assume _P$1 && $0 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ20transposeFineGrainedPfS_iiiE5block;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(
      group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$_ZZ20transposeFineGrainedPfS_iiiE5block;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_grid_barrier_duplicated_8(_P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume true ==> !_READ_HAS_OCCURRED_$$_ZZ20transposeFineGrainedPfS_iiiE5block;
    assume true ==> !_WRITE_HAS_OCCURRED_$$_ZZ20transposeFineGrainedPfS_iiiE5block;
    assume true ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ20transposeFineGrainedPfS_iiiE5block;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} false;
    goto anon3;

  anon3:
    assume true ==> true ==> !_READ_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} false;
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} true;
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} true;
    havoc $$_ZZ20transposeFineGrainedPfS_iiiE5block;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_9($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$_ZZ20transposeFineGrainedPfS_iiiE5block;
    assume _P$1 && $0 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$_ZZ20transposeFineGrainedPfS_iiiE5block;
    assume _P$1 && $0 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ20transposeFineGrainedPfS_iiiE5block;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(
      group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$_ZZ20transposeFineGrainedPfS_iiiE5block;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_grid_barrier_duplicated_10(_P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume true ==> !_READ_HAS_OCCURRED_$$_ZZ20transposeFineGrainedPfS_iiiE5block;
    assume true ==> !_WRITE_HAS_OCCURRED_$$_ZZ20transposeFineGrainedPfS_iiiE5block;
    assume true ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ20transposeFineGrainedPfS_iiiE5block;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} false;
    goto anon3;

  anon3:
    assume true ==> true ==> !_READ_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} false;
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} true;
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} true;
    havoc $$_ZZ20transposeFineGrainedPfS_iiiE5block;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_11($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$_ZZ20transposeFineGrainedPfS_iiiE5block;
    assume _P$1 && $0 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$_ZZ20transposeFineGrainedPfS_iiiE5block;
    assume _P$1 && $0 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ20transposeFineGrainedPfS_iiiE5block;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(
      group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$_ZZ20transposeFineGrainedPfS_iiiE5block;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_grid_barrier_duplicated_12(_P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume true ==> !_READ_HAS_OCCURRED_$$_ZZ20transposeFineGrainedPfS_iiiE5block;
    assume true ==> !_WRITE_HAS_OCCURRED_$$_ZZ20transposeFineGrainedPfS_iiiE5block;
    assume true ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ20transposeFineGrainedPfS_iiiE5block;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} false;
    goto anon3;

  anon3:
    assume true ==> true ==> !_READ_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} false;
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} true;
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} true;
    havoc $$_ZZ20transposeFineGrainedPfS_iiiE5block;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_13($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$_ZZ20transposeFineGrainedPfS_iiiE5block;
    assume _P$1 && $0 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$_ZZ20transposeFineGrainedPfS_iiiE5block;
    assume _P$1 && $0 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ20transposeFineGrainedPfS_iiiE5block;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(
      group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$_ZZ20transposeFineGrainedPfS_iiiE5block;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_grid_barrier_duplicated_14(_P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume true ==> !_READ_HAS_OCCURRED_$$_ZZ20transposeFineGrainedPfS_iiiE5block;
    assume true ==> !_WRITE_HAS_OCCURRED_$$_ZZ20transposeFineGrainedPfS_iiiE5block;
    assume true ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ20transposeFineGrainedPfS_iiiE5block;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} false;
    goto anon3;

  anon3:
    assume true ==> true ==> !_READ_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} false;
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} true;
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} true;
    havoc $$_ZZ20transposeFineGrainedPfS_iiiE5block;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_15($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$_ZZ20transposeFineGrainedPfS_iiiE5block;
    assume _P$1 && $0 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$_ZZ20transposeFineGrainedPfS_iiiE5block;
    assume _P$1 && $0 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ20transposeFineGrainedPfS_iiiE5block;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(
      group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$_ZZ20transposeFineGrainedPfS_iiiE5block;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_grid_barrier_duplicated_16(_P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume true ==> !_READ_HAS_OCCURRED_$$_ZZ20transposeFineGrainedPfS_iiiE5block;
    assume true ==> !_WRITE_HAS_OCCURRED_$$_ZZ20transposeFineGrainedPfS_iiiE5block;
    assume true ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ20transposeFineGrainedPfS_iiiE5block;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} false;
    goto anon3;

  anon3:
    assume true ==> true ==> !_READ_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} false;
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} true;
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} true;
    havoc $$_ZZ20transposeFineGrainedPfS_iiiE5block;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_17($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$_ZZ20transposeFineGrainedPfS_iiiE5block;
    assume _P$1 && $0 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$_ZZ20transposeFineGrainedPfS_iiiE5block;
    assume _P$1 && $0 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ20transposeFineGrainedPfS_iiiE5block;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(
      group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$_ZZ20transposeFineGrainedPfS_iiiE5block;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_grid_barrier_duplicated_18(_P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume true ==> !_READ_HAS_OCCURRED_$$_ZZ20transposeFineGrainedPfS_iiiE5block;
    assume true ==> !_WRITE_HAS_OCCURRED_$$_ZZ20transposeFineGrainedPfS_iiiE5block;
    assume true ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ20transposeFineGrainedPfS_iiiE5block;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} false;
    goto anon3;

  anon3:
    assume true ==> true ==> !_READ_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume true ==> true ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} false;
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} true;
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} true;
    havoc $$_ZZ20transposeFineGrainedPfS_iiiE5block;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_19($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$_ZZ20transposeFineGrainedPfS_iiiE5block;
    assume _P$1 && $0 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$_ZZ20transposeFineGrainedPfS_iiiE5block;
    assume _P$1 && $0 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$_ZZ20transposeFineGrainedPfS_iiiE5block;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_READ_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> 
      _P$1 && $1 != 0bv1
       ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(
      group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
       && _P$1
       && _P$2
       && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$arg.;
    goto anon6;

  anon8_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$_ZZ20transposeFineGrainedPfS_iiiE5block;
    goto anon3;

  anon7_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



function {:bvbuiltin "bvsgt"} BV32_SGT(bv32, bv32) : bool;

function {:bvbuiltin "bvsdiv"} BV32_DIV(bv32, bv32) : bv32;
