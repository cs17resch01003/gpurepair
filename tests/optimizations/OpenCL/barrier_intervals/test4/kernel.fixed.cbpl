type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x: [bv32]bv32, y: bv32)
   returns (z$1: bv32, A$1: [bv32]bv32, z$2: bv32, A$2: [bv32]bv32);



var {:source_name "p"} {:group_shared} $$arg.: [bv1][bv32]bv32;

axiom {:array_info "$$arg."} {:group_shared} {:elem_width 32} {:source_name "p"} {:source_elem_width 32} {:source_dimensions "*"} true;

var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$arg.: bool;

var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$arg.: bool;

var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$arg.: bool;

const _WATCHED_OFFSET: bv32;

const {:global_offset_x} global_offset_x: bv32;

const {:global_offset_y} global_offset_y: bv32;

const {:global_offset_z} global_offset_z: bv32;

const {:group_size_x} group_size_x: bv32;

const {:group_size_y} group_size_y: bv32;

const {:group_size_z} group_size_z: bv32;

const {:local_id_x} local_id_x$1: bv32;

const {:local_id_x} local_id_x$2: bv32;

const {:num_groups_x} num_groups_x: bv32;

const {:num_groups_y} num_groups_y: bv32;

const {:num_groups_z} num_groups_z: bv32;

const {:work_dim} work_dim: bv32;

function {:bvbuiltin "bvadd"} BV32_ADD(bv32, bv32) : bv32;

function {:bvbuiltin "bvslt"} BV32_SLT(bv32, bv32) : bool;

procedure {:source_name "simple_kernel"} {:kernel} $simple_kernel();
  requires !_READ_HAS_OCCURRED_$$arg.
     && !_WRITE_HAS_OCCURRED_$$arg.
     && !_ATOMIC_HAS_OCCURRED_$$arg.;
  requires BV32_SGT(group_size_x, 0bv32);
  requires BV32_SGT(num_groups_x, 0bv32);
  requires BV32_SGE(group_id_x$1, 0bv32);
  requires BV32_SGE(group_id_x$2, 0bv32);
  requires BV32_SLT(group_id_x$1, num_groups_x);
  requires BV32_SLT(group_id_x$2, num_groups_x);
  requires BV32_SGE(local_id_x$1, 0bv32);
  requires BV32_SGE(local_id_x$2, 0bv32);
  requires BV32_SLT(local_id_x$1, group_size_x);
  requires BV32_SLT(local_id_x$2, group_size_x);
  requires BV32_SGT(group_size_y, 0bv32);
  requires BV32_SGT(num_groups_y, 0bv32);
  requires BV32_SGE(group_id_y$1, 0bv32);
  requires BV32_SGE(group_id_y$2, 0bv32);
  requires BV32_SLT(group_id_y$1, num_groups_y);
  requires BV32_SLT(group_id_y$2, num_groups_y);
  requires BV32_SGE(local_id_y$1, 0bv32);
  requires BV32_SGE(local_id_y$2, 0bv32);
  requires BV32_SLT(local_id_y$1, group_size_y);
  requires BV32_SLT(local_id_y$2, group_size_y);
  requires BV32_SGT(group_size_z, 0bv32);
  requires BV32_SGT(num_groups_z, 0bv32);
  requires BV32_SGE(group_id_z$1, 0bv32);
  requires BV32_SGE(group_id_z$2, 0bv32);
  requires BV32_SLT(group_id_z$1, num_groups_z);
  requires BV32_SLT(group_id_z$2, num_groups_z);
  requires BV32_SGE(local_id_z$1, 0bv32);
  requires BV32_SGE(local_id_z$2, 0bv32);
  requires BV32_SLT(local_id_z$1, group_size_z);
  requires BV32_SLT(local_id_z$2, group_size_z);
  requires group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> local_id_x$1 != local_id_x$2
       || local_id_y$1 != local_id_y$2
       || local_id_z$1 != local_id_z$2;
  modifies b18, b17, b16, b15, b14, b13, b12, b11, b10, b9, b8, b7, b6, b5, b4, b3, b2, b1, $$arg., _TRACKING, _READ_HAS_OCCURRED_$$arg., _WRITE_HAS_OCCURRED_$$arg., _WRITE_READ_BENIGN_FLAG_$$arg.;



implementation {:source_name "simple_kernel"} {:kernel} $simple_kernel()
{
  var $.01: bv32;
  var $.02$1: bv32;
  var $.02$2: bv32;
  var $.03$1: bv32;
  var $.03$2: bv32;
  var $.0$1: bv32;
  var $.0$2: bv32;
  var v0: bool;
  var v1$1: bv32;
  var v1$2: bv32;
  var v2$1: bool;
  var v2$2: bool;
  var v3$1: bool;
  var v3$2: bool;
  var v4$1: bool;
  var v4$2: bool;
  var v5$1: bool;
  var v5$2: bool;
  var p0$1: bool;
  var p0$2: bool;
  var p1$1: bool;
  var p1$2: bool;
  var p2$1: bool;
  var p2$2: bool;
  var p3$1: bool;
  var p3$2: bool;
  var p4$1: bool;
  var p4$2: bool;
  var p5$1: bool;
  var p5$2: bool;
  var p6$1: bool;
  var p6$2: bool;
  var p7$1: bool;
  var p7$2: bool;
  var p8$1: bool;
  var p8$2: bool;
  var p9$1: bool;
  var p9$2: bool;
  var p10$1: bool;
  var p10$2: bool;
  var p11$1: bool;
  var p11$2: bool;
  var p12$1: bool;
  var p12$2: bool;
  var p13$1: bool;
  var p13$2: bool;
  var p14$1: bool;
  var p14$2: bool;
  var p15$1: bool;
  var p15$2: bool;
  var p16$1: bool;
  var p16$2: bool;
  var p17$1: bool;
  var p17$2: bool;
  var p18$1: bool;
  var p18$2: bool;
  var p19$1: bool;
  var p19$2: bool;
  var p20$1: bool;
  var p20$2: bool;
  var p21$1: bool;
  var p21$2: bool;
  var p22$1: bool;
  var p22$2: bool;
  var p23$1: bool;
  var p23$2: bool;
  var p24$1: bool;
  var p24$2: bool;
  var p25$1: bool;
  var p25$2: bool;
  var p26$1: bool;
  var p26$2: bool;
  var p27$1: bool;
  var p27$2: bool;
  var p28$1: bool;
  var p28$2: bool;
  var p29$1: bool;
  var p29$2: bool;
  var p30$1: bool;
  var p30$2: bool;
  var p31$1: bool;
  var p31$2: bool;
  var p32$1: bool;
  var p32$2: bool;
  var p33$1: bool;
  var p33$2: bool;
  var p34$1: bool;
  var p34$2: bool;
  var p35$1: bool;
  var p35$2: bool;
  var p36$1: bool;
  var p36$2: bool;
  var p37$1: bool;
  var p37$2: bool;
  var p38$1: bool;
  var p38$2: bool;
  var p39$1: bool;
  var p39$2: bool;
  var p40$1: bool;
  var p40$2: bool;
  var p41$1: bool;
  var p41$2: bool;
  var p42$1: bool;
  var p42$2: bool;
  var p43$1: bool;
  var p43$2: bool;
  var _WRITE_HAS_OCCURRED_$$arg.$ghost$__partitioned_block_$6_0: bool;
  var _WRITE_HAS_OCCURRED_$$arg.$ghost$__partitioned_block_$10_0: bool;
  var _WRITE_HAS_OCCURRED_$$arg.$ghost$__partitioned_block_$14_0: bool;


  __partitioned_block_$0_0:
    b18 := false;
    b17 := false;
    b16 := false;
    b15 := false;
    b14 := false;
    b13 := false;
    b12 := false;
    b11 := false;
    b10 := false;
    b9 := false;
    b8 := false;
    b7 := false;
    b6 := true;
    b5 := false;
    b4 := false;
    b3 := false;
    b2 := true;
    b1 := false;
    p0$1 := false;
    p0$2 := false;
    p1$1 := false;
    p1$2 := false;
    p13$1 := false;
    p13$2 := false;
    p23$1 := false;
    p23$2 := false;
    p33$1 := false;
    p33$2 := false;
    p0$1 := (if b12 then b12 else p0$1);
    p0$2 := (if b12 then b12 else p0$2);
    call {:repair_barrier "b12"} {:repair_instrumented} {:sourceloc_num 0} $bugle_barrier_duplicated_17(1bv1, 1bv1, p0$1, p0$2);
    $.01 := 0bv32;
    assume {:captureState "loop_entry_state_3_0"} true;
    goto __partitioned_block_$1_0;

  __partitioned_block_$1_0:
    assume {:captureState "loop_head_state_3"} true;
    assume {:tag "accessedOffsetsSatisfyPredicates"} true ==> _WRITE_HAS_OCCURRED_$$arg. ==> _WATCHED_OFFSET == local_id_x$1;
    assert {:tag "groupSharedArraysDisjointAcrossGroups"} _ATOMIC_HAS_OCCURRED_$$arg.
       ==> group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2;
    assert {:tag "groupSharedArraysDisjointAcrossGroups"} _WRITE_HAS_OCCURRED_$$arg.
       ==> group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2;
    assert {:tag "groupSharedArraysDisjointAcrossGroups"} _READ_HAS_OCCURRED_$$arg.
       ==> group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2;
    assume {:tag "loopBound"} {:thread 1} true ==> BV32_UGE($.01, 0bv32);
    assume {:tag "loopBound"} {:thread 1} true ==> BV32_SGE($.01, 0bv32);
    assume {:tag "guardNonNeg"} {:thread 1} true ==> BV32_SLE(0bv32, $.01);
    p2$1 := false;
    p2$2 := false;
    p3$1 := false;
    p3$2 := false;
    p4$1 := false;
    p4$2 := false;
    p5$1 := false;
    p5$2 := false;
    p6$1 := false;
    p6$2 := false;
    p7$1 := false;
    p7$2 := false;
    p8$1 := false;
    p8$2 := false;
    p9$1 := false;
    p9$2 := false;
    p10$1 := false;
    p10$2 := false;
    p11$1 := false;
    p11$2 := false;
    p12$1 := false;
    p12$2 := false;
    p41$1 := false;
    p41$2 := false;
    p42$1 := false;
    p42$2 := false;
    p43$1 := false;
    p43$2 := false;
    p3$1 := (if b11 then b11 else p3$1);
    p3$2 := (if b11 then b11 else p3$2);
    call {:repair_barrier "b11"} {:repair_instrumented} {:sourceloc_num 1} $bugle_barrier_duplicated_16(1bv1, 1bv1, p3$1, p3$2);
    v0 := BV32_SLT($.01, 100bv32);
    goto __partitioned_block_$truebb_0, __partitioned_block_$falsebb_0;

  __partitioned_block_$falsebb_0:
    assume {:partition} !v0;
    p8$1 := (if b2 then b2 else p8$1);
    p8$2 := (if b2 then b2 else p8$2);
    call {:repair_barrier "b2"} {:repair_instrumented} {:sourceloc_num 7} $bugle_barrier_duplicated_13(1bv1, 1bv1, p8$1, p8$2);
    call {:sourceloc} {:sourceloc_num 7} {:repair_instrumented} _LOG_READ_$$arg.(true, 0bv32, $$arg.[1bv1][0bv32]);
    assume {:do_not_predicate} {:check_id "check_state_0"} {:captureState "check_state_0"} {:sourceloc} {:sourceloc_num 7} {:repair_instrumented} true;
    call {:check_id "check_state_0"} {:sourceloc} {:sourceloc_num 7} {:repair_instrumented} _CHECK_READ_$$arg.(true, 0bv32, $$arg.[(if group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       then 1bv1
       else 0bv1)][0bv32]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$arg."} true;
    v1$1 := $$arg.[1bv1][0bv32];
    v1$2 := $$arg.[(if group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       then 1bv1
       else 0bv1)][0bv32];
    v2$1 := v1$1 == 22bv32;
    v2$2 := v1$2 == 22bv32;
    p10$1 := (if v2$1 then v2$1 else p10$1);
    p10$2 := (if v2$2 then v2$2 else p10$2);
    p11$1 := (if p10$1 && b6 then b6 else p11$1);
    p11$2 := (if p10$2 && b6 then b6 else p11$2);
    call {:sourceloc_num 9} {:repair_barrier "b6"} $bugle_barrier_duplicated_12(1bv1, 1bv1, p11$1, p11$2);
    $.02$1 := (if p10$1 then 0bv32 else $.02$1);
    $.02$2 := (if p10$2 then 0bv32 else $.02$2);
    p13$1 := (if p10$1 then true else p13$1);
    p13$2 := (if p10$2 then true else p13$2);
    _WRITE_HAS_OCCURRED_$$arg.$ghost$__partitioned_block_$6_0 := _WRITE_HAS_OCCURRED_$$arg.;
    assume {:captureState "loop_entry_state_2_0"} true;
    goto __partitioned_block_$6_0;

  __partitioned_block_$6_0:
    assume {:captureState "loop_head_state_2"} true;
    assume {:tag "disabledMaintainsInstrumentation"} true
       ==> 
      !p10$1
       ==> (_WRITE_HAS_OCCURRED_$$arg.$ghost$__partitioned_block_$6_0
         <==> _WRITE_HAS_OCCURRED_$$arg.);
    assume {:tag "accessedOffsetsSatisfyPredicates"} true ==> _WRITE_HAS_OCCURRED_$$arg. ==> _WATCHED_OFFSET == local_id_x$1;
    assume {:tag "predicatedEquality"} true ==> p13$1 && p13$2 ==> $.02$1 == $.02$2;
    assume {:tag "loopPredicateEquality"} true
       ==> 
      group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> (p13$1 <==> p13$2);
    assert {:tag "groupSharedArraysDisjointAcrossGroups"} _ATOMIC_HAS_OCCURRED_$$arg.
       ==> group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2;
    assert {:tag "groupSharedArraysDisjointAcrossGroups"} _WRITE_HAS_OCCURRED_$$arg.
       ==> group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2;
    assert {:tag "groupSharedArraysDisjointAcrossGroups"} _READ_HAS_OCCURRED_$$arg.
       ==> group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2;
    assume {:predicate "p13"} {:dominator_predicate "p10"} true;
    assume {:do_not_predicate} {:tag "conditionsImplyingEnabledness"} {:thread 1} true ==> v1$1 == 22bv32 && BV32_SLT($.02$1, 100bv32) ==> p13$1;
    assume {:do_not_predicate} {:tag "conditionsImplyingEnabledness"} {:thread 2} true ==> v1$2 == 22bv32 && BV32_SLT($.02$2, 100bv32) ==> p13$2;
    assume {:tag "conditionsImpliedByEnabledness"} {:thread 1} p13$1 ==> true ==> p13$1 ==> v1$1 == 22bv32;
    assume {:tag "conditionsImpliedByEnabledness"} {:thread 2} p13$2 ==> true ==> p13$2 ==> v1$2 == 22bv32;
    assume {:tag "loopBound"} {:thread 1} p13$1 ==> true ==> BV32_UGE($.02$1, 0bv32);
    assume {:tag "loopBound"} {:thread 2} p13$2 ==> true ==> BV32_UGE($.02$2, 0bv32);
    assume {:tag "loopBound"} {:thread 1} p13$1 ==> true ==> BV32_SGE($.02$1, 0bv32);
    assume {:tag "loopBound"} {:thread 2} p13$2 ==> true ==> BV32_SGE($.02$2, 0bv32);
    assume {:tag "guardMinusInitialIsUniform"} {:thread 1} p13$1
       ==> 
      true
       ==> 
      group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> BV32_SUB($.02$1, 0bv32) == BV32_SUB($.02$2, 0bv32);
    assume {:tag "guardMinusInitialIsUniform"} {:thread 2} p13$2
       ==> 
      true
       ==> 
      group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> BV32_SUB($.02$2, 0bv32) == BV32_SUB($.02$1, 0bv32);
    assume {:tag "guardNonNeg"} {:thread 1} p13$1 ==> true ==> BV32_SLE(0bv32, $.02$1);
    assume {:tag "guardNonNeg"} {:thread 2} p13$2 ==> true ==> BV32_SLE(0bv32, $.02$2);
    p14$1 := false;
    p14$2 := false;
    p15$1 := false;
    p15$2 := false;
    p16$1 := false;
    p16$2 := false;
    p17$1 := false;
    p17$2 := false;
    p18$1 := false;
    p18$2 := false;
    p19$1 := false;
    p19$2 := false;
    p20$1 := false;
    p20$2 := false;
    p21$1 := false;
    p21$2 := false;
    p22$1 := false;
    p22$2 := false;
    p15$1 := (if p13$1 && b13 then b13 else p15$1);
    p15$2 := (if p13$2 && b13 then b13 else p15$2);
    call {:repair_barrier "b13"} {:repair_instrumented} {:sourceloc_num 10} $bugle_barrier_duplicated_11(1bv1, 1bv1, p15$1, p15$2);
    v3$1 := (if p13$1 then BV32_SLT($.02$1, 100bv32) else v3$1);
    v3$2 := (if p13$2 then BV32_SLT($.02$2, 100bv32) else v3$2);
    p16$1 := (if p13$1 && v3$1 then v3$1 else p16$1);
    p16$2 := (if p13$2 && v3$2 then v3$2 else p16$2);
    p13$1 := (if p13$1 && !v3$1 then v3$1 else p13$1);
    p13$2 := (if p13$2 && !v3$2 then v3$2 else p13$2);
    p18$1 := (if p16$1 && b3 then b3 else p18$1);
    p18$2 := (if p16$2 && b3 then b3 else p18$2);
    call {:repair_barrier "b3"} {:repair_instrumented} {:sourceloc_num 12} $bugle_barrier_duplicated_10(1bv1, 1bv1, p18$1, p18$2);
    call {:sourceloc} {:sourceloc_num 12} {:repair_instrumented} _LOG_WRITE_$$arg.(p16$1, local_id_x$1, local_id_x$1, $$arg.[1bv1][local_id_x$1]);
    call _UPDATE_WRITE_READ_BENIGN_FLAG_$$arg.(p16$2, local_id_x$2);
    assume {:do_not_predicate} {:check_id "check_state_3"} {:captureState "check_state_3"} {:sourceloc} {:sourceloc_num 12} {:repair_instrumented} true;
    call {:check_id "check_state_3"} {:sourceloc} {:sourceloc_num 12} {:repair_instrumented} _CHECK_WRITE_$$arg.(p16$2, local_id_x$2, local_id_x$2);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_WRITE_$$arg."} true;
    $$arg.[1bv1][local_id_x$1] := (if p16$1 then local_id_x$1 else $$arg.[1bv1][local_id_x$1]);
    $$arg.[(if group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       then 1bv1
       else 0bv1)][local_id_x$2] := (if p16$2
       then local_id_x$2
       else $$arg.[(if group_id_x$1 == group_id_x$2
           && group_id_y$1 == group_id_y$2
           && group_id_z$1 == group_id_z$2
         then 1bv1
         else 0bv1)][local_id_x$2]);
    p20$1 := (if p16$1 && b8 then b8 else p20$1);
    p20$2 := (if p16$2 && b8 then b8 else p20$2);
    call {:sourceloc_num 13} {:repair_barrier "b8"} $bugle_barrier_duplicated_9(1bv1, 1bv1, p20$1, p20$2);
    $.02$1 := (if p16$1 then BV32_ADD($.02$1, 1bv32) else $.02$1);
    $.02$2 := (if p16$2 then BV32_ADD($.02$2, 1bv32) else $.02$2);
    p13$1 := (if p16$1 then true else p13$1);
    p13$2 := (if p16$2 then true else p13$2);
    goto $6.backedge, __partitioned_block_$6.tail_0;

  __partitioned_block_$6.tail_0:
    assume !p13$1 && !p13$2;
    p21$1 := (if p10$1 && b15 then b15 else p21$1);
    p21$2 := (if p10$2 && b15 then b15 else p21$2);
    call {:repair_barrier "b15"} {:repair_instrumented} {:sourceloc_num 15} $bugle_barrier_duplicated_8(1bv1, 1bv1, p21$1, p21$2);
    $.03$1 := (if p10$1 then 0bv32 else $.03$1);
    $.03$2 := (if p10$2 then 0bv32 else $.03$2);
    p23$1 := (if p10$1 then true else p23$1);
    p23$2 := (if p10$2 then true else p23$2);
    _WRITE_HAS_OCCURRED_$$arg.$ghost$__partitioned_block_$10_0 := _WRITE_HAS_OCCURRED_$$arg.;
    assume {:captureState "loop_entry_state_1_0"} true;
    goto __partitioned_block_$10_0;

  __partitioned_block_$10_0:
    assume {:captureState "loop_head_state_1"} true;
    assume {:tag "disabledMaintainsInstrumentation"} true
       ==> 
      !p10$1
       ==> (_WRITE_HAS_OCCURRED_$$arg.$ghost$__partitioned_block_$10_0
         <==> _WRITE_HAS_OCCURRED_$$arg.);
    assume {:tag "accessedOffsetsSatisfyPredicates"} true ==> _WRITE_HAS_OCCURRED_$$arg. ==> _WATCHED_OFFSET == local_id_x$1;
    assume {:tag "predicatedEquality"} true ==> p23$1 && p23$2 ==> $.03$1 == $.03$2;
    assume {:tag "loopPredicateEquality"} true
       ==> 
      group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> (p23$1 <==> p23$2);
    assert {:tag "groupSharedArraysDisjointAcrossGroups"} _ATOMIC_HAS_OCCURRED_$$arg.
       ==> group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2;
    assert {:tag "groupSharedArraysDisjointAcrossGroups"} _WRITE_HAS_OCCURRED_$$arg.
       ==> group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2;
    assert {:tag "groupSharedArraysDisjointAcrossGroups"} _READ_HAS_OCCURRED_$$arg.
       ==> group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2;
    assume {:predicate "p23"} {:dominator_predicate "p10"} true;
    assume {:do_not_predicate} {:tag "conditionsImplyingEnabledness"} {:thread 1} true ==> v1$1 == 22bv32 && BV32_SLT($.03$1, 100bv32) ==> p23$1;
    assume {:do_not_predicate} {:tag "conditionsImplyingEnabledness"} {:thread 2} true ==> v1$2 == 22bv32 && BV32_SLT($.03$2, 100bv32) ==> p23$2;
    assume {:tag "conditionsImpliedByEnabledness"} {:thread 1} p23$1 ==> true ==> p23$1 ==> v1$1 == 22bv32;
    assume {:tag "conditionsImpliedByEnabledness"} {:thread 2} p23$2 ==> true ==> p23$2 ==> v1$2 == 22bv32;
    assume {:tag "loopBound"} {:thread 1} p23$1 ==> true ==> BV32_UGE($.03$1, 0bv32);
    assume {:tag "loopBound"} {:thread 2} p23$2 ==> true ==> BV32_UGE($.03$2, 0bv32);
    assume {:tag "loopBound"} {:thread 1} p23$1 ==> true ==> BV32_SGE($.03$1, 0bv32);
    assume {:tag "loopBound"} {:thread 2} p23$2 ==> true ==> BV32_SGE($.03$2, 0bv32);
    assume {:tag "guardMinusInitialIsUniform"} {:thread 1} p23$1
       ==> 
      true
       ==> 
      group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> BV32_SUB($.03$1, 0bv32) == BV32_SUB($.03$2, 0bv32);
    assume {:tag "guardMinusInitialIsUniform"} {:thread 2} p23$2
       ==> 
      true
       ==> 
      group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> BV32_SUB($.03$2, 0bv32) == BV32_SUB($.03$1, 0bv32);
    assume {:tag "guardNonNeg"} {:thread 1} p23$1 ==> true ==> BV32_SLE(0bv32, $.03$1);
    assume {:tag "guardNonNeg"} {:thread 2} p23$2 ==> true ==> BV32_SLE(0bv32, $.03$2);
    p24$1 := false;
    p24$2 := false;
    p25$1 := false;
    p25$2 := false;
    p26$1 := false;
    p26$2 := false;
    p27$1 := false;
    p27$2 := false;
    p28$1 := false;
    p28$2 := false;
    p29$1 := false;
    p29$2 := false;
    p30$1 := false;
    p30$2 := false;
    p31$1 := false;
    p31$2 := false;
    p32$1 := false;
    p32$2 := false;
    p25$1 := (if p23$1 && b14 then b14 else p25$1);
    p25$2 := (if p23$2 && b14 then b14 else p25$2);
    call {:repair_barrier "b14"} {:repair_instrumented} {:sourceloc_num 16} $bugle_barrier_duplicated_7(1bv1, 1bv1, p25$1, p25$2);
    v4$1 := (if p23$1 then BV32_SLT($.03$1, 100bv32) else v4$1);
    v4$2 := (if p23$2 then BV32_SLT($.03$2, 100bv32) else v4$2);
    p26$1 := (if p23$1 && v4$1 then v4$1 else p26$1);
    p26$2 := (if p23$2 && v4$2 then v4$2 else p26$2);
    p23$1 := (if p23$1 && !v4$1 then v4$1 else p23$1);
    p23$2 := (if p23$2 && !v4$2 then v4$2 else p23$2);
    p28$1 := (if p26$1 && b4 then b4 else p28$1);
    p28$2 := (if p26$2 && b4 then b4 else p28$2);
    call {:repair_barrier "b4"} {:repair_instrumented} {:sourceloc_num 18} $bugle_barrier_duplicated_6(1bv1, 1bv1, p28$1, p28$2);
    call {:sourceloc} {:sourceloc_num 18} {:repair_instrumented} _LOG_WRITE_$$arg.(p26$1, local_id_x$1, local_id_x$1, $$arg.[1bv1][local_id_x$1]);
    call _UPDATE_WRITE_READ_BENIGN_FLAG_$$arg.(p26$2, local_id_x$2);
    assume {:do_not_predicate} {:check_id "check_state_2"} {:captureState "check_state_2"} {:sourceloc} {:sourceloc_num 18} {:repair_instrumented} true;
    call {:check_id "check_state_2"} {:sourceloc} {:sourceloc_num 18} {:repair_instrumented} _CHECK_WRITE_$$arg.(p26$2, local_id_x$2, local_id_x$2);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_WRITE_$$arg."} true;
    $$arg.[1bv1][local_id_x$1] := (if p26$1 then local_id_x$1 else $$arg.[1bv1][local_id_x$1]);
    $$arg.[(if group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       then 1bv1
       else 0bv1)][local_id_x$2] := (if p26$2
       then local_id_x$2
       else $$arg.[(if group_id_x$1 == group_id_x$2
           && group_id_y$1 == group_id_y$2
           && group_id_z$1 == group_id_z$2
         then 1bv1
         else 0bv1)][local_id_x$2]);
    p30$1 := (if p26$1 && b9 then b9 else p30$1);
    p30$2 := (if p26$2 && b9 then b9 else p30$2);
    call {:sourceloc_num 19} {:repair_barrier "b9"} $bugle_barrier_duplicated_5(1bv1, 1bv1, p30$1, p30$2);
    $.03$1 := (if p26$1 then BV32_ADD($.03$1, 1bv32) else $.03$1);
    $.03$2 := (if p26$2 then BV32_ADD($.03$2, 1bv32) else $.03$2);
    p23$1 := (if p26$1 then true else p23$1);
    p23$2 := (if p26$2 then true else p23$2);
    goto $10.backedge, __partitioned_block_$10.tail_0;

  __partitioned_block_$10.tail_0:
    assume !p23$1 && !p23$2;
    p31$1 := (if p10$1 && b17 then b17 else p31$1);
    p31$2 := (if p10$2 && b17 then b17 else p31$2);
    call {:repair_barrier "b17"} {:repair_instrumented} {:sourceloc_num 21} $bugle_barrier_duplicated_4(1bv1, 1bv1, p31$1, p31$2);
    $.0$1 := (if p10$1 then 0bv32 else $.0$1);
    $.0$2 := (if p10$2 then 0bv32 else $.0$2);
    p33$1 := (if p10$1 then true else p33$1);
    p33$2 := (if p10$2 then true else p33$2);
    _WRITE_HAS_OCCURRED_$$arg.$ghost$__partitioned_block_$14_0 := _WRITE_HAS_OCCURRED_$$arg.;
    assume {:captureState "loop_entry_state_0_0"} true;
    goto __partitioned_block_$14_0;

  __partitioned_block_$14_0:
    assume {:captureState "loop_head_state_0"} true;
    assume {:tag "disabledMaintainsInstrumentation"} true
       ==> 
      !p10$1
       ==> (_WRITE_HAS_OCCURRED_$$arg.$ghost$__partitioned_block_$14_0
         <==> _WRITE_HAS_OCCURRED_$$arg.);
    assume {:tag "accessedOffsetsSatisfyPredicates"} true ==> _WRITE_HAS_OCCURRED_$$arg. ==> _WATCHED_OFFSET == local_id_x$1;
    assume {:tag "predicatedEquality"} true ==> p33$1 && p33$2 ==> $.0$1 == $.0$2;
    assume {:tag "loopPredicateEquality"} true
       ==> 
      group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> (p33$1 <==> p33$2);
    assert {:tag "groupSharedArraysDisjointAcrossGroups"} _ATOMIC_HAS_OCCURRED_$$arg.
       ==> group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2;
    assert {:tag "groupSharedArraysDisjointAcrossGroups"} _WRITE_HAS_OCCURRED_$$arg.
       ==> group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2;
    assert {:tag "groupSharedArraysDisjointAcrossGroups"} _READ_HAS_OCCURRED_$$arg.
       ==> group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2;
    assume {:predicate "p33"} {:dominator_predicate "p10"} true;
    assume {:do_not_predicate} {:tag "conditionsImplyingEnabledness"} {:thread 1} true ==> v1$1 == 22bv32 && BV32_SLT($.0$1, 100bv32) ==> p33$1;
    assume {:do_not_predicate} {:tag "conditionsImplyingEnabledness"} {:thread 2} true ==> v1$2 == 22bv32 && BV32_SLT($.0$2, 100bv32) ==> p33$2;
    assume {:tag "conditionsImpliedByEnabledness"} {:thread 1} p33$1 ==> true ==> p33$1 ==> v1$1 == 22bv32;
    assume {:tag "conditionsImpliedByEnabledness"} {:thread 2} p33$2 ==> true ==> p33$2 ==> v1$2 == 22bv32;
    assume {:tag "loopBound"} {:thread 1} p33$1 ==> true ==> BV32_UGE($.0$1, 0bv32);
    assume {:tag "loopBound"} {:thread 2} p33$2 ==> true ==> BV32_UGE($.0$2, 0bv32);
    assume {:tag "loopBound"} {:thread 1} p33$1 ==> true ==> BV32_SGE($.0$1, 0bv32);
    assume {:tag "loopBound"} {:thread 2} p33$2 ==> true ==> BV32_SGE($.0$2, 0bv32);
    assume {:tag "guardMinusInitialIsUniform"} {:thread 1} p33$1
       ==> 
      true
       ==> 
      group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> BV32_SUB($.0$1, 0bv32) == BV32_SUB($.0$2, 0bv32);
    assume {:tag "guardMinusInitialIsUniform"} {:thread 2} p33$2
       ==> 
      true
       ==> 
      group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       ==> BV32_SUB($.0$2, 0bv32) == BV32_SUB($.0$1, 0bv32);
    assume {:tag "guardNonNeg"} {:thread 1} p33$1 ==> true ==> BV32_SLE(0bv32, $.0$1);
    assume {:tag "guardNonNeg"} {:thread 2} p33$2 ==> true ==> BV32_SLE(0bv32, $.0$2);
    p34$1 := false;
    p34$2 := false;
    p35$1 := false;
    p35$2 := false;
    p36$1 := false;
    p36$2 := false;
    p37$1 := false;
    p37$2 := false;
    p38$1 := false;
    p38$2 := false;
    p39$1 := false;
    p39$2 := false;
    p40$1 := false;
    p40$2 := false;
    p35$1 := (if p33$1 && b16 then b16 else p35$1);
    p35$2 := (if p33$2 && b16 then b16 else p35$2);
    call {:repair_barrier "b16"} {:repair_instrumented} {:sourceloc_num 22} $bugle_barrier_duplicated_3(1bv1, 1bv1, p35$1, p35$2);
    v5$1 := (if p33$1 then BV32_SLT($.0$1, 100bv32) else v5$1);
    v5$2 := (if p33$2 then BV32_SLT($.0$2, 100bv32) else v5$2);
    p36$1 := (if p33$1 && v5$1 then v5$1 else p36$1);
    p36$2 := (if p33$2 && v5$2 then v5$2 else p36$2);
    p33$1 := (if p33$1 && !v5$1 then v5$1 else p33$1);
    p33$2 := (if p33$2 && !v5$2 then v5$2 else p33$2);
    p38$1 := (if p36$1 && b5 then b5 else p38$1);
    p38$2 := (if p36$2 && b5 then b5 else p38$2);
    call {:repair_barrier "b5"} {:repair_instrumented} {:sourceloc_num 24} $bugle_barrier_duplicated_2(1bv1, 1bv1, p38$1, p38$2);
    call {:sourceloc} {:sourceloc_num 24} {:repair_instrumented} _LOG_WRITE_$$arg.(p36$1, local_id_x$1, local_id_x$1, $$arg.[1bv1][local_id_x$1]);
    call _UPDATE_WRITE_READ_BENIGN_FLAG_$$arg.(p36$2, local_id_x$2);
    assume {:do_not_predicate} {:check_id "check_state_1"} {:captureState "check_state_1"} {:sourceloc} {:sourceloc_num 24} {:repair_instrumented} true;
    call {:check_id "check_state_1"} {:sourceloc} {:sourceloc_num 24} {:repair_instrumented} _CHECK_WRITE_$$arg.(p36$2, local_id_x$2, local_id_x$2);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_WRITE_$$arg."} true;
    $$arg.[1bv1][local_id_x$1] := (if p36$1 then local_id_x$1 else $$arg.[1bv1][local_id_x$1]);
    $$arg.[(if group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       then 1bv1
       else 0bv1)][local_id_x$2] := (if p36$2
       then local_id_x$2
       else $$arg.[(if group_id_x$1 == group_id_x$2
           && group_id_y$1 == group_id_y$2
           && group_id_z$1 == group_id_z$2
         then 1bv1
         else 0bv1)][local_id_x$2]);
    p40$1 := (if p36$1 && b10 then b10 else p40$1);
    p40$2 := (if p36$2 && b10 then b10 else p40$2);
    call {:sourceloc_num 25} {:repair_barrier "b10"} $bugle_barrier_duplicated_1(1bv1, 1bv1, p40$1, p40$2);
    $.0$1 := (if p36$1 then BV32_ADD($.0$1, 1bv32) else $.0$1);
    $.0$2 := (if p36$2 then BV32_ADD($.0$2, 1bv32) else $.0$2);
    p33$1 := (if p36$1 then true else p33$1);
    p33$2 := (if p36$2 then true else p33$2);
    goto $14.backedge, __partitioned_block_$14.tail_0;

  __partitioned_block_$14.tail_0:
    assume !p33$1 && !p33$2;
    p42$1 := (if b18 then b18 else p42$1);
    p42$2 := (if b18 then b18 else p42$2);
    call {:repair_barrier "b18"} {:repair_instrumented} {:sourceloc_num 28} $bugle_barrier_duplicated_0(1bv1, 1bv1, p42$1, p42$2);
    return;

  $14.backedge:
    assume {:backedge} p33$1 || p33$2;
    assume {:captureState "loop_back_edge_state_0_0"} true;
    goto __partitioned_block_$14_0;

  $10.backedge:
    assume {:backedge} p23$1 || p23$2;
    assume {:captureState "loop_back_edge_state_1_0"} true;
    goto __partitioned_block_$10_0;

  $6.backedge:
    assume {:backedge} p13$1 || p13$2;
    assume {:captureState "loop_back_edge_state_2_0"} true;
    goto __partitioned_block_$6_0;

  __partitioned_block_$truebb_0:
    assume {:partition} v0;
    p5$1 := (if b1 then b1 else p5$1);
    p5$2 := (if b1 then b1 else p5$2);
    call {:repair_barrier "b1"} {:repair_instrumented} {:sourceloc_num 3} $bugle_barrier_duplicated_15(1bv1, 1bv1, p5$1, p5$2);
    call {:sourceloc} {:sourceloc_num 3} {:repair_instrumented} _LOG_WRITE_$$arg.(true, local_id_x$1, local_id_x$1, $$arg.[1bv1][local_id_x$1]);
    call _UPDATE_WRITE_READ_BENIGN_FLAG_$$arg.(true, local_id_x$2);
    assume {:do_not_predicate} {:check_id "check_state_4"} {:captureState "check_state_4"} {:sourceloc} {:sourceloc_num 3} {:repair_instrumented} true;
    call {:check_id "check_state_4"} {:sourceloc} {:sourceloc_num 3} {:repair_instrumented} _CHECK_WRITE_$$arg.(true, local_id_x$2, local_id_x$2);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_WRITE_$$arg."} true;
    $$arg.[1bv1][local_id_x$1] := local_id_x$1;
    $$arg.[(if group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
       then 1bv1
       else 0bv1)][local_id_x$2] := local_id_x$2;
    p7$1 := (if b7 then b7 else p7$1);
    p7$2 := (if b7 then b7 else p7$2);
    call {:sourceloc_num 4} {:repair_barrier "b7"} $bugle_barrier_duplicated_14(1bv1, 1bv1, p7$1, p7$2);
    $.01 := BV32_ADD($.01, 1bv32);
    assume {:captureState "loop_back_edge_state_3_0"} true;
    goto __partitioned_block_$1_0;
}



axiom (if group_size_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;

axiom (if group_size_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;

axiom (if num_groups_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;

axiom (if num_groups_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;

axiom (if work_dim == 1bv32 then 1bv1 else 0bv1) != 0bv1;

axiom (if group_size_x == 16bv32 then 1bv1 else 0bv1) != 0bv1;

axiom (if num_groups_x == 16bv32 then 1bv1 else 0bv1) != 0bv1;

axiom (if global_offset_x == 0bv32 then 1bv1 else 0bv1) != 0bv1;

axiom (if global_offset_y == 0bv32 then 1bv1 else 0bv1) != 0bv1;

axiom (if global_offset_z == 0bv32 then 1bv1 else 0bv1) != 0bv1;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b1: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b2: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b3: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b4: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b5: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b6: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b7: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b8: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b9: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b10: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b11: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b12: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b13: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b14: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b15: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b16: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b17: bool;

var {:source_dimensions "*"} {:source_elem_width 32} {:elem_width 32} {:global} {:race_checking} {:repair} b18: bool;

const {:local_id_y} local_id_y$1: bv32;

const {:local_id_y} local_id_y$2: bv32;

const {:local_id_z} local_id_z$1: bv32;

const {:local_id_z} local_id_z$2: bv32;

const {:group_id_x} group_id_x$1: bv32;

const {:group_id_x} group_id_x$2: bv32;

const {:group_id_y} group_id_y$1: bv32;

const {:group_id_y} group_id_y$2: bv32;

const {:group_id_z} group_id_z$1: bv32;

const {:group_id_z} group_id_z$2: bv32;

procedure {:inline 1} {:source_name "bugle_barrier"} {:barrier} $bugle_barrier_duplicated_0($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg.;



procedure {:inline 1} {:source_name "bugle_barrier"} {:barrier} $bugle_barrier_duplicated_1($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg.;



procedure {:inline 1} {:source_name "bugle_barrier"} {:barrier} $bugle_barrier_duplicated_2($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg.;



procedure {:inline 1} {:source_name "bugle_barrier"} {:barrier} $bugle_barrier_duplicated_3($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg.;



procedure {:inline 1} {:source_name "bugle_barrier"} {:barrier} $bugle_barrier_duplicated_4($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg.;



procedure {:inline 1} {:source_name "bugle_barrier"} {:barrier} $bugle_barrier_duplicated_5($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg.;



procedure {:inline 1} {:source_name "bugle_barrier"} {:barrier} $bugle_barrier_duplicated_6($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg.;



procedure {:inline 1} {:source_name "bugle_barrier"} {:barrier} $bugle_barrier_duplicated_7($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg.;



procedure {:inline 1} {:source_name "bugle_barrier"} {:barrier} $bugle_barrier_duplicated_8($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg.;



procedure {:inline 1} {:source_name "bugle_barrier"} {:barrier} $bugle_barrier_duplicated_9($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg.;



procedure {:inline 1} {:source_name "bugle_barrier"} {:barrier} $bugle_barrier_duplicated_10($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg.;



procedure {:inline 1} {:source_name "bugle_barrier"} {:barrier} $bugle_barrier_duplicated_11($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg.;



procedure {:inline 1} {:source_name "bugle_barrier"} {:barrier} $bugle_barrier_duplicated_12($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg.;



procedure {:inline 1} {:source_name "bugle_barrier"} {:barrier} $bugle_barrier_duplicated_13($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg.;



procedure {:inline 1} {:source_name "bugle_barrier"} {:barrier} $bugle_barrier_duplicated_14($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg.;



procedure {:inline 1} {:source_name "bugle_barrier"} {:barrier} $bugle_barrier_duplicated_15($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg.;



procedure {:inline 1} {:source_name "bugle_barrier"} {:barrier} $bugle_barrier_duplicated_16($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg.;



procedure {:inline 1} {:source_name "bugle_barrier"} {:barrier} $bugle_barrier_duplicated_17($0: bv1, $1: bv1, _P$1: bool, _P$2: bool);
  requires _P$1 ==> $0 == 1bv1;
  requires _P$2 ==> $0 == 1bv1;
  requires _P$1 ==> $1 == 1bv1;
  requires _P$2 ==> $1 == 1bv1;
  requires {:barrier_divergence} group_id_x$1 == group_id_x$2
       && group_id_y$1 == group_id_y$2
       && group_id_z$1 == group_id_z$2
     ==> (_P$1 <==> _P$2);
  modifies _TRACKING, $$arg.;



function {:bvbuiltin "bvsle"} BV32_SLE(bv32, bv32) : bool;

function {:bvbuiltin "bvsge"} BV32_SGE(bv32, bv32) : bool;

function {:bvbuiltin "bvule"} BV32_ULE(bv32, bv32) : bool;

function {:bvbuiltin "bvuge"} BV32_UGE(bv32, bv32) : bool;

function {:bvbuiltin "bvsub"} BV32_SUB(bv32, bv32) : bv32;

const _WATCHED_VALUE_$$arg.: bv32;

procedure {:inline 1} _LOG_READ_$$arg.(_P: bool, _offset: bv32, _value: bv32);
  modifies _READ_HAS_OCCURRED_$$arg.;



implementation {:inline 1} _LOG_READ_$$arg.(_P: bool, _offset: bv32, _value: bv32)
{

  log_access_entry:
    _READ_HAS_OCCURRED_$$arg. := (if _P
         && group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && _TRACKING
         && _WATCHED_OFFSET == _offset
         && _WATCHED_VALUE_$$arg. == _value
       then true
       else _READ_HAS_OCCURRED_$$arg.);
    return;
}



procedure _CHECK_READ_$$arg.(_P: bool, _offset: bv32, _value: bv32);
  requires {:source_name "p"} {:array "$$arg."} {:race} {:write_read} !(
    _P
     && _WRITE_HAS_OCCURRED_$$arg.
     && _WATCHED_OFFSET == _offset
     && _WRITE_READ_BENIGN_FLAG_$$arg.
     && group_id_x$1 == group_id_x$2
     && group_id_y$1 == group_id_y$2
     && group_id_z$1 == group_id_z$2);
  requires {:source_name "p"} {:array "$$arg."} {:race} {:atomic_read} !(
    _P
     && _ATOMIC_HAS_OCCURRED_$$arg.
     && _WATCHED_OFFSET == _offset
     && group_id_x$1 == group_id_x$2
     && group_id_y$1 == group_id_y$2
     && group_id_z$1 == group_id_z$2);



var _WRITE_READ_BENIGN_FLAG_$$arg.: bool;

procedure {:inline 1} _LOG_WRITE_$$arg.(_P: bool, _offset: bv32, _value: bv32, _value_old: bv32);
  modifies _WRITE_HAS_OCCURRED_$$arg., _WRITE_READ_BENIGN_FLAG_$$arg.;



implementation {:inline 1} _LOG_WRITE_$$arg.(_P: bool, _offset: bv32, _value: bv32, _value_old: bv32)
{

  log_access_entry:
    _WRITE_HAS_OCCURRED_$$arg. := (if _P
         && group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && _TRACKING
         && _WATCHED_OFFSET == _offset
         && _WATCHED_VALUE_$$arg. == _value
       then true
       else _WRITE_HAS_OCCURRED_$$arg.);
    _WRITE_READ_BENIGN_FLAG_$$arg. := (if _P
         && group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && _TRACKING
         && _WATCHED_OFFSET == _offset
         && _WATCHED_VALUE_$$arg. == _value
       then _value != _value_old
       else _WRITE_READ_BENIGN_FLAG_$$arg.);
    return;
}



procedure _CHECK_WRITE_$$arg.(_P: bool, _offset: bv32, _value: bv32);
  requires {:source_name "p"} {:array "$$arg."} {:race} {:write_write} !(
    _P
     && _WRITE_HAS_OCCURRED_$$arg.
     && _WATCHED_OFFSET == _offset
     && _WATCHED_VALUE_$$arg. != _value
     && group_id_x$1 == group_id_x$2
     && group_id_y$1 == group_id_y$2
     && group_id_z$1 == group_id_z$2);
  requires {:source_name "p"} {:array "$$arg."} {:race} {:read_write} !(
    _P
     && _READ_HAS_OCCURRED_$$arg.
     && _WATCHED_OFFSET == _offset
     && _WATCHED_VALUE_$$arg. != _value
     && group_id_x$1 == group_id_x$2
     && group_id_y$1 == group_id_y$2
     && group_id_z$1 == group_id_z$2);
  requires {:source_name "p"} {:array "$$arg."} {:race} {:atomic_write} !(
    _P
     && _ATOMIC_HAS_OCCURRED_$$arg.
     && _WATCHED_OFFSET == _offset
     && group_id_x$1 == group_id_x$2
     && group_id_y$1 == group_id_y$2
     && group_id_z$1 == group_id_z$2);



procedure {:inline 1} _LOG_ATOMIC_$$arg.(_P: bool, _offset: bv32);
  modifies _ATOMIC_HAS_OCCURRED_$$arg.;



implementation {:inline 1} _LOG_ATOMIC_$$arg.(_P: bool, _offset: bv32)
{

  log_access_entry:
    _ATOMIC_HAS_OCCURRED_$$arg. := (if _P
         && group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && _TRACKING
         && _WATCHED_OFFSET == _offset
       then true
       else _ATOMIC_HAS_OCCURRED_$$arg.);
    return;
}



procedure _CHECK_ATOMIC_$$arg.(_P: bool, _offset: bv32);
  requires {:source_name "p"} {:array "$$arg."} {:race} {:write_atomic} !(
    _P
     && _WRITE_HAS_OCCURRED_$$arg.
     && _WATCHED_OFFSET == _offset
     && group_id_x$1 == group_id_x$2
     && group_id_y$1 == group_id_y$2
     && group_id_z$1 == group_id_z$2);
  requires {:source_name "p"} {:array "$$arg."} {:race} {:read_atomic} !(
    _P
     && _READ_HAS_OCCURRED_$$arg.
     && _WATCHED_OFFSET == _offset
     && group_id_x$1 == group_id_x$2
     && group_id_y$1 == group_id_y$2
     && group_id_z$1 == group_id_z$2);



procedure {:inline 1} _UPDATE_WRITE_READ_BENIGN_FLAG_$$arg.(_P: bool, _offset: bv32);
  modifies _WRITE_READ_BENIGN_FLAG_$$arg.;



implementation {:inline 1} _UPDATE_WRITE_READ_BENIGN_FLAG_$$arg.(_P: bool, _offset: bv32)
{

  _UPDATE_BENIGN_FLAG:
    _WRITE_READ_BENIGN_FLAG_$$arg. := (if _P && _WRITE_HAS_OCCURRED_$$arg. && _WATCHED_OFFSET == _offset
       then false
       else _WRITE_READ_BENIGN_FLAG_$$arg.);
    return;
}



var _TRACKING: bool;

implementation {:inline 1} $bugle_barrier_duplicated_0($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon4_Then, anon4_Else;

  anon4_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1 ==> !_READ_HAS_OCCURRED_$$arg.;
    assume _P$1 && $0 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume _P$1 && $0 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    havoc _TRACKING;
    return;

  anon5_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$arg.;
    goto anon3;

  anon4_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_1($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon4_Then, anon4_Else;

  anon4_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1 ==> !_READ_HAS_OCCURRED_$$arg.;
    assume _P$1 && $0 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume _P$1 && $0 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    havoc _TRACKING;
    return;

  anon5_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$arg.;
    goto anon3;

  anon4_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_2($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon4_Then, anon4_Else;

  anon4_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1 ==> !_READ_HAS_OCCURRED_$$arg.;
    assume _P$1 && $0 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume _P$1 && $0 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    havoc _TRACKING;
    return;

  anon5_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$arg.;
    goto anon3;

  anon4_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_3($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon4_Then, anon4_Else;

  anon4_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1 ==> !_READ_HAS_OCCURRED_$$arg.;
    assume _P$1 && $0 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume _P$1 && $0 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    havoc _TRACKING;
    return;

  anon5_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$arg.;
    goto anon3;

  anon4_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_4($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon4_Then, anon4_Else;

  anon4_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1 ==> !_READ_HAS_OCCURRED_$$arg.;
    assume _P$1 && $0 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume _P$1 && $0 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    havoc _TRACKING;
    return;

  anon5_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$arg.;
    goto anon3;

  anon4_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_5($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon4_Then, anon4_Else;

  anon4_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1 ==> !_READ_HAS_OCCURRED_$$arg.;
    assume _P$1 && $0 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume _P$1 && $0 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    havoc _TRACKING;
    return;

  anon5_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$arg.;
    goto anon3;

  anon4_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_6($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon4_Then, anon4_Else;

  anon4_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1 ==> !_READ_HAS_OCCURRED_$$arg.;
    assume _P$1 && $0 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume _P$1 && $0 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    havoc _TRACKING;
    return;

  anon5_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$arg.;
    goto anon3;

  anon4_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_7($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon4_Then, anon4_Else;

  anon4_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1 ==> !_READ_HAS_OCCURRED_$$arg.;
    assume _P$1 && $0 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume _P$1 && $0 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    havoc _TRACKING;
    return;

  anon5_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$arg.;
    goto anon3;

  anon4_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_8($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon4_Then, anon4_Else;

  anon4_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1 ==> !_READ_HAS_OCCURRED_$$arg.;
    assume _P$1 && $0 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume _P$1 && $0 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    havoc _TRACKING;
    return;

  anon5_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$arg.;
    goto anon3;

  anon4_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_9($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon4_Then, anon4_Else;

  anon4_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1 ==> !_READ_HAS_OCCURRED_$$arg.;
    assume _P$1 && $0 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume _P$1 && $0 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    havoc _TRACKING;
    return;

  anon5_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$arg.;
    goto anon3;

  anon4_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_10($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon4_Then, anon4_Else;

  anon4_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1 ==> !_READ_HAS_OCCURRED_$$arg.;
    assume _P$1 && $0 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume _P$1 && $0 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    havoc _TRACKING;
    return;

  anon5_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$arg.;
    goto anon3;

  anon4_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_11($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon4_Then, anon4_Else;

  anon4_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1 ==> !_READ_HAS_OCCURRED_$$arg.;
    assume _P$1 && $0 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume _P$1 && $0 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    havoc _TRACKING;
    return;

  anon5_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$arg.;
    goto anon3;

  anon4_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_12($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon4_Then, anon4_Else;

  anon4_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1 ==> !_READ_HAS_OCCURRED_$$arg.;
    assume _P$1 && $0 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume _P$1 && $0 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    havoc _TRACKING;
    return;

  anon5_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$arg.;
    goto anon3;

  anon4_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_13($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon4_Then, anon4_Else;

  anon4_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1 ==> !_READ_HAS_OCCURRED_$$arg.;
    assume _P$1 && $0 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume _P$1 && $0 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    havoc _TRACKING;
    return;

  anon5_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$arg.;
    goto anon3;

  anon4_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_14($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon4_Then, anon4_Else;

  anon4_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1 ==> !_READ_HAS_OCCURRED_$$arg.;
    assume _P$1 && $0 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume _P$1 && $0 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    havoc _TRACKING;
    return;

  anon5_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$arg.;
    goto anon3;

  anon4_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_15($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon4_Then, anon4_Else;

  anon4_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1 ==> !_READ_HAS_OCCURRED_$$arg.;
    assume _P$1 && $0 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume _P$1 && $0 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    havoc _TRACKING;
    return;

  anon5_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$arg.;
    goto anon3;

  anon4_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_16($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon4_Then, anon4_Else;

  anon4_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1 ==> !_READ_HAS_OCCURRED_$$arg.;
    assume _P$1 && $0 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume _P$1 && $0 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    havoc _TRACKING;
    return;

  anon5_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$arg.;
    goto anon3;

  anon4_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_17($0: bv1, $1: bv1, _P$1: bool, _P$2: bool)
{

  __BarrierImpl:
    goto anon4_Then, anon4_Else;

  anon4_Else:
    assume {:partition} !((!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2)));
    assume _P$1 && $0 != 0bv1 ==> !_READ_HAS_OCCURRED_$$arg.;
    assume _P$1 && $0 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$arg.;
    assume _P$1 && $0 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$arg.;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} !((_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1));
    goto anon3;

  anon3:
    havoc _TRACKING;
    return;

  anon5_Then:
    assume {:partition} (_P$1 && $0 != 0bv1) || (_P$2 && $0 != 0bv1);
    havoc $$arg.;
    goto anon3;

  anon4_Then:
    assume {:partition} (!_P$1 && !_P$2)
       || (
        group_id_x$1 == group_id_x$2
         && group_id_y$1 == group_id_y$2
         && group_id_z$1 == group_id_z$2
         && (!_P$1 || !_P$2));
    return;
}



function {:bvbuiltin "bvsgt"} BV32_SGT(bv32, bv32) : bool;
